// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAdminTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminTokenReqMultiError, or nil if none found.
func (m *GetAdminTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Secret

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetAdminTokenReqMultiError(errors)
	}

	return nil
}

// GetAdminTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetAdminTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetAdminTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminTokenReqMultiError) AllErrors() []error { return m }

// GetAdminTokenReqValidationError is the validation error returned by
// GetAdminTokenReq.Validate if the designated constraints aren't met.
type GetAdminTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminTokenReqValidationError) ErrorName() string { return "GetAdminTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminTokenReqValidationError{}

// Validate checks the field values on GetAdminTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminTokenRespMultiError, or nil if none found.
func (m *GetAdminTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpireTimeSeconds

	if len(errors) > 0 {
		return GetAdminTokenRespMultiError(errors)
	}

	return nil
}

// GetAdminTokenRespMultiError is an error wrapping multiple validation errors
// returned by GetAdminTokenResp.ValidateAll() if the designated constraints
// aren't met.
type GetAdminTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminTokenRespMultiError) AllErrors() []error { return m }

// GetAdminTokenRespValidationError is the validation error returned by
// GetAdminTokenResp.Validate if the designated constraints aren't met.
type GetAdminTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminTokenRespValidationError) ErrorName() string {
	return "GetAdminTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdminTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminTokenRespValidationError{}

// Validate checks the field values on ForceLogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ForceLogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForceLogoutReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ForceLogoutReqMultiError,
// or nil if none found.
func (m *ForceLogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForceLogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlatformID

	// no validation rules for UserID

	if len(errors) > 0 {
		return ForceLogoutReqMultiError(errors)
	}

	return nil
}

// ForceLogoutReqMultiError is an error wrapping multiple validation errors
// returned by ForceLogoutReq.ValidateAll() if the designated constraints
// aren't met.
type ForceLogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForceLogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForceLogoutReqMultiError) AllErrors() []error { return m }

// ForceLogoutReqValidationError is the validation error returned by
// ForceLogoutReq.Validate if the designated constraints aren't met.
type ForceLogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForceLogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForceLogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForceLogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForceLogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForceLogoutReqValidationError) ErrorName() string { return "ForceLogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e ForceLogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForceLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForceLogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForceLogoutReqValidationError{}

// Validate checks the field values on ForceLogoutResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ForceLogoutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForceLogoutResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForceLogoutRespMultiError, or nil if none found.
func (m *ForceLogoutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForceLogoutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ForceLogoutRespMultiError(errors)
	}

	return nil
}

// ForceLogoutRespMultiError is an error wrapping multiple validation errors
// returned by ForceLogoutResp.ValidateAll() if the designated constraints
// aren't met.
type ForceLogoutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForceLogoutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForceLogoutRespMultiError) AllErrors() []error { return m }

// ForceLogoutRespValidationError is the validation error returned by
// ForceLogoutResp.Validate if the designated constraints aren't met.
type ForceLogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForceLogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForceLogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForceLogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForceLogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForceLogoutRespValidationError) ErrorName() string { return "ForceLogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e ForceLogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForceLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForceLogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForceLogoutRespValidationError{}

// Validate checks the field values on ParseTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseTokenReqMultiError, or
// nil if none found.
func (m *ParseTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ParseTokenReqMultiError(errors)
	}

	return nil
}

// ParseTokenReqMultiError is an error wrapping multiple validation errors
// returned by ParseTokenReq.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenReqMultiError) AllErrors() []error { return m }

// ParseTokenReqValidationError is the validation error returned by
// ParseTokenReq.Validate if the designated constraints aren't met.
type ParseTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenReqValidationError) ErrorName() string { return "ParseTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenReqValidationError{}

// Validate checks the field values on ParseTokenResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseTokenRespMultiError,
// or nil if none found.
func (m *ParseTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for PlatformID

	// no validation rules for ExpireTimeSeconds

	if len(errors) > 0 {
		return ParseTokenRespMultiError(errors)
	}

	return nil
}

// ParseTokenRespMultiError is an error wrapping multiple validation errors
// returned by ParseTokenResp.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenRespMultiError) AllErrors() []error { return m }

// ParseTokenRespValidationError is the validation error returned by
// ParseTokenResp.Validate if the designated constraints aren't met.
type ParseTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenRespValidationError) ErrorName() string { return "ParseTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenRespValidationError{}

// Validate checks the field values on GetUserTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenReqMultiError, or nil if none found.
func (m *GetUserTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlatformID

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserTokenReqMultiError(errors)
	}

	return nil
}

// GetUserTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetUserTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenReqMultiError) AllErrors() []error { return m }

// GetUserTokenReqValidationError is the validation error returned by
// GetUserTokenReq.Validate if the designated constraints aren't met.
type GetUserTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenReqValidationError) ErrorName() string { return "GetUserTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenReqValidationError{}

// Validate checks the field values on GetUserTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenRespMultiError, or nil if none found.
func (m *GetUserTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpireTimeSeconds

	if len(errors) > 0 {
		return GetUserTokenRespMultiError(errors)
	}

	return nil
}

// GetUserTokenRespMultiError is an error wrapping multiple validation errors
// returned by GetUserTokenResp.ValidateAll() if the designated constraints
// aren't met.
type GetUserTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenRespMultiError) AllErrors() []error { return m }

// GetUserTokenRespValidationError is the validation error returned by
// GetUserTokenResp.Validate if the designated constraints aren't met.
type GetUserTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenRespValidationError) ErrorName() string { return "GetUserTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenRespValidationError{}

// Validate checks the field values on InvalidateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateTokenReqMultiError, or nil if none found.
func (m *InvalidateTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreservedToken

	// no validation rules for UserID

	// no validation rules for PlatformID

	if len(errors) > 0 {
		return InvalidateTokenReqMultiError(errors)
	}

	return nil
}

// InvalidateTokenReqMultiError is an error wrapping multiple validation errors
// returned by InvalidateTokenReq.ValidateAll() if the designated constraints
// aren't met.
type InvalidateTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateTokenReqMultiError) AllErrors() []error { return m }

// InvalidateTokenReqValidationError is the validation error returned by
// InvalidateTokenReq.Validate if the designated constraints aren't met.
type InvalidateTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateTokenReqValidationError) ErrorName() string {
	return "InvalidateTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateTokenReqValidationError{}

// Validate checks the field values on InvalidateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateTokenRespMultiError, or nil if none found.
func (m *InvalidateTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InvalidateTokenRespMultiError(errors)
	}

	return nil
}

// InvalidateTokenRespMultiError is an error wrapping multiple validation
// errors returned by InvalidateTokenResp.ValidateAll() if the designated
// constraints aren't met.
type InvalidateTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateTokenRespMultiError) AllErrors() []error { return m }

// InvalidateTokenRespValidationError is the validation error returned by
// InvalidateTokenResp.Validate if the designated constraints aren't met.
type InvalidateTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateTokenRespValidationError) ErrorName() string {
	return "InvalidateTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateTokenRespValidationError{}

// Validate checks the field values on KickTokensReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KickTokensReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickTokensReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KickTokensReqMultiError, or
// nil if none found.
func (m *KickTokensReq) ValidateAll() error {
	return m.validate(true)
}

func (m *KickTokensReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return KickTokensReqMultiError(errors)
	}

	return nil
}

// KickTokensReqMultiError is an error wrapping multiple validation errors
// returned by KickTokensReq.ValidateAll() if the designated constraints
// aren't met.
type KickTokensReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickTokensReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickTokensReqMultiError) AllErrors() []error { return m }

// KickTokensReqValidationError is the validation error returned by
// KickTokensReq.Validate if the designated constraints aren't met.
type KickTokensReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickTokensReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickTokensReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickTokensReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickTokensReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickTokensReqValidationError) ErrorName() string { return "KickTokensReqValidationError" }

// Error satisfies the builtin error interface
func (e KickTokensReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickTokensReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickTokensReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickTokensReqValidationError{}

// Validate checks the field values on KickTokensResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KickTokensResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickTokensResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KickTokensRespMultiError,
// or nil if none found.
func (m *KickTokensResp) ValidateAll() error {
	return m.validate(true)
}

func (m *KickTokensResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return KickTokensRespMultiError(errors)
	}

	return nil
}

// KickTokensRespMultiError is an error wrapping multiple validation errors
// returned by KickTokensResp.ValidateAll() if the designated constraints
// aren't met.
type KickTokensRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickTokensRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickTokensRespMultiError) AllErrors() []error { return m }

// KickTokensRespValidationError is the validation error returned by
// KickTokensResp.Validate if the designated constraints aren't met.
type KickTokensRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickTokensRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickTokensRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickTokensRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickTokensRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickTokensRespValidationError) ErrorName() string { return "KickTokensRespValidationError" }

// Error satisfies the builtin error interface
func (e KickTokensRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickTokensResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickTokensRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickTokensRespValidationError{}
