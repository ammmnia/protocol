// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: conversation/conversation.proto

package conversation

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Conversation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conversation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conversation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConversationMultiError, or
// nil if none found.
func (m *Conversation) ValidateAll() error {
	return m.validate(true)
}

func (m *Conversation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for ConversationID

	// no validation rules for RecvMsgOpt

	// no validation rules for ConversationType

	// no validation rules for UserID

	// no validation rules for GroupID

	// no validation rules for IsPinned

	// no validation rules for AttachedInfo

	// no validation rules for IsPrivateChat

	// no validation rules for GroupAtType

	// no validation rules for Ex

	// no validation rules for BurnDuration

	// no validation rules for MinSeq

	// no validation rules for MaxSeq

	// no validation rules for MsgDestructTime

	// no validation rules for LatestMsgDestructTime

	// no validation rules for IsMsgDestruct

	if len(errors) > 0 {
		return ConversationMultiError(errors)
	}

	return nil
}

// ConversationMultiError is an error wrapping multiple validation errors
// returned by Conversation.ValidateAll() if the designated constraints aren't met.
type ConversationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationMultiError) AllErrors() []error { return m }

// ConversationValidationError is the validation error returned by
// Conversation.Validate if the designated constraints aren't met.
type ConversationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationValidationError) ErrorName() string { return "ConversationValidationError" }

// Error satisfies the builtin error interface
func (e ConversationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationValidationError{}

// Validate checks the field values on ConversationReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConversationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConversationReqMultiError, or nil if none found.
func (m *ConversationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConversationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	// no validation rules for ConversationType

	// no validation rules for UserID

	// no validation rules for GroupID

	if all {
		switch v := interface{}(m.GetRecvMsgOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "RecvMsgOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "RecvMsgOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecvMsgOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "RecvMsgOpt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsPinned()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "IsPinned",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "IsPinned",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsPinned()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "IsPinned",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachedInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "AttachedInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "AttachedInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachedInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "AttachedInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsPrivateChat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "IsPrivateChat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "IsPrivateChat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsPrivateChat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "IsPrivateChat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "Ex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBurnDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "BurnDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "BurnDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBurnDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "BurnDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinSeq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "MinSeq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "MinSeq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinSeq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "MinSeq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxSeq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "MaxSeq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "MaxSeq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxSeq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "MaxSeq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGroupAtType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "GroupAtType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "GroupAtType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupAtType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "GroupAtType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMsgDestructTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "MsgDestructTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "MsgDestructTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsgDestructTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "MsgDestructTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsMsgDestruct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "IsMsgDestruct",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationReqValidationError{
					field:  "IsMsgDestruct",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsMsgDestruct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationReqValidationError{
				field:  "IsMsgDestruct",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConversationReqMultiError(errors)
	}

	return nil
}

// ConversationReqMultiError is an error wrapping multiple validation errors
// returned by ConversationReq.ValidateAll() if the designated constraints
// aren't met.
type ConversationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationReqMultiError) AllErrors() []error { return m }

// ConversationReqValidationError is the validation error returned by
// ConversationReq.Validate if the designated constraints aren't met.
type ConversationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationReqValidationError) ErrorName() string { return "ConversationReqValidationError" }

// Error satisfies the builtin error interface
func (e ConversationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationReqValidationError{}

// Validate checks the field values on SetConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationReqMultiError, or nil if none found.
func (m *SetConversationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetConversationReqValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetConversationReqValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetConversationReqValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetConversationReqMultiError(errors)
	}

	return nil
}

// SetConversationReqMultiError is an error wrapping multiple validation errors
// returned by SetConversationReq.ValidateAll() if the designated constraints
// aren't met.
type SetConversationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationReqMultiError) AllErrors() []error { return m }

// SetConversationReqValidationError is the validation error returned by
// SetConversationReq.Validate if the designated constraints aren't met.
type SetConversationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationReqValidationError) ErrorName() string {
	return "SetConversationReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationReqValidationError{}

// Validate checks the field values on SetConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationRespMultiError, or nil if none found.
func (m *SetConversationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetConversationRespMultiError(errors)
	}

	return nil
}

// SetConversationRespMultiError is an error wrapping multiple validation
// errors returned by SetConversationResp.ValidateAll() if the designated
// constraints aren't met.
type SetConversationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationRespMultiError) AllErrors() []error { return m }

// SetConversationRespValidationError is the validation error returned by
// SetConversationResp.Validate if the designated constraints aren't met.
type SetConversationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationRespValidationError) ErrorName() string {
	return "SetConversationRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationRespValidationError{}

// Validate checks the field values on GetConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationReqMultiError, or nil if none found.
func (m *GetConversationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetConversationReqMultiError(errors)
	}

	return nil
}

// GetConversationReqMultiError is an error wrapping multiple validation errors
// returned by GetConversationReq.ValidateAll() if the designated constraints
// aren't met.
type GetConversationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationReqMultiError) AllErrors() []error { return m }

// GetConversationReqValidationError is the validation error returned by
// GetConversationReq.Validate if the designated constraints aren't met.
type GetConversationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationReqValidationError) ErrorName() string {
	return "GetConversationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationReqValidationError{}

// Validate checks the field values on GetConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationRespMultiError, or nil if none found.
func (m *GetConversationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConversationRespValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConversationRespValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConversationRespValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConversationRespMultiError(errors)
	}

	return nil
}

// GetConversationRespMultiError is an error wrapping multiple validation
// errors returned by GetConversationResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationRespMultiError) AllErrors() []error { return m }

// GetConversationRespValidationError is the validation error returned by
// GetConversationResp.Validate if the designated constraints aren't met.
type GetConversationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationRespValidationError) ErrorName() string {
	return "GetConversationRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationRespValidationError{}

// Validate checks the field values on GetSortedConversationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSortedConversationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSortedConversationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSortedConversationListReqMultiError, or nil if none found.
func (m *GetSortedConversationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSortedConversationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSortedConversationListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSortedConversationListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSortedConversationListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSortedConversationListReqMultiError(errors)
	}

	return nil
}

// GetSortedConversationListReqMultiError is an error wrapping multiple
// validation errors returned by GetSortedConversationListReq.ValidateAll() if
// the designated constraints aren't met.
type GetSortedConversationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSortedConversationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSortedConversationListReqMultiError) AllErrors() []error { return m }

// GetSortedConversationListReqValidationError is the validation error returned
// by GetSortedConversationListReq.Validate if the designated constraints
// aren't met.
type GetSortedConversationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSortedConversationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSortedConversationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSortedConversationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSortedConversationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSortedConversationListReqValidationError) ErrorName() string {
	return "GetSortedConversationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSortedConversationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSortedConversationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSortedConversationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSortedConversationListReqValidationError{}

// Validate checks the field values on GetSortedConversationListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSortedConversationListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSortedConversationListResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSortedConversationListRespMultiError, or nil if none found.
func (m *GetSortedConversationListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSortedConversationListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationTotal

	// no validation rules for UnreadTotal

	for idx, item := range m.GetConversationElems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSortedConversationListRespValidationError{
						field:  fmt.Sprintf("ConversationElems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSortedConversationListRespValidationError{
						field:  fmt.Sprintf("ConversationElems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSortedConversationListRespValidationError{
					field:  fmt.Sprintf("ConversationElems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSortedConversationListRespMultiError(errors)
	}

	return nil
}

// GetSortedConversationListRespMultiError is an error wrapping multiple
// validation errors returned by GetSortedConversationListResp.ValidateAll()
// if the designated constraints aren't met.
type GetSortedConversationListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSortedConversationListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSortedConversationListRespMultiError) AllErrors() []error { return m }

// GetSortedConversationListRespValidationError is the validation error
// returned by GetSortedConversationListResp.Validate if the designated
// constraints aren't met.
type GetSortedConversationListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSortedConversationListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSortedConversationListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSortedConversationListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSortedConversationListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSortedConversationListRespValidationError) ErrorName() string {
	return "GetSortedConversationListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSortedConversationListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSortedConversationListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSortedConversationListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSortedConversationListRespValidationError{}

// Validate checks the field values on ConversationElem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConversationElem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConversationElem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConversationElemMultiError, or nil if none found.
func (m *ConversationElem) ValidateAll() error {
	return m.validate(true)
}

func (m *ConversationElem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	// no validation rules for RecvMsgOpt

	// no validation rules for UnreadCount

	// no validation rules for IsPinned

	if all {
		switch v := interface{}(m.GetMsgInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationElemValidationError{
					field:  "MsgInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationElemValidationError{
					field:  "MsgInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsgInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationElemValidationError{
				field:  "MsgInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConversationElemMultiError(errors)
	}

	return nil
}

// ConversationElemMultiError is an error wrapping multiple validation errors
// returned by ConversationElem.ValidateAll() if the designated constraints
// aren't met.
type ConversationElemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationElemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationElemMultiError) AllErrors() []error { return m }

// ConversationElemValidationError is the validation error returned by
// ConversationElem.Validate if the designated constraints aren't met.
type ConversationElemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationElemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationElemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationElemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationElemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationElemValidationError) ErrorName() string { return "ConversationElemValidationError" }

// Error satisfies the builtin error interface
func (e ConversationElemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversationElem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationElemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationElemValidationError{}

// Validate checks the field values on MsgInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MsgInfoMultiError, or nil if none found.
func (m *MsgInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerMsgID

	// no validation rules for ClientMsgID

	// no validation rules for SessionType

	// no validation rules for SendID

	// no validation rules for RecvID

	// no validation rules for SenderName

	// no validation rules for FaceURL

	// no validation rules for GroupID

	// no validation rules for GroupName

	// no validation rules for GroupFaceURL

	// no validation rules for GroupType

	// no validation rules for GroupMemberCount

	// no validation rules for LatestMsgRecvTime

	// no validation rules for MsgFrom

	// no validation rules for ContentType

	// no validation rules for Content

	// no validation rules for Ex

	if len(errors) > 0 {
		return MsgInfoMultiError(errors)
	}

	return nil
}

// MsgInfoMultiError is an error wrapping multiple validation errors returned
// by MsgInfo.ValidateAll() if the designated constraints aren't met.
type MsgInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgInfoMultiError) AllErrors() []error { return m }

// MsgInfoValidationError is the validation error returned by MsgInfo.Validate
// if the designated constraints aren't met.
type MsgInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgInfoValidationError) ErrorName() string { return "MsgInfoValidationError" }

// Error satisfies the builtin error interface
func (e MsgInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgInfoValidationError{}

// Validate checks the field values on GetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationsReqMultiError, or nil if none found.
func (m *GetConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetConversationsReqMultiError(errors)
	}

	return nil
}

// GetConversationsReqMultiError is an error wrapping multiple validation
// errors returned by GetConversationsReq.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsReqMultiError) AllErrors() []error { return m }

// GetConversationsReqValidationError is the validation error returned by
// GetConversationsReq.Validate if the designated constraints aren't met.
type GetConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsReqValidationError) ErrorName() string {
	return "GetConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsReqValidationError{}

// Validate checks the field values on GetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationsRespMultiError, or nil if none found.
func (m *GetConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConversationsRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConversationsRespMultiError(errors)
	}

	return nil
}

// GetConversationsRespMultiError is an error wrapping multiple validation
// errors returned by GetConversationsResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsRespMultiError) AllErrors() []error { return m }

// GetConversationsRespValidationError is the validation error returned by
// GetConversationsResp.Validate if the designated constraints aren't met.
type GetConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsRespValidationError) ErrorName() string {
	return "GetConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsRespValidationError{}

// Validate checks the field values on GetAllConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllConversationsReqMultiError, or nil if none found.
func (m *GetAllConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetAllConversationsReqMultiError(errors)
	}

	return nil
}

// GetAllConversationsReqMultiError is an error wrapping multiple validation
// errors returned by GetAllConversationsReq.ValidateAll() if the designated
// constraints aren't met.
type GetAllConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllConversationsReqMultiError) AllErrors() []error { return m }

// GetAllConversationsReqValidationError is the validation error returned by
// GetAllConversationsReq.Validate if the designated constraints aren't met.
type GetAllConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllConversationsReqValidationError) ErrorName() string {
	return "GetAllConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllConversationsReqValidationError{}

// Validate checks the field values on GetAllConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllConversationsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllConversationsRespMultiError, or nil if none found.
func (m *GetAllConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllConversationsRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllConversationsRespMultiError(errors)
	}

	return nil
}

// GetAllConversationsRespMultiError is an error wrapping multiple validation
// errors returned by GetAllConversationsResp.ValidateAll() if the designated
// constraints aren't met.
type GetAllConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllConversationsRespMultiError) AllErrors() []error { return m }

// GetAllConversationsRespValidationError is the validation error returned by
// GetAllConversationsResp.Validate if the designated constraints aren't met.
type GetAllConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllConversationsRespValidationError) ErrorName() string {
	return "GetAllConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllConversationsRespValidationError{}

// Validate checks the field values on GetRecvMsgNotNotifyUserIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecvMsgNotNotifyUserIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecvMsgNotNotifyUserIDsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRecvMsgNotNotifyUserIDsReqMultiError, or nil if none found.
func (m *GetRecvMsgNotNotifyUserIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecvMsgNotNotifyUserIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetRecvMsgNotNotifyUserIDsReqMultiError(errors)
	}

	return nil
}

// GetRecvMsgNotNotifyUserIDsReqMultiError is an error wrapping multiple
// validation errors returned by GetRecvMsgNotNotifyUserIDsReq.ValidateAll()
// if the designated constraints aren't met.
type GetRecvMsgNotNotifyUserIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecvMsgNotNotifyUserIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecvMsgNotNotifyUserIDsReqMultiError) AllErrors() []error { return m }

// GetRecvMsgNotNotifyUserIDsReqValidationError is the validation error
// returned by GetRecvMsgNotNotifyUserIDsReq.Validate if the designated
// constraints aren't met.
type GetRecvMsgNotNotifyUserIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecvMsgNotNotifyUserIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecvMsgNotNotifyUserIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecvMsgNotNotifyUserIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecvMsgNotNotifyUserIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecvMsgNotNotifyUserIDsReqValidationError) ErrorName() string {
	return "GetRecvMsgNotNotifyUserIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecvMsgNotNotifyUserIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecvMsgNotNotifyUserIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecvMsgNotNotifyUserIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecvMsgNotNotifyUserIDsReqValidationError{}

// Validate checks the field values on GetRecvMsgNotNotifyUserIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecvMsgNotNotifyUserIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecvMsgNotNotifyUserIDsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRecvMsgNotNotifyUserIDsRespMultiError, or nil if none found.
func (m *GetRecvMsgNotNotifyUserIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecvMsgNotNotifyUserIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRecvMsgNotNotifyUserIDsRespMultiError(errors)
	}

	return nil
}

// GetRecvMsgNotNotifyUserIDsRespMultiError is an error wrapping multiple
// validation errors returned by GetRecvMsgNotNotifyUserIDsResp.ValidateAll()
// if the designated constraints aren't met.
type GetRecvMsgNotNotifyUserIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecvMsgNotNotifyUserIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecvMsgNotNotifyUserIDsRespMultiError) AllErrors() []error { return m }

// GetRecvMsgNotNotifyUserIDsRespValidationError is the validation error
// returned by GetRecvMsgNotNotifyUserIDsResp.Validate if the designated
// constraints aren't met.
type GetRecvMsgNotNotifyUserIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecvMsgNotNotifyUserIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecvMsgNotNotifyUserIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecvMsgNotNotifyUserIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecvMsgNotNotifyUserIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecvMsgNotNotifyUserIDsRespValidationError) ErrorName() string {
	return "GetRecvMsgNotNotifyUserIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecvMsgNotNotifyUserIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecvMsgNotNotifyUserIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecvMsgNotNotifyUserIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecvMsgNotNotifyUserIDsRespValidationError{}

// Validate checks the field values on CreateSingleChatConversationsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateSingleChatConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSingleChatConversationsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSingleChatConversationsReqMultiError, or nil if none found.
func (m *CreateSingleChatConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSingleChatConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecvID

	// no validation rules for SendID

	// no validation rules for ConversationID

	// no validation rules for ConversationType

	if len(errors) > 0 {
		return CreateSingleChatConversationsReqMultiError(errors)
	}

	return nil
}

// CreateSingleChatConversationsReqMultiError is an error wrapping multiple
// validation errors returned by
// CreateSingleChatConversationsReq.ValidateAll() if the designated
// constraints aren't met.
type CreateSingleChatConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSingleChatConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSingleChatConversationsReqMultiError) AllErrors() []error { return m }

// CreateSingleChatConversationsReqValidationError is the validation error
// returned by CreateSingleChatConversationsReq.Validate if the designated
// constraints aren't met.
type CreateSingleChatConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSingleChatConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSingleChatConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSingleChatConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSingleChatConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSingleChatConversationsReqValidationError) ErrorName() string {
	return "CreateSingleChatConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSingleChatConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSingleChatConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSingleChatConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSingleChatConversationsReqValidationError{}

// Validate checks the field values on CreateSingleChatConversationsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateSingleChatConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSingleChatConversationsResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateSingleChatConversationsRespMultiError, or nil if none found.
func (m *CreateSingleChatConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSingleChatConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSingleChatConversationsRespMultiError(errors)
	}

	return nil
}

// CreateSingleChatConversationsRespMultiError is an error wrapping multiple
// validation errors returned by
// CreateSingleChatConversationsResp.ValidateAll() if the designated
// constraints aren't met.
type CreateSingleChatConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSingleChatConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSingleChatConversationsRespMultiError) AllErrors() []error { return m }

// CreateSingleChatConversationsRespValidationError is the validation error
// returned by CreateSingleChatConversationsResp.Validate if the designated
// constraints aren't met.
type CreateSingleChatConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSingleChatConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSingleChatConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSingleChatConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSingleChatConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSingleChatConversationsRespValidationError) ErrorName() string {
	return "CreateSingleChatConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSingleChatConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSingleChatConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSingleChatConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSingleChatConversationsRespValidationError{}

// Validate checks the field values on CreateGroupChatConversationsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupChatConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupChatConversationsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateGroupChatConversationsReqMultiError, or nil if none found.
func (m *CreateGroupChatConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupChatConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return CreateGroupChatConversationsReqMultiError(errors)
	}

	return nil
}

// CreateGroupChatConversationsReqMultiError is an error wrapping multiple
// validation errors returned by CreateGroupChatConversationsReq.ValidateAll()
// if the designated constraints aren't met.
type CreateGroupChatConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupChatConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupChatConversationsReqMultiError) AllErrors() []error { return m }

// CreateGroupChatConversationsReqValidationError is the validation error
// returned by CreateGroupChatConversationsReq.Validate if the designated
// constraints aren't met.
type CreateGroupChatConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupChatConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupChatConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupChatConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupChatConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupChatConversationsReqValidationError) ErrorName() string {
	return "CreateGroupChatConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupChatConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupChatConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupChatConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupChatConversationsReqValidationError{}

// Validate checks the field values on CreateGroupChatConversationsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateGroupChatConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupChatConversationsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateGroupChatConversationsRespMultiError, or nil if none found.
func (m *CreateGroupChatConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupChatConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateGroupChatConversationsRespMultiError(errors)
	}

	return nil
}

// CreateGroupChatConversationsRespMultiError is an error wrapping multiple
// validation errors returned by
// CreateGroupChatConversationsResp.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupChatConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupChatConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupChatConversationsRespMultiError) AllErrors() []error { return m }

// CreateGroupChatConversationsRespValidationError is the validation error
// returned by CreateGroupChatConversationsResp.Validate if the designated
// constraints aren't met.
type CreateGroupChatConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupChatConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupChatConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupChatConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupChatConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupChatConversationsRespValidationError) ErrorName() string {
	return "CreateGroupChatConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupChatConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupChatConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupChatConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupChatConversationsRespValidationError{}

// Validate checks the field values on SetConversationMaxSeqReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationMaxSeqReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationMaxSeqReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationMaxSeqReqMultiError, or nil if none found.
func (m *SetConversationMaxSeqReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationMaxSeqReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	// no validation rules for MaxSeq

	if len(errors) > 0 {
		return SetConversationMaxSeqReqMultiError(errors)
	}

	return nil
}

// SetConversationMaxSeqReqMultiError is an error wrapping multiple validation
// errors returned by SetConversationMaxSeqReq.ValidateAll() if the designated
// constraints aren't met.
type SetConversationMaxSeqReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationMaxSeqReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationMaxSeqReqMultiError) AllErrors() []error { return m }

// SetConversationMaxSeqReqValidationError is the validation error returned by
// SetConversationMaxSeqReq.Validate if the designated constraints aren't met.
type SetConversationMaxSeqReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationMaxSeqReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationMaxSeqReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationMaxSeqReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationMaxSeqReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationMaxSeqReqValidationError) ErrorName() string {
	return "SetConversationMaxSeqReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationMaxSeqReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationMaxSeqReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationMaxSeqReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationMaxSeqReqValidationError{}

// Validate checks the field values on SetConversationMaxSeqResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationMaxSeqResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationMaxSeqResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationMaxSeqRespMultiError, or nil if none found.
func (m *SetConversationMaxSeqResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationMaxSeqResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetConversationMaxSeqRespMultiError(errors)
	}

	return nil
}

// SetConversationMaxSeqRespMultiError is an error wrapping multiple validation
// errors returned by SetConversationMaxSeqResp.ValidateAll() if the
// designated constraints aren't met.
type SetConversationMaxSeqRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationMaxSeqRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationMaxSeqRespMultiError) AllErrors() []error { return m }

// SetConversationMaxSeqRespValidationError is the validation error returned by
// SetConversationMaxSeqResp.Validate if the designated constraints aren't met.
type SetConversationMaxSeqRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationMaxSeqRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationMaxSeqRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationMaxSeqRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationMaxSeqRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationMaxSeqRespValidationError) ErrorName() string {
	return "SetConversationMaxSeqRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationMaxSeqRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationMaxSeqResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationMaxSeqRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationMaxSeqRespValidationError{}

// Validate checks the field values on SetConversationMinSeqReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationMinSeqReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationMinSeqReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationMinSeqReqMultiError, or nil if none found.
func (m *SetConversationMinSeqReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationMinSeqReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	// no validation rules for MinSeq

	if len(errors) > 0 {
		return SetConversationMinSeqReqMultiError(errors)
	}

	return nil
}

// SetConversationMinSeqReqMultiError is an error wrapping multiple validation
// errors returned by SetConversationMinSeqReq.ValidateAll() if the designated
// constraints aren't met.
type SetConversationMinSeqReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationMinSeqReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationMinSeqReqMultiError) AllErrors() []error { return m }

// SetConversationMinSeqReqValidationError is the validation error returned by
// SetConversationMinSeqReq.Validate if the designated constraints aren't met.
type SetConversationMinSeqReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationMinSeqReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationMinSeqReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationMinSeqReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationMinSeqReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationMinSeqReqValidationError) ErrorName() string {
	return "SetConversationMinSeqReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationMinSeqReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationMinSeqReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationMinSeqReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationMinSeqReqValidationError{}

// Validate checks the field values on SetConversationMinSeqResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationMinSeqResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationMinSeqResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationMinSeqRespMultiError, or nil if none found.
func (m *SetConversationMinSeqResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationMinSeqResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetConversationMinSeqRespMultiError(errors)
	}

	return nil
}

// SetConversationMinSeqRespMultiError is an error wrapping multiple validation
// errors returned by SetConversationMinSeqResp.ValidateAll() if the
// designated constraints aren't met.
type SetConversationMinSeqRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationMinSeqRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationMinSeqRespMultiError) AllErrors() []error { return m }

// SetConversationMinSeqRespValidationError is the validation error returned by
// SetConversationMinSeqResp.Validate if the designated constraints aren't met.
type SetConversationMinSeqRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationMinSeqRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationMinSeqRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationMinSeqRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationMinSeqRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationMinSeqRespValidationError) ErrorName() string {
	return "SetConversationMinSeqRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationMinSeqRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationMinSeqResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationMinSeqRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationMinSeqRespValidationError{}

// Validate checks the field values on GetConversationIDsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationIDsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationIDsReqMultiError, or nil if none found.
func (m *GetConversationIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetConversationIDsReqMultiError(errors)
	}

	return nil
}

// GetConversationIDsReqMultiError is an error wrapping multiple validation
// errors returned by GetConversationIDsReq.ValidateAll() if the designated
// constraints aren't met.
type GetConversationIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationIDsReqMultiError) AllErrors() []error { return m }

// GetConversationIDsReqValidationError is the validation error returned by
// GetConversationIDsReq.Validate if the designated constraints aren't met.
type GetConversationIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationIDsReqValidationError) ErrorName() string {
	return "GetConversationIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationIDsReqValidationError{}

// Validate checks the field values on GetConversationIDsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationIDsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationIDsRespMultiError, or nil if none found.
func (m *GetConversationIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConversationIDsRespMultiError(errors)
	}

	return nil
}

// GetConversationIDsRespMultiError is an error wrapping multiple validation
// errors returned by GetConversationIDsResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationIDsRespMultiError) AllErrors() []error { return m }

// GetConversationIDsRespValidationError is the validation error returned by
// GetConversationIDsResp.Validate if the designated constraints aren't met.
type GetConversationIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationIDsRespValidationError) ErrorName() string {
	return "GetConversationIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationIDsRespValidationError{}

// Validate checks the field values on SetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationsReqMultiError, or nil if none found.
func (m *SetConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetConversationsReqValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetConversationsReqValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetConversationsReqValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetConversationsReqMultiError(errors)
	}

	return nil
}

// SetConversationsReqMultiError is an error wrapping multiple validation
// errors returned by SetConversationsReq.ValidateAll() if the designated
// constraints aren't met.
type SetConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationsReqMultiError) AllErrors() []error { return m }

// SetConversationsReqValidationError is the validation error returned by
// SetConversationsReq.Validate if the designated constraints aren't met.
type SetConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationsReqValidationError) ErrorName() string {
	return "SetConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationsReqValidationError{}

// Validate checks the field values on SetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationsRespMultiError, or nil if none found.
func (m *SetConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetConversationsRespMultiError(errors)
	}

	return nil
}

// SetConversationsRespMultiError is an error wrapping multiple validation
// errors returned by SetConversationsResp.ValidateAll() if the designated
// constraints aren't met.
type SetConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationsRespMultiError) AllErrors() []error { return m }

// SetConversationsRespValidationError is the validation error returned by
// SetConversationsResp.Validate if the designated constraints aren't met.
type SetConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationsRespValidationError) ErrorName() string {
	return "SetConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationsRespValidationError{}

// Validate checks the field values on GetUserConversationIDsHashReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserConversationIDsHashReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserConversationIDsHashReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserConversationIDsHashReqMultiError, or nil if none found.
func (m *GetUserConversationIDsHashReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserConversationIDsHashReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetUserConversationIDsHashReqMultiError(errors)
	}

	return nil
}

// GetUserConversationIDsHashReqMultiError is an error wrapping multiple
// validation errors returned by GetUserConversationIDsHashReq.ValidateAll()
// if the designated constraints aren't met.
type GetUserConversationIDsHashReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserConversationIDsHashReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserConversationIDsHashReqMultiError) AllErrors() []error { return m }

// GetUserConversationIDsHashReqValidationError is the validation error
// returned by GetUserConversationIDsHashReq.Validate if the designated
// constraints aren't met.
type GetUserConversationIDsHashReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserConversationIDsHashReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserConversationIDsHashReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserConversationIDsHashReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserConversationIDsHashReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserConversationIDsHashReqValidationError) ErrorName() string {
	return "GetUserConversationIDsHashReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserConversationIDsHashReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserConversationIDsHashReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserConversationIDsHashReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserConversationIDsHashReqValidationError{}

// Validate checks the field values on GetUserConversationIDsHashResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserConversationIDsHashResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserConversationIDsHashResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserConversationIDsHashRespMultiError, or nil if none found.
func (m *GetUserConversationIDsHashResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserConversationIDsHashResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	if len(errors) > 0 {
		return GetUserConversationIDsHashRespMultiError(errors)
	}

	return nil
}

// GetUserConversationIDsHashRespMultiError is an error wrapping multiple
// validation errors returned by GetUserConversationIDsHashResp.ValidateAll()
// if the designated constraints aren't met.
type GetUserConversationIDsHashRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserConversationIDsHashRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserConversationIDsHashRespMultiError) AllErrors() []error { return m }

// GetUserConversationIDsHashRespValidationError is the validation error
// returned by GetUserConversationIDsHashResp.Validate if the designated
// constraints aren't met.
type GetUserConversationIDsHashRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserConversationIDsHashRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserConversationIDsHashRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserConversationIDsHashRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserConversationIDsHashRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserConversationIDsHashRespValidationError) ErrorName() string {
	return "GetUserConversationIDsHashRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserConversationIDsHashRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserConversationIDsHashResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserConversationIDsHashRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserConversationIDsHashRespValidationError{}

// Validate checks the field values on GetConversationsByConversationIDReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetConversationsByConversationIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsByConversationIDReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConversationsByConversationIDReqMultiError, or nil if none found.
func (m *GetConversationsByConversationIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsByConversationIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConversationsByConversationIDReqMultiError(errors)
	}

	return nil
}

// GetConversationsByConversationIDReqMultiError is an error wrapping multiple
// validation errors returned by
// GetConversationsByConversationIDReq.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsByConversationIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsByConversationIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsByConversationIDReqMultiError) AllErrors() []error { return m }

// GetConversationsByConversationIDReqValidationError is the validation error
// returned by GetConversationsByConversationIDReq.Validate if the designated
// constraints aren't met.
type GetConversationsByConversationIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsByConversationIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsByConversationIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsByConversationIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsByConversationIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsByConversationIDReqValidationError) ErrorName() string {
	return "GetConversationsByConversationIDReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsByConversationIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsByConversationIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsByConversationIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsByConversationIDReqValidationError{}

// Validate checks the field values on GetConversationsByConversationIDResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetConversationsByConversationIDResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsByConversationIDResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConversationsByConversationIDRespMultiError, or nil if none found.
func (m *GetConversationsByConversationIDResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsByConversationIDResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConversationsByConversationIDRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConversationsByConversationIDRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConversationsByConversationIDRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConversationsByConversationIDRespMultiError(errors)
	}

	return nil
}

// GetConversationsByConversationIDRespMultiError is an error wrapping multiple
// validation errors returned by
// GetConversationsByConversationIDResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsByConversationIDRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsByConversationIDRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsByConversationIDRespMultiError) AllErrors() []error { return m }

// GetConversationsByConversationIDRespValidationError is the validation error
// returned by GetConversationsByConversationIDResp.Validate if the designated
// constraints aren't met.
type GetConversationsByConversationIDRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsByConversationIDRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsByConversationIDRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsByConversationIDRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsByConversationIDRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsByConversationIDRespValidationError) ErrorName() string {
	return "GetConversationsByConversationIDRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsByConversationIDRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsByConversationIDResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsByConversationIDRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsByConversationIDRespValidationError{}

// Validate checks the field values on GetConversationOfflinePushUserIDsReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetConversationOfflinePushUserIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationOfflinePushUserIDsReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConversationOfflinePushUserIDsReqMultiError, or nil if none found.
func (m *GetConversationOfflinePushUserIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationOfflinePushUserIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	if len(errors) > 0 {
		return GetConversationOfflinePushUserIDsReqMultiError(errors)
	}

	return nil
}

// GetConversationOfflinePushUserIDsReqMultiError is an error wrapping multiple
// validation errors returned by
// GetConversationOfflinePushUserIDsReq.ValidateAll() if the designated
// constraints aren't met.
type GetConversationOfflinePushUserIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationOfflinePushUserIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationOfflinePushUserIDsReqMultiError) AllErrors() []error { return m }

// GetConversationOfflinePushUserIDsReqValidationError is the validation error
// returned by GetConversationOfflinePushUserIDsReq.Validate if the designated
// constraints aren't met.
type GetConversationOfflinePushUserIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationOfflinePushUserIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationOfflinePushUserIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationOfflinePushUserIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationOfflinePushUserIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationOfflinePushUserIDsReqValidationError) ErrorName() string {
	return "GetConversationOfflinePushUserIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationOfflinePushUserIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationOfflinePushUserIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationOfflinePushUserIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationOfflinePushUserIDsReqValidationError{}

// Validate checks the field values on GetConversationOfflinePushUserIDsResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetConversationOfflinePushUserIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationOfflinePushUserIDsResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConversationOfflinePushUserIDsRespMultiError, or nil if none found.
func (m *GetConversationOfflinePushUserIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationOfflinePushUserIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConversationOfflinePushUserIDsRespMultiError(errors)
	}

	return nil
}

// GetConversationOfflinePushUserIDsRespMultiError is an error wrapping
// multiple validation errors returned by
// GetConversationOfflinePushUserIDsResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationOfflinePushUserIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationOfflinePushUserIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationOfflinePushUserIDsRespMultiError) AllErrors() []error { return m }

// GetConversationOfflinePushUserIDsRespValidationError is the validation error
// returned by GetConversationOfflinePushUserIDsResp.Validate if the
// designated constraints aren't met.
type GetConversationOfflinePushUserIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationOfflinePushUserIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationOfflinePushUserIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationOfflinePushUserIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationOfflinePushUserIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationOfflinePushUserIDsRespValidationError) ErrorName() string {
	return "GetConversationOfflinePushUserIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationOfflinePushUserIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationOfflinePushUserIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationOfflinePushUserIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationOfflinePushUserIDsRespValidationError{}

// Validate checks the field values on
// GetConversationNotReceiveMessageUserIDsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetConversationNotReceiveMessageUserIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetConversationNotReceiveMessageUserIDsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetConversationNotReceiveMessageUserIDsReqMultiError, or nil if none found.
func (m *GetConversationNotReceiveMessageUserIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationNotReceiveMessageUserIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	if len(errors) > 0 {
		return GetConversationNotReceiveMessageUserIDsReqMultiError(errors)
	}

	return nil
}

// GetConversationNotReceiveMessageUserIDsReqMultiError is an error wrapping
// multiple validation errors returned by
// GetConversationNotReceiveMessageUserIDsReq.ValidateAll() if the designated
// constraints aren't met.
type GetConversationNotReceiveMessageUserIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationNotReceiveMessageUserIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationNotReceiveMessageUserIDsReqMultiError) AllErrors() []error { return m }

// GetConversationNotReceiveMessageUserIDsReqValidationError is the validation
// error returned by GetConversationNotReceiveMessageUserIDsReq.Validate if
// the designated constraints aren't met.
type GetConversationNotReceiveMessageUserIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationNotReceiveMessageUserIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationNotReceiveMessageUserIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationNotReceiveMessageUserIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationNotReceiveMessageUserIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationNotReceiveMessageUserIDsReqValidationError) ErrorName() string {
	return "GetConversationNotReceiveMessageUserIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationNotReceiveMessageUserIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationNotReceiveMessageUserIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationNotReceiveMessageUserIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationNotReceiveMessageUserIDsReqValidationError{}

// Validate checks the field values on
// GetConversationNotReceiveMessageUserIDsResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetConversationNotReceiveMessageUserIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetConversationNotReceiveMessageUserIDsResp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetConversationNotReceiveMessageUserIDsRespMultiError, or nil if none found.
func (m *GetConversationNotReceiveMessageUserIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationNotReceiveMessageUserIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConversationNotReceiveMessageUserIDsRespMultiError(errors)
	}

	return nil
}

// GetConversationNotReceiveMessageUserIDsRespMultiError is an error wrapping
// multiple validation errors returned by
// GetConversationNotReceiveMessageUserIDsResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationNotReceiveMessageUserIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationNotReceiveMessageUserIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationNotReceiveMessageUserIDsRespMultiError) AllErrors() []error { return m }

// GetConversationNotReceiveMessageUserIDsRespValidationError is the validation
// error returned by GetConversationNotReceiveMessageUserIDsResp.Validate if
// the designated constraints aren't met.
type GetConversationNotReceiveMessageUserIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationNotReceiveMessageUserIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationNotReceiveMessageUserIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationNotReceiveMessageUserIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationNotReceiveMessageUserIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationNotReceiveMessageUserIDsRespValidationError) ErrorName() string {
	return "GetConversationNotReceiveMessageUserIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationNotReceiveMessageUserIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationNotReceiveMessageUserIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationNotReceiveMessageUserIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationNotReceiveMessageUserIDsRespValidationError{}

// Validate checks the field values on UpdateConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConversationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConversationReqMultiError, or nil if none found.
func (m *UpdateConversationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConversationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	if all {
		switch v := interface{}(m.GetRecvMsgOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "RecvMsgOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "RecvMsgOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecvMsgOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "RecvMsgOpt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsPinned()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "IsPinned",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "IsPinned",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsPinned()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "IsPinned",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachedInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "AttachedInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "AttachedInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachedInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "AttachedInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsPrivateChat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "IsPrivateChat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "IsPrivateChat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsPrivateChat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "IsPrivateChat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "Ex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBurnDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "BurnDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "BurnDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBurnDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "BurnDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMinSeq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "MinSeq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "MinSeq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinSeq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "MinSeq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxSeq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "MaxSeq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "MaxSeq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxSeq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "MaxSeq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGroupAtType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "GroupAtType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "GroupAtType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupAtType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "GroupAtType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMsgDestructTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "MsgDestructTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "MsgDestructTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsgDestructTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "MsgDestructTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsMsgDestruct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "IsMsgDestruct",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "IsMsgDestruct",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsMsgDestruct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "IsMsgDestruct",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLatestMsgDestructTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "LatestMsgDestructTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationReqValidationError{
					field:  "LatestMsgDestructTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestMsgDestructTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationReqValidationError{
				field:  "LatestMsgDestructTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConversationReqMultiError(errors)
	}

	return nil
}

// UpdateConversationReqMultiError is an error wrapping multiple validation
// errors returned by UpdateConversationReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateConversationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConversationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConversationReqMultiError) AllErrors() []error { return m }

// UpdateConversationReqValidationError is the validation error returned by
// UpdateConversationReq.Validate if the designated constraints aren't met.
type UpdateConversationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConversationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConversationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConversationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConversationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConversationReqValidationError) ErrorName() string {
	return "UpdateConversationReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConversationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConversationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConversationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConversationReqValidationError{}

// Validate checks the field values on UpdateConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConversationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConversationRespMultiError, or nil if none found.
func (m *UpdateConversationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConversationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateConversationRespMultiError(errors)
	}

	return nil
}

// UpdateConversationRespMultiError is an error wrapping multiple validation
// errors returned by UpdateConversationResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateConversationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConversationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConversationRespMultiError) AllErrors() []error { return m }

// UpdateConversationRespValidationError is the validation error returned by
// UpdateConversationResp.Validate if the designated constraints aren't met.
type UpdateConversationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConversationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConversationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConversationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConversationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConversationRespValidationError) ErrorName() string {
	return "UpdateConversationRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConversationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConversationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConversationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConversationRespValidationError{}

// Validate checks the field values on GetFullOwnerConversationIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullOwnerConversationIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullOwnerConversationIDsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFullOwnerConversationIDsReqMultiError, or nil if none found.
func (m *GetFullOwnerConversationIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullOwnerConversationIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdHash

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetFullOwnerConversationIDsReqMultiError(errors)
	}

	return nil
}

// GetFullOwnerConversationIDsReqMultiError is an error wrapping multiple
// validation errors returned by GetFullOwnerConversationIDsReq.ValidateAll()
// if the designated constraints aren't met.
type GetFullOwnerConversationIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullOwnerConversationIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullOwnerConversationIDsReqMultiError) AllErrors() []error { return m }

// GetFullOwnerConversationIDsReqValidationError is the validation error
// returned by GetFullOwnerConversationIDsReq.Validate if the designated
// constraints aren't met.
type GetFullOwnerConversationIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullOwnerConversationIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullOwnerConversationIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullOwnerConversationIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullOwnerConversationIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullOwnerConversationIDsReqValidationError) ErrorName() string {
	return "GetFullOwnerConversationIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullOwnerConversationIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullOwnerConversationIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullOwnerConversationIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullOwnerConversationIDsReqValidationError{}

// Validate checks the field values on GetFullOwnerConversationIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullOwnerConversationIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullOwnerConversationIDsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFullOwnerConversationIDsRespMultiError, or nil if none found.
func (m *GetFullOwnerConversationIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullOwnerConversationIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Equal

	if len(errors) > 0 {
		return GetFullOwnerConversationIDsRespMultiError(errors)
	}

	return nil
}

// GetFullOwnerConversationIDsRespMultiError is an error wrapping multiple
// validation errors returned by GetFullOwnerConversationIDsResp.ValidateAll()
// if the designated constraints aren't met.
type GetFullOwnerConversationIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullOwnerConversationIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullOwnerConversationIDsRespMultiError) AllErrors() []error { return m }

// GetFullOwnerConversationIDsRespValidationError is the validation error
// returned by GetFullOwnerConversationIDsResp.Validate if the designated
// constraints aren't met.
type GetFullOwnerConversationIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullOwnerConversationIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullOwnerConversationIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullOwnerConversationIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullOwnerConversationIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullOwnerConversationIDsRespValidationError) ErrorName() string {
	return "GetFullOwnerConversationIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullOwnerConversationIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullOwnerConversationIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullOwnerConversationIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullOwnerConversationIDsRespValidationError{}

// Validate checks the field values on GetIncrementalConversationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalConversationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalConversationReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIncrementalConversationReqMultiError, or nil if none found.
func (m *GetIncrementalConversationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalConversationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for VersionID

	// no validation rules for Version

	if len(errors) > 0 {
		return GetIncrementalConversationReqMultiError(errors)
	}

	return nil
}

// GetIncrementalConversationReqMultiError is an error wrapping multiple
// validation errors returned by GetIncrementalConversationReq.ValidateAll()
// if the designated constraints aren't met.
type GetIncrementalConversationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalConversationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalConversationReqMultiError) AllErrors() []error { return m }

// GetIncrementalConversationReqValidationError is the validation error
// returned by GetIncrementalConversationReq.Validate if the designated
// constraints aren't met.
type GetIncrementalConversationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalConversationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalConversationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalConversationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalConversationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalConversationReqValidationError) ErrorName() string {
	return "GetIncrementalConversationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalConversationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalConversationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalConversationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalConversationReqValidationError{}

// Validate checks the field values on GetIncrementalConversationResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalConversationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalConversationResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIncrementalConversationRespMultiError, or nil if none found.
func (m *GetIncrementalConversationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalConversationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Full

	for idx, item := range m.GetInsert() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalConversationRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalConversationRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalConversationRespValidationError{
					field:  fmt.Sprintf("Insert[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalConversationRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalConversationRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalConversationRespValidationError{
					field:  fmt.Sprintf("Update[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIncrementalConversationRespMultiError(errors)
	}

	return nil
}

// GetIncrementalConversationRespMultiError is an error wrapping multiple
// validation errors returned by GetIncrementalConversationResp.ValidateAll()
// if the designated constraints aren't met.
type GetIncrementalConversationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalConversationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalConversationRespMultiError) AllErrors() []error { return m }

// GetIncrementalConversationRespValidationError is the validation error
// returned by GetIncrementalConversationResp.Validate if the designated
// constraints aren't met.
type GetIncrementalConversationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalConversationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalConversationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalConversationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalConversationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalConversationRespValidationError) ErrorName() string {
	return "GetIncrementalConversationRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalConversationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalConversationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalConversationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalConversationRespValidationError{}

// Validate checks the field values on GetOwnerConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOwnerConversationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOwnerConversationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOwnerConversationReqMultiError, or nil if none found.
func (m *GetOwnerConversationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOwnerConversationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOwnerConversationReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOwnerConversationReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOwnerConversationReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOwnerConversationReqMultiError(errors)
	}

	return nil
}

// GetOwnerConversationReqMultiError is an error wrapping multiple validation
// errors returned by GetOwnerConversationReq.ValidateAll() if the designated
// constraints aren't met.
type GetOwnerConversationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOwnerConversationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOwnerConversationReqMultiError) AllErrors() []error { return m }

// GetOwnerConversationReqValidationError is the validation error returned by
// GetOwnerConversationReq.Validate if the designated constraints aren't met.
type GetOwnerConversationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnerConversationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnerConversationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnerConversationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnerConversationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnerConversationReqValidationError) ErrorName() string {
	return "GetOwnerConversationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOwnerConversationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnerConversationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnerConversationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnerConversationReqValidationError{}

// Validate checks the field values on GetOwnerConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOwnerConversationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOwnerConversationResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOwnerConversationRespMultiError, or nil if none found.
func (m *GetOwnerConversationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOwnerConversationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOwnerConversationRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOwnerConversationRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOwnerConversationRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOwnerConversationRespMultiError(errors)
	}

	return nil
}

// GetOwnerConversationRespMultiError is an error wrapping multiple validation
// errors returned by GetOwnerConversationResp.ValidateAll() if the designated
// constraints aren't met.
type GetOwnerConversationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOwnerConversationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOwnerConversationRespMultiError) AllErrors() []error { return m }

// GetOwnerConversationRespValidationError is the validation error returned by
// GetOwnerConversationResp.Validate if the designated constraints aren't met.
type GetOwnerConversationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnerConversationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnerConversationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnerConversationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnerConversationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnerConversationRespValidationError) ErrorName() string {
	return "GetOwnerConversationRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOwnerConversationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnerConversationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnerConversationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnerConversationRespValidationError{}

// Validate checks the field values on GetConversationsNeedDestructMsgsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetConversationsNeedDestructMsgsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsNeedDestructMsgsReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConversationsNeedDestructMsgsReqMultiError, or nil if none found.
func (m *GetConversationsNeedDestructMsgsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsNeedDestructMsgsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConversationsNeedDestructMsgsReqMultiError(errors)
	}

	return nil
}

// GetConversationsNeedDestructMsgsReqMultiError is an error wrapping multiple
// validation errors returned by
// GetConversationsNeedDestructMsgsReq.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsNeedDestructMsgsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsNeedDestructMsgsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsNeedDestructMsgsReqMultiError) AllErrors() []error { return m }

// GetConversationsNeedDestructMsgsReqValidationError is the validation error
// returned by GetConversationsNeedDestructMsgsReq.Validate if the designated
// constraints aren't met.
type GetConversationsNeedDestructMsgsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsNeedDestructMsgsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsNeedDestructMsgsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsNeedDestructMsgsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsNeedDestructMsgsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsNeedDestructMsgsReqValidationError) ErrorName() string {
	return "GetConversationsNeedDestructMsgsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsNeedDestructMsgsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsNeedDestructMsgsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsNeedDestructMsgsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsNeedDestructMsgsReqValidationError{}

// Validate checks the field values on GetConversationsNeedDestructMsgsResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetConversationsNeedDestructMsgsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsNeedDestructMsgsResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConversationsNeedDestructMsgsRespMultiError, or nil if none found.
func (m *GetConversationsNeedDestructMsgsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsNeedDestructMsgsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConversationsNeedDestructMsgsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConversationsNeedDestructMsgsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConversationsNeedDestructMsgsRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConversationsNeedDestructMsgsRespMultiError(errors)
	}

	return nil
}

// GetConversationsNeedDestructMsgsRespMultiError is an error wrapping multiple
// validation errors returned by
// GetConversationsNeedDestructMsgsResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsNeedDestructMsgsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsNeedDestructMsgsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsNeedDestructMsgsRespMultiError) AllErrors() []error { return m }

// GetConversationsNeedDestructMsgsRespValidationError is the validation error
// returned by GetConversationsNeedDestructMsgsResp.Validate if the designated
// constraints aren't met.
type GetConversationsNeedDestructMsgsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsNeedDestructMsgsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsNeedDestructMsgsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsNeedDestructMsgsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsNeedDestructMsgsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsNeedDestructMsgsRespValidationError) ErrorName() string {
	return "GetConversationsNeedDestructMsgsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsNeedDestructMsgsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsNeedDestructMsgsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsNeedDestructMsgsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsNeedDestructMsgsRespValidationError{}

// Validate checks the field values on GetNotNotifyConversationIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotNotifyConversationIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotNotifyConversationIDsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotNotifyConversationIDsReqMultiError, or nil if none found.
func (m *GetNotNotifyConversationIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotNotifyConversationIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetNotNotifyConversationIDsReqMultiError(errors)
	}

	return nil
}

// GetNotNotifyConversationIDsReqMultiError is an error wrapping multiple
// validation errors returned by GetNotNotifyConversationIDsReq.ValidateAll()
// if the designated constraints aren't met.
type GetNotNotifyConversationIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotNotifyConversationIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotNotifyConversationIDsReqMultiError) AllErrors() []error { return m }

// GetNotNotifyConversationIDsReqValidationError is the validation error
// returned by GetNotNotifyConversationIDsReq.Validate if the designated
// constraints aren't met.
type GetNotNotifyConversationIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotNotifyConversationIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotNotifyConversationIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotNotifyConversationIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotNotifyConversationIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotNotifyConversationIDsReqValidationError) ErrorName() string {
	return "GetNotNotifyConversationIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotNotifyConversationIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotNotifyConversationIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotNotifyConversationIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotNotifyConversationIDsReqValidationError{}

// Validate checks the field values on GetNotNotifyConversationIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotNotifyConversationIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotNotifyConversationIDsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotNotifyConversationIDsRespMultiError, or nil if none found.
func (m *GetNotNotifyConversationIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotNotifyConversationIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNotNotifyConversationIDsRespMultiError(errors)
	}

	return nil
}

// GetNotNotifyConversationIDsRespMultiError is an error wrapping multiple
// validation errors returned by GetNotNotifyConversationIDsResp.ValidateAll()
// if the designated constraints aren't met.
type GetNotNotifyConversationIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotNotifyConversationIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotNotifyConversationIDsRespMultiError) AllErrors() []error { return m }

// GetNotNotifyConversationIDsRespValidationError is the validation error
// returned by GetNotNotifyConversationIDsResp.Validate if the designated
// constraints aren't met.
type GetNotNotifyConversationIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotNotifyConversationIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotNotifyConversationIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotNotifyConversationIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotNotifyConversationIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotNotifyConversationIDsRespValidationError) ErrorName() string {
	return "GetNotNotifyConversationIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotNotifyConversationIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotNotifyConversationIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotNotifyConversationIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotNotifyConversationIDsRespValidationError{}

// Validate checks the field values on GetPinnedConversationIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPinnedConversationIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPinnedConversationIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPinnedConversationIDsReqMultiError, or nil if none found.
func (m *GetPinnedConversationIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPinnedConversationIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetPinnedConversationIDsReqMultiError(errors)
	}

	return nil
}

// GetPinnedConversationIDsReqMultiError is an error wrapping multiple
// validation errors returned by GetPinnedConversationIDsReq.ValidateAll() if
// the designated constraints aren't met.
type GetPinnedConversationIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPinnedConversationIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPinnedConversationIDsReqMultiError) AllErrors() []error { return m }

// GetPinnedConversationIDsReqValidationError is the validation error returned
// by GetPinnedConversationIDsReq.Validate if the designated constraints
// aren't met.
type GetPinnedConversationIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPinnedConversationIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPinnedConversationIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPinnedConversationIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPinnedConversationIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPinnedConversationIDsReqValidationError) ErrorName() string {
	return "GetPinnedConversationIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPinnedConversationIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPinnedConversationIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPinnedConversationIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPinnedConversationIDsReqValidationError{}

// Validate checks the field values on GetPinnedConversationIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPinnedConversationIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPinnedConversationIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPinnedConversationIDsRespMultiError, or nil if none found.
func (m *GetPinnedConversationIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPinnedConversationIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPinnedConversationIDsRespMultiError(errors)
	}

	return nil
}

// GetPinnedConversationIDsRespMultiError is an error wrapping multiple
// validation errors returned by GetPinnedConversationIDsResp.ValidateAll() if
// the designated constraints aren't met.
type GetPinnedConversationIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPinnedConversationIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPinnedConversationIDsRespMultiError) AllErrors() []error { return m }

// GetPinnedConversationIDsRespValidationError is the validation error returned
// by GetPinnedConversationIDsResp.Validate if the designated constraints
// aren't met.
type GetPinnedConversationIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPinnedConversationIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPinnedConversationIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPinnedConversationIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPinnedConversationIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPinnedConversationIDsRespValidationError) ErrorName() string {
	return "GetPinnedConversationIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPinnedConversationIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPinnedConversationIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPinnedConversationIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPinnedConversationIDsRespValidationError{}
