// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: group/group.proto

package group

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateGroupReqMultiError,
// or nil if none found.
func (m *CreateGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupReqValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupReqValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupReqValidationError{
				field:  "GroupInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return CreateGroupReqMultiError(errors)
	}

	return nil
}

// CreateGroupReqMultiError is an error wrapping multiple validation errors
// returned by CreateGroupReq.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupReqMultiError) AllErrors() []error { return m }

// CreateGroupReqValidationError is the validation error returned by
// CreateGroupReq.Validate if the designated constraints aren't met.
type CreateGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupReqValidationError) ErrorName() string { return "CreateGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupReqValidationError{}

// Validate checks the field values on CreateGroupResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupRespMultiError, or nil if none found.
func (m *CreateGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupRespValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupRespValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupRespValidationError{
				field:  "GroupInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupRespMultiError(errors)
	}

	return nil
}

// CreateGroupRespMultiError is an error wrapping multiple validation errors
// returned by CreateGroupResp.ValidateAll() if the designated constraints
// aren't met.
type CreateGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupRespMultiError) AllErrors() []error { return m }

// CreateGroupRespValidationError is the validation error returned by
// CreateGroupResp.Validate if the designated constraints aren't met.
type CreateGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRespValidationError) ErrorName() string { return "CreateGroupRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRespValidationError{}

// Validate checks the field values on GetGroupsInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupsInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupsInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupsInfoReqMultiError, or nil if none found.
func (m *GetGroupsInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupsInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGroupsInfoReqMultiError(errors)
	}

	return nil
}

// GetGroupsInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetGroupsInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetGroupsInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupsInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupsInfoReqMultiError) AllErrors() []error { return m }

// GetGroupsInfoReqValidationError is the validation error returned by
// GetGroupsInfoReq.Validate if the designated constraints aren't met.
type GetGroupsInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsInfoReqValidationError) ErrorName() string { return "GetGroupsInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupsInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsInfoReqValidationError{}

// Validate checks the field values on GetGroupsInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupsInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupsInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupsInfoRespMultiError, or nil if none found.
func (m *GetGroupsInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupsInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupsInfoRespValidationError{
						field:  fmt.Sprintf("GroupInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupsInfoRespValidationError{
						field:  fmt.Sprintf("GroupInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupsInfoRespValidationError{
					field:  fmt.Sprintf("GroupInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupsInfoRespMultiError(errors)
	}

	return nil
}

// GetGroupsInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetGroupsInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetGroupsInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupsInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupsInfoRespMultiError) AllErrors() []error { return m }

// GetGroupsInfoRespValidationError is the validation error returned by
// GetGroupsInfoResp.Validate if the designated constraints aren't met.
type GetGroupsInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsInfoRespValidationError) ErrorName() string {
	return "GetGroupsInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupsInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsInfoRespValidationError{}

// Validate checks the field values on SetGroupInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetGroupInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupInfoReqMultiError, or nil if none found.
func (m *SetGroupInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupInfoForSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoReqValidationError{
					field:  "GroupInfoForSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoReqValidationError{
					field:  "GroupInfoForSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupInfoForSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoReqValidationError{
				field:  "GroupInfoForSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetGroupInfoReqMultiError(errors)
	}

	return nil
}

// SetGroupInfoReqMultiError is an error wrapping multiple validation errors
// returned by SetGroupInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SetGroupInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupInfoReqMultiError) AllErrors() []error { return m }

// SetGroupInfoReqValidationError is the validation error returned by
// SetGroupInfoReq.Validate if the designated constraints aren't met.
type SetGroupInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupInfoReqValidationError) ErrorName() string { return "SetGroupInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SetGroupInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupInfoReqValidationError{}

// Validate checks the field values on SetGroupInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetGroupInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupInfoRespMultiError, or nil if none found.
func (m *SetGroupInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetGroupInfoRespMultiError(errors)
	}

	return nil
}

// SetGroupInfoRespMultiError is an error wrapping multiple validation errors
// returned by SetGroupInfoResp.ValidateAll() if the designated constraints
// aren't met.
type SetGroupInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupInfoRespMultiError) AllErrors() []error { return m }

// SetGroupInfoRespValidationError is the validation error returned by
// SetGroupInfoResp.Validate if the designated constraints aren't met.
type SetGroupInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupInfoRespValidationError) ErrorName() string { return "SetGroupInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e SetGroupInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupInfoRespValidationError{}

// Validate checks the field values on SetGroupInfoExReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetGroupInfoExReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupInfoExReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupInfoExReqMultiError, or nil if none found.
func (m *SetGroupInfoExReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupInfoExReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if all {
		switch v := interface{}(m.GetGroupName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "GroupName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "GroupName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoExReqValidationError{
				field:  "GroupName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoExReqValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIntroduction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "Introduction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "Introduction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntroduction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoExReqValidationError{
				field:  "Introduction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFaceURL()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "FaceURL",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "FaceURL",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFaceURL()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoExReqValidationError{
				field:  "FaceURL",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoExReqValidationError{
				field:  "Ex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNeedVerification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "NeedVerification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "NeedVerification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNeedVerification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoExReqValidationError{
				field:  "NeedVerification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLookMemberInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "LookMemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "LookMemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLookMemberInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoExReqValidationError{
				field:  "LookMemberInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApplyMemberFriend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "ApplyMemberFriend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupInfoExReqValidationError{
					field:  "ApplyMemberFriend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplyMemberFriend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupInfoExReqValidationError{
				field:  "ApplyMemberFriend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetGroupInfoExReqMultiError(errors)
	}

	return nil
}

// SetGroupInfoExReqMultiError is an error wrapping multiple validation errors
// returned by SetGroupInfoExReq.ValidateAll() if the designated constraints
// aren't met.
type SetGroupInfoExReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupInfoExReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupInfoExReqMultiError) AllErrors() []error { return m }

// SetGroupInfoExReqValidationError is the validation error returned by
// SetGroupInfoExReq.Validate if the designated constraints aren't met.
type SetGroupInfoExReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupInfoExReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupInfoExReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupInfoExReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupInfoExReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupInfoExReqValidationError) ErrorName() string {
	return "SetGroupInfoExReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetGroupInfoExReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupInfoExReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupInfoExReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupInfoExReqValidationError{}

// Validate checks the field values on SetGroupInfoExResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGroupInfoExResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupInfoExResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupInfoExRespMultiError, or nil if none found.
func (m *SetGroupInfoExResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupInfoExResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetGroupInfoExRespMultiError(errors)
	}

	return nil
}

// SetGroupInfoExRespMultiError is an error wrapping multiple validation errors
// returned by SetGroupInfoExResp.ValidateAll() if the designated constraints
// aren't met.
type SetGroupInfoExRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupInfoExRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupInfoExRespMultiError) AllErrors() []error { return m }

// SetGroupInfoExRespValidationError is the validation error returned by
// SetGroupInfoExResp.Validate if the designated constraints aren't met.
type SetGroupInfoExRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupInfoExRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupInfoExRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupInfoExRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupInfoExRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupInfoExRespValidationError) ErrorName() string {
	return "SetGroupInfoExRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetGroupInfoExRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupInfoExResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupInfoExRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupInfoExRespValidationError{}

// Validate checks the field values on GetGroupApplicationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupApplicationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupApplicationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupApplicationListReqMultiError, or nil if none found.
func (m *GetGroupApplicationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupApplicationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupApplicationListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupApplicationListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupApplicationListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FromUserID

	if len(errors) > 0 {
		return GetGroupApplicationListReqMultiError(errors)
	}

	return nil
}

// GetGroupApplicationListReqMultiError is an error wrapping multiple
// validation errors returned by GetGroupApplicationListReq.ValidateAll() if
// the designated constraints aren't met.
type GetGroupApplicationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupApplicationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupApplicationListReqMultiError) AllErrors() []error { return m }

// GetGroupApplicationListReqValidationError is the validation error returned
// by GetGroupApplicationListReq.Validate if the designated constraints aren't met.
type GetGroupApplicationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupApplicationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupApplicationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupApplicationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupApplicationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupApplicationListReqValidationError) ErrorName() string {
	return "GetGroupApplicationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupApplicationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupApplicationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupApplicationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupApplicationListReqValidationError{}

// Validate checks the field values on GetGroupApplicationListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupApplicationListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupApplicationListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupApplicationListRespMultiError, or nil if none found.
func (m *GetGroupApplicationListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupApplicationListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetGroupRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupApplicationListRespValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupApplicationListRespValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupApplicationListRespValidationError{
					field:  fmt.Sprintf("GroupRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupApplicationListRespMultiError(errors)
	}

	return nil
}

// GetGroupApplicationListRespMultiError is an error wrapping multiple
// validation errors returned by GetGroupApplicationListResp.ValidateAll() if
// the designated constraints aren't met.
type GetGroupApplicationListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupApplicationListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupApplicationListRespMultiError) AllErrors() []error { return m }

// GetGroupApplicationListRespValidationError is the validation error returned
// by GetGroupApplicationListResp.Validate if the designated constraints
// aren't met.
type GetGroupApplicationListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupApplicationListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupApplicationListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupApplicationListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupApplicationListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupApplicationListRespValidationError) ErrorName() string {
	return "GetGroupApplicationListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupApplicationListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupApplicationListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupApplicationListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupApplicationListRespValidationError{}

// Validate checks the field values on GetUserReqApplicationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserReqApplicationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReqApplicationListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserReqApplicationListReqMultiError, or nil if none found.
func (m *GetUserReqApplicationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReqApplicationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserReqApplicationListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserReqApplicationListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserReqApplicationListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserReqApplicationListReqMultiError(errors)
	}

	return nil
}

// GetUserReqApplicationListReqMultiError is an error wrapping multiple
// validation errors returned by GetUserReqApplicationListReq.ValidateAll() if
// the designated constraints aren't met.
type GetUserReqApplicationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqApplicationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqApplicationListReqMultiError) AllErrors() []error { return m }

// GetUserReqApplicationListReqValidationError is the validation error returned
// by GetUserReqApplicationListReq.Validate if the designated constraints
// aren't met.
type GetUserReqApplicationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqApplicationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqApplicationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqApplicationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqApplicationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqApplicationListReqValidationError) ErrorName() string {
	return "GetUserReqApplicationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReqApplicationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReqApplicationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqApplicationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqApplicationListReqValidationError{}

// Validate checks the field values on GetUserReqApplicationListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserReqApplicationListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReqApplicationListResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserReqApplicationListRespMultiError, or nil if none found.
func (m *GetUserReqApplicationListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReqApplicationListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetGroupRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserReqApplicationListRespValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserReqApplicationListRespValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserReqApplicationListRespValidationError{
					field:  fmt.Sprintf("GroupRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserReqApplicationListRespMultiError(errors)
	}

	return nil
}

// GetUserReqApplicationListRespMultiError is an error wrapping multiple
// validation errors returned by GetUserReqApplicationListResp.ValidateAll()
// if the designated constraints aren't met.
type GetUserReqApplicationListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqApplicationListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqApplicationListRespMultiError) AllErrors() []error { return m }

// GetUserReqApplicationListRespValidationError is the validation error
// returned by GetUserReqApplicationListResp.Validate if the designated
// constraints aren't met.
type GetUserReqApplicationListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqApplicationListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqApplicationListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqApplicationListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqApplicationListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqApplicationListRespValidationError) ErrorName() string {
	return "GetUserReqApplicationListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReqApplicationListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReqApplicationListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqApplicationListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqApplicationListRespValidationError{}

// Validate checks the field values on GetSpecifiedUserGroupRequestInfoReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSpecifiedUserGroupRequestInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecifiedUserGroupRequestInfoReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSpecifiedUserGroupRequestInfoReqMultiError, or nil if none found.
func (m *GetSpecifiedUserGroupRequestInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecifiedUserGroupRequestInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetSpecifiedUserGroupRequestInfoReqMultiError(errors)
	}

	return nil
}

// GetSpecifiedUserGroupRequestInfoReqMultiError is an error wrapping multiple
// validation errors returned by
// GetSpecifiedUserGroupRequestInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetSpecifiedUserGroupRequestInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecifiedUserGroupRequestInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecifiedUserGroupRequestInfoReqMultiError) AllErrors() []error { return m }

// GetSpecifiedUserGroupRequestInfoReqValidationError is the validation error
// returned by GetSpecifiedUserGroupRequestInfoReq.Validate if the designated
// constraints aren't met.
type GetSpecifiedUserGroupRequestInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecifiedUserGroupRequestInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecifiedUserGroupRequestInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecifiedUserGroupRequestInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecifiedUserGroupRequestInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecifiedUserGroupRequestInfoReqValidationError) ErrorName() string {
	return "GetSpecifiedUserGroupRequestInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecifiedUserGroupRequestInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecifiedUserGroupRequestInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecifiedUserGroupRequestInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecifiedUserGroupRequestInfoReqValidationError{}

// Validate checks the field values on GetSpecifiedUserGroupRequestInfoResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSpecifiedUserGroupRequestInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecifiedUserGroupRequestInfoResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSpecifiedUserGroupRequestInfoRespMultiError, or nil if none found.
func (m *GetSpecifiedUserGroupRequestInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecifiedUserGroupRequestInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetGroupRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSpecifiedUserGroupRequestInfoRespValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSpecifiedUserGroupRequestInfoRespValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSpecifiedUserGroupRequestInfoRespValidationError{
					field:  fmt.Sprintf("GroupRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSpecifiedUserGroupRequestInfoRespMultiError(errors)
	}

	return nil
}

// GetSpecifiedUserGroupRequestInfoRespMultiError is an error wrapping multiple
// validation errors returned by
// GetSpecifiedUserGroupRequestInfoResp.ValidateAll() if the designated
// constraints aren't met.
type GetSpecifiedUserGroupRequestInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecifiedUserGroupRequestInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecifiedUserGroupRequestInfoRespMultiError) AllErrors() []error { return m }

// GetSpecifiedUserGroupRequestInfoRespValidationError is the validation error
// returned by GetSpecifiedUserGroupRequestInfoResp.Validate if the designated
// constraints aren't met.
type GetSpecifiedUserGroupRequestInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecifiedUserGroupRequestInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecifiedUserGroupRequestInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecifiedUserGroupRequestInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecifiedUserGroupRequestInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecifiedUserGroupRequestInfoRespValidationError) ErrorName() string {
	return "GetSpecifiedUserGroupRequestInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecifiedUserGroupRequestInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecifiedUserGroupRequestInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecifiedUserGroupRequestInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecifiedUserGroupRequestInfoRespValidationError{}

// Validate checks the field values on TransferGroupOwnerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferGroupOwnerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferGroupOwnerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferGroupOwnerReqMultiError, or nil if none found.
func (m *TransferGroupOwnerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferGroupOwnerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for OldOwnerUserID

	// no validation rules for NewOwnerUserID

	if len(errors) > 0 {
		return TransferGroupOwnerReqMultiError(errors)
	}

	return nil
}

// TransferGroupOwnerReqMultiError is an error wrapping multiple validation
// errors returned by TransferGroupOwnerReq.ValidateAll() if the designated
// constraints aren't met.
type TransferGroupOwnerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferGroupOwnerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferGroupOwnerReqMultiError) AllErrors() []error { return m }

// TransferGroupOwnerReqValidationError is the validation error returned by
// TransferGroupOwnerReq.Validate if the designated constraints aren't met.
type TransferGroupOwnerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferGroupOwnerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferGroupOwnerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferGroupOwnerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferGroupOwnerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferGroupOwnerReqValidationError) ErrorName() string {
	return "TransferGroupOwnerReqValidationError"
}

// Error satisfies the builtin error interface
func (e TransferGroupOwnerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferGroupOwnerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferGroupOwnerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferGroupOwnerReqValidationError{}

// Validate checks the field values on TransferGroupOwnerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferGroupOwnerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferGroupOwnerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferGroupOwnerRespMultiError, or nil if none found.
func (m *TransferGroupOwnerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferGroupOwnerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransferGroupOwnerRespMultiError(errors)
	}

	return nil
}

// TransferGroupOwnerRespMultiError is an error wrapping multiple validation
// errors returned by TransferGroupOwnerResp.ValidateAll() if the designated
// constraints aren't met.
type TransferGroupOwnerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferGroupOwnerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferGroupOwnerRespMultiError) AllErrors() []error { return m }

// TransferGroupOwnerRespValidationError is the validation error returned by
// TransferGroupOwnerResp.Validate if the designated constraints aren't met.
type TransferGroupOwnerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferGroupOwnerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferGroupOwnerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferGroupOwnerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferGroupOwnerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferGroupOwnerRespValidationError) ErrorName() string {
	return "TransferGroupOwnerRespValidationError"
}

// Error satisfies the builtin error interface
func (e TransferGroupOwnerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferGroupOwnerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferGroupOwnerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferGroupOwnerRespValidationError{}

// Validate checks the field values on JoinGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinGroupReqMultiError, or
// nil if none found.
func (m *JoinGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for ReqMessage

	// no validation rules for JoinSource

	// no validation rules for InviterUserID

	// no validation rules for Ex

	if len(errors) > 0 {
		return JoinGroupReqMultiError(errors)
	}

	return nil
}

// JoinGroupReqMultiError is an error wrapping multiple validation errors
// returned by JoinGroupReq.ValidateAll() if the designated constraints aren't met.
type JoinGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinGroupReqMultiError) AllErrors() []error { return m }

// JoinGroupReqValidationError is the validation error returned by
// JoinGroupReq.Validate if the designated constraints aren't met.
type JoinGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGroupReqValidationError) ErrorName() string { return "JoinGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e JoinGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGroupReqValidationError{}

// Validate checks the field values on JoinGroupResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinGroupResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinGroupRespMultiError, or
// nil if none found.
func (m *JoinGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JoinGroupRespMultiError(errors)
	}

	return nil
}

// JoinGroupRespMultiError is an error wrapping multiple validation errors
// returned by JoinGroupResp.ValidateAll() if the designated constraints
// aren't met.
type JoinGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinGroupRespMultiError) AllErrors() []error { return m }

// JoinGroupRespValidationError is the validation error returned by
// JoinGroupResp.Validate if the designated constraints aren't met.
type JoinGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGroupRespValidationError) ErrorName() string { return "JoinGroupRespValidationError" }

// Error satisfies the builtin error interface
func (e JoinGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGroupRespValidationError{}

// Validate checks the field values on GroupApplicationResponseReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupApplicationResponseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupApplicationResponseReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupApplicationResponseReqMultiError, or nil if none found.
func (m *GroupApplicationResponseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupApplicationResponseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for FromUserID

	// no validation rules for HandledMsg

	// no validation rules for HandleResult

	if len(errors) > 0 {
		return GroupApplicationResponseReqMultiError(errors)
	}

	return nil
}

// GroupApplicationResponseReqMultiError is an error wrapping multiple
// validation errors returned by GroupApplicationResponseReq.ValidateAll() if
// the designated constraints aren't met.
type GroupApplicationResponseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupApplicationResponseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupApplicationResponseReqMultiError) AllErrors() []error { return m }

// GroupApplicationResponseReqValidationError is the validation error returned
// by GroupApplicationResponseReq.Validate if the designated constraints
// aren't met.
type GroupApplicationResponseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupApplicationResponseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupApplicationResponseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupApplicationResponseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupApplicationResponseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupApplicationResponseReqValidationError) ErrorName() string {
	return "GroupApplicationResponseReqValidationError"
}

// Error satisfies the builtin error interface
func (e GroupApplicationResponseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupApplicationResponseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupApplicationResponseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupApplicationResponseReqValidationError{}

// Validate checks the field values on GroupApplicationResponseResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupApplicationResponseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupApplicationResponseResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupApplicationResponseRespMultiError, or nil if none found.
func (m *GroupApplicationResponseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupApplicationResponseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GroupApplicationResponseRespMultiError(errors)
	}

	return nil
}

// GroupApplicationResponseRespMultiError is an error wrapping multiple
// validation errors returned by GroupApplicationResponseResp.ValidateAll() if
// the designated constraints aren't met.
type GroupApplicationResponseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupApplicationResponseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupApplicationResponseRespMultiError) AllErrors() []error { return m }

// GroupApplicationResponseRespValidationError is the validation error returned
// by GroupApplicationResponseResp.Validate if the designated constraints
// aren't met.
type GroupApplicationResponseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupApplicationResponseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupApplicationResponseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupApplicationResponseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupApplicationResponseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupApplicationResponseRespValidationError) ErrorName() string {
	return "GroupApplicationResponseRespValidationError"
}

// Error satisfies the builtin error interface
func (e GroupApplicationResponseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupApplicationResponseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupApplicationResponseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupApplicationResponseRespValidationError{}

// Validate checks the field values on QuitGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuitGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuitGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuitGroupReqMultiError, or
// nil if none found.
func (m *QuitGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QuitGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if len(errors) > 0 {
		return QuitGroupReqMultiError(errors)
	}

	return nil
}

// QuitGroupReqMultiError is an error wrapping multiple validation errors
// returned by QuitGroupReq.ValidateAll() if the designated constraints aren't met.
type QuitGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuitGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuitGroupReqMultiError) AllErrors() []error { return m }

// QuitGroupReqValidationError is the validation error returned by
// QuitGroupReq.Validate if the designated constraints aren't met.
type QuitGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuitGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuitGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuitGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuitGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuitGroupReqValidationError) ErrorName() string { return "QuitGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e QuitGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuitGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuitGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuitGroupReqValidationError{}

// Validate checks the field values on QuitGroupResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuitGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuitGroupResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuitGroupRespMultiError, or
// nil if none found.
func (m *QuitGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QuitGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuitGroupRespMultiError(errors)
	}

	return nil
}

// QuitGroupRespMultiError is an error wrapping multiple validation errors
// returned by QuitGroupResp.ValidateAll() if the designated constraints
// aren't met.
type QuitGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuitGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuitGroupRespMultiError) AllErrors() []error { return m }

// QuitGroupRespValidationError is the validation error returned by
// QuitGroupResp.Validate if the designated constraints aren't met.
type QuitGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuitGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuitGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuitGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuitGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuitGroupRespValidationError) ErrorName() string { return "QuitGroupRespValidationError" }

// Error satisfies the builtin error interface
func (e QuitGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuitGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuitGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuitGroupRespValidationError{}

// Validate checks the field values on GetGroupMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberListReqMultiError, or nil if none found.
func (m *GetGroupMemberListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupID

	// no validation rules for Filter

	// no validation rules for Keyword

	if len(errors) > 0 {
		return GetGroupMemberListReqMultiError(errors)
	}

	return nil
}

// GetGroupMemberListReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberListReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListReqMultiError) AllErrors() []error { return m }

// GetGroupMemberListReqValidationError is the validation error returned by
// GetGroupMemberListReq.Validate if the designated constraints aren't met.
type GetGroupMemberListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListReqValidationError) ErrorName() string {
	return "GetGroupMemberListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListReqValidationError{}

// Validate checks the field values on GetGroupMemberListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberListRespMultiError, or nil if none found.
func (m *GetGroupMemberListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupMemberListRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupMemberListRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupMemberListRespValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupMemberListRespMultiError(errors)
	}

	return nil
}

// GetGroupMemberListRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberListResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberListRespMultiError) AllErrors() []error { return m }

// GetGroupMemberListRespValidationError is the validation error returned by
// GetGroupMemberListResp.Validate if the designated constraints aren't met.
type GetGroupMemberListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberListRespValidationError) ErrorName() string {
	return "GetGroupMemberListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberListRespValidationError{}

// Validate checks the field values on GetGroupMembersInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMembersInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMembersInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMembersInfoReqMultiError, or nil if none found.
func (m *GetGroupMembersInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMembersInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupMembersInfoReqMultiError(errors)
	}

	return nil
}

// GetGroupMembersInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupMembersInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMembersInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMembersInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMembersInfoReqMultiError) AllErrors() []error { return m }

// GetGroupMembersInfoReqValidationError is the validation error returned by
// GetGroupMembersInfoReq.Validate if the designated constraints aren't met.
type GetGroupMembersInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMembersInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMembersInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMembersInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMembersInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMembersInfoReqValidationError) ErrorName() string {
	return "GetGroupMembersInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMembersInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMembersInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMembersInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMembersInfoReqValidationError{}

// Validate checks the field values on GetGroupMembersInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMembersInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMembersInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMembersInfoRespMultiError, or nil if none found.
func (m *GetGroupMembersInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMembersInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupMembersInfoRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupMembersInfoRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupMembersInfoRespValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupMembersInfoRespMultiError(errors)
	}

	return nil
}

// GetGroupMembersInfoRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupMembersInfoResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMembersInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMembersInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMembersInfoRespMultiError) AllErrors() []error { return m }

// GetGroupMembersInfoRespValidationError is the validation error returned by
// GetGroupMembersInfoResp.Validate if the designated constraints aren't met.
type GetGroupMembersInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMembersInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMembersInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMembersInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMembersInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMembersInfoRespValidationError) ErrorName() string {
	return "GetGroupMembersInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMembersInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMembersInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMembersInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMembersInfoRespValidationError{}

// Validate checks the field values on KickGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickGroupMemberReqMultiError, or nil if none found.
func (m *KickGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *KickGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for Reason

	if len(errors) > 0 {
		return KickGroupMemberReqMultiError(errors)
	}

	return nil
}

// KickGroupMemberReqMultiError is an error wrapping multiple validation errors
// returned by KickGroupMemberReq.ValidateAll() if the designated constraints
// aren't met.
type KickGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickGroupMemberReqMultiError) AllErrors() []error { return m }

// KickGroupMemberReqValidationError is the validation error returned by
// KickGroupMemberReq.Validate if the designated constraints aren't met.
type KickGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickGroupMemberReqValidationError) ErrorName() string {
	return "KickGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e KickGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickGroupMemberReqValidationError{}

// Validate checks the field values on KickGroupMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickGroupMemberResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickGroupMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickGroupMemberRespMultiError, or nil if none found.
func (m *KickGroupMemberResp) ValidateAll() error {
	return m.validate(true)
}

func (m *KickGroupMemberResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return KickGroupMemberRespMultiError(errors)
	}

	return nil
}

// KickGroupMemberRespMultiError is an error wrapping multiple validation
// errors returned by KickGroupMemberResp.ValidateAll() if the designated
// constraints aren't met.
type KickGroupMemberRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickGroupMemberRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickGroupMemberRespMultiError) AllErrors() []error { return m }

// KickGroupMemberRespValidationError is the validation error returned by
// KickGroupMemberResp.Validate if the designated constraints aren't met.
type KickGroupMemberRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickGroupMemberRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickGroupMemberRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickGroupMemberRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickGroupMemberRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickGroupMemberRespValidationError) ErrorName() string {
	return "KickGroupMemberRespValidationError"
}

// Error satisfies the builtin error interface
func (e KickGroupMemberRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickGroupMemberResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickGroupMemberRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickGroupMemberRespValidationError{}

// Validate checks the field values on GetJoinedGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJoinedGroupListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJoinedGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJoinedGroupListReqMultiError, or nil if none found.
func (m *GetJoinedGroupListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJoinedGroupListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetJoinedGroupListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetJoinedGroupListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetJoinedGroupListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FromUserID

	if len(errors) > 0 {
		return GetJoinedGroupListReqMultiError(errors)
	}

	return nil
}

// GetJoinedGroupListReqMultiError is an error wrapping multiple validation
// errors returned by GetJoinedGroupListReq.ValidateAll() if the designated
// constraints aren't met.
type GetJoinedGroupListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJoinedGroupListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJoinedGroupListReqMultiError) AllErrors() []error { return m }

// GetJoinedGroupListReqValidationError is the validation error returned by
// GetJoinedGroupListReq.Validate if the designated constraints aren't met.
type GetJoinedGroupListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJoinedGroupListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJoinedGroupListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJoinedGroupListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJoinedGroupListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJoinedGroupListReqValidationError) ErrorName() string {
	return "GetJoinedGroupListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetJoinedGroupListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJoinedGroupListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJoinedGroupListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJoinedGroupListReqValidationError{}

// Validate checks the field values on GetJoinedGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJoinedGroupListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJoinedGroupListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJoinedGroupListRespMultiError, or nil if none found.
func (m *GetJoinedGroupListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJoinedGroupListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJoinedGroupListRespValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJoinedGroupListRespValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJoinedGroupListRespValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJoinedGroupListRespMultiError(errors)
	}

	return nil
}

// GetJoinedGroupListRespMultiError is an error wrapping multiple validation
// errors returned by GetJoinedGroupListResp.ValidateAll() if the designated
// constraints aren't met.
type GetJoinedGroupListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJoinedGroupListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJoinedGroupListRespMultiError) AllErrors() []error { return m }

// GetJoinedGroupListRespValidationError is the validation error returned by
// GetJoinedGroupListResp.Validate if the designated constraints aren't met.
type GetJoinedGroupListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJoinedGroupListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJoinedGroupListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJoinedGroupListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJoinedGroupListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJoinedGroupListRespValidationError) ErrorName() string {
	return "GetJoinedGroupListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetJoinedGroupListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJoinedGroupListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJoinedGroupListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJoinedGroupListRespValidationError{}

// Validate checks the field values on InviteUserToGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteUserToGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUserToGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteUserToGroupReqMultiError, or nil if none found.
func (m *InviteUserToGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUserToGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for Reason

	if len(errors) > 0 {
		return InviteUserToGroupReqMultiError(errors)
	}

	return nil
}

// InviteUserToGroupReqMultiError is an error wrapping multiple validation
// errors returned by InviteUserToGroupReq.ValidateAll() if the designated
// constraints aren't met.
type InviteUserToGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUserToGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUserToGroupReqMultiError) AllErrors() []error { return m }

// InviteUserToGroupReqValidationError is the validation error returned by
// InviteUserToGroupReq.Validate if the designated constraints aren't met.
type InviteUserToGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserToGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserToGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserToGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserToGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserToGroupReqValidationError) ErrorName() string {
	return "InviteUserToGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUserToGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserToGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserToGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserToGroupReqValidationError{}

// Validate checks the field values on InviteUserToGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteUserToGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUserToGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteUserToGroupRespMultiError, or nil if none found.
func (m *InviteUserToGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUserToGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InviteUserToGroupRespMultiError(errors)
	}

	return nil
}

// InviteUserToGroupRespMultiError is an error wrapping multiple validation
// errors returned by InviteUserToGroupResp.ValidateAll() if the designated
// constraints aren't met.
type InviteUserToGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUserToGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUserToGroupRespMultiError) AllErrors() []error { return m }

// InviteUserToGroupRespValidationError is the validation error returned by
// InviteUserToGroupResp.Validate if the designated constraints aren't met.
type InviteUserToGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserToGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserToGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserToGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserToGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserToGroupRespValidationError) ErrorName() string {
	return "InviteUserToGroupRespValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUserToGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserToGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserToGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserToGroupRespValidationError{}

// Validate checks the field values on GetGroupAllMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAllMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAllMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAllMemberReqMultiError, or nil if none found.
func (m *GetGroupAllMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAllMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupAllMemberReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupAllMemberReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupAllMemberReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupAllMemberReqMultiError(errors)
	}

	return nil
}

// GetGroupAllMemberReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupAllMemberReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupAllMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAllMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAllMemberReqMultiError) AllErrors() []error { return m }

// GetGroupAllMemberReqValidationError is the validation error returned by
// GetGroupAllMemberReq.Validate if the designated constraints aren't met.
type GetGroupAllMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAllMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAllMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAllMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAllMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAllMemberReqValidationError) ErrorName() string {
	return "GetGroupAllMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAllMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAllMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAllMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAllMemberReqValidationError{}

// Validate checks the field values on GetGroupAllMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAllMemberResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAllMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAllMemberRespMultiError, or nil if none found.
func (m *GetGroupAllMemberResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAllMemberResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupAllMemberRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupAllMemberRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupAllMemberRespValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupAllMemberRespMultiError(errors)
	}

	return nil
}

// GetGroupAllMemberRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupAllMemberResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupAllMemberRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAllMemberRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAllMemberRespMultiError) AllErrors() []error { return m }

// GetGroupAllMemberRespValidationError is the validation error returned by
// GetGroupAllMemberResp.Validate if the designated constraints aren't met.
type GetGroupAllMemberRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAllMemberRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAllMemberRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAllMemberRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAllMemberRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAllMemberRespValidationError) ErrorName() string {
	return "GetGroupAllMemberRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAllMemberRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAllMemberResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAllMemberRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAllMemberRespValidationError{}

// Validate checks the field values on CMSGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CMSGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMSGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CMSGroupMultiError, or nil
// if none found.
func (m *CMSGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *CMSGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CMSGroupValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CMSGroupValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CMSGroupValidationError{
				field:  "GroupInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupOwnerUserName

	// no validation rules for GroupOwnerUserID

	if len(errors) > 0 {
		return CMSGroupMultiError(errors)
	}

	return nil
}

// CMSGroupMultiError is an error wrapping multiple validation errors returned
// by CMSGroup.ValidateAll() if the designated constraints aren't met.
type CMSGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMSGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMSGroupMultiError) AllErrors() []error { return m }

// CMSGroupValidationError is the validation error returned by
// CMSGroup.Validate if the designated constraints aren't met.
type CMSGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMSGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMSGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMSGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMSGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMSGroupValidationError) ErrorName() string { return "CMSGroupValidationError" }

// Error satisfies the builtin error interface
func (e CMSGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMSGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMSGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMSGroupValidationError{}

// Validate checks the field values on GetGroupsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGroupsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGroupsReqMultiError, or
// nil if none found.
func (m *GetGroupsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupsReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupsReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupsReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupName

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupsReqMultiError(errors)
	}

	return nil
}

// GetGroupsReqMultiError is an error wrapping multiple validation errors
// returned by GetGroupsReq.ValidateAll() if the designated constraints aren't met.
type GetGroupsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupsReqMultiError) AllErrors() []error { return m }

// GetGroupsReqValidationError is the validation error returned by
// GetGroupsReq.Validate if the designated constraints aren't met.
type GetGroupsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsReqValidationError) ErrorName() string { return "GetGroupsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsReqValidationError{}

// Validate checks the field values on GetGroupsResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGroupsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGroupsRespMultiError, or
// nil if none found.
func (m *GetGroupsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupsRespValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupsRespValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupsRespValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupsRespMultiError(errors)
	}

	return nil
}

// GetGroupsRespMultiError is an error wrapping multiple validation errors
// returned by GetGroupsResp.ValidateAll() if the designated constraints
// aren't met.
type GetGroupsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupsRespMultiError) AllErrors() []error { return m }

// GetGroupsRespValidationError is the validation error returned by
// GetGroupsResp.Validate if the designated constraints aren't met.
type GetGroupsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsRespValidationError) ErrorName() string { return "GetGroupsRespValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsRespValidationError{}

// Validate checks the field values on GetGroupMemberReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberReqMultiError, or nil if none found.
func (m *GetGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupMemberReqMultiError(errors)
	}

	return nil
}

// GetGroupMemberReqMultiError is an error wrapping multiple validation errors
// returned by GetGroupMemberReq.ValidateAll() if the designated constraints
// aren't met.
type GetGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberReqMultiError) AllErrors() []error { return m }

// GetGroupMemberReqValidationError is the validation error returned by
// GetGroupMemberReq.Validate if the designated constraints aren't met.
type GetGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberReqValidationError) ErrorName() string {
	return "GetGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberReqValidationError{}

// Validate checks the field values on GetGroupMembersCMSReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMembersCMSReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMembersCMSReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMembersCMSReqMultiError, or nil if none found.
func (m *GetGroupMembersCMSReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMembersCMSReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMembersCMSReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMembersCMSReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMembersCMSReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GroupID

	// no validation rules for UserName

	if len(errors) > 0 {
		return GetGroupMembersCMSReqMultiError(errors)
	}

	return nil
}

// GetGroupMembersCMSReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupMembersCMSReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMembersCMSReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMembersCMSReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMembersCMSReqMultiError) AllErrors() []error { return m }

// GetGroupMembersCMSReqValidationError is the validation error returned by
// GetGroupMembersCMSReq.Validate if the designated constraints aren't met.
type GetGroupMembersCMSReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMembersCMSReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMembersCMSReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMembersCMSReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMembersCMSReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMembersCMSReqValidationError) ErrorName() string {
	return "GetGroupMembersCMSReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMembersCMSReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMembersCMSReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMembersCMSReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMembersCMSReqValidationError{}

// Validate checks the field values on GetGroupMembersCMSResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMembersCMSResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMembersCMSResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMembersCMSRespMultiError, or nil if none found.
func (m *GetGroupMembersCMSResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMembersCMSResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupMembersCMSRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupMembersCMSRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupMembersCMSRespValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupMembersCMSRespMultiError(errors)
	}

	return nil
}

// GetGroupMembersCMSRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupMembersCMSResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMembersCMSRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMembersCMSRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMembersCMSRespMultiError) AllErrors() []error { return m }

// GetGroupMembersCMSRespValidationError is the validation error returned by
// GetGroupMembersCMSResp.Validate if the designated constraints aren't met.
type GetGroupMembersCMSRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMembersCMSRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMembersCMSRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMembersCMSRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMembersCMSRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMembersCMSRespValidationError) ErrorName() string {
	return "GetGroupMembersCMSRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMembersCMSRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMembersCMSResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMembersCMSRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMembersCMSRespValidationError{}

// Validate checks the field values on DismissGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DismissGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DismissGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DismissGroupReqMultiError, or nil if none found.
func (m *DismissGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DismissGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for DeleteMember

	if len(errors) > 0 {
		return DismissGroupReqMultiError(errors)
	}

	return nil
}

// DismissGroupReqMultiError is an error wrapping multiple validation errors
// returned by DismissGroupReq.ValidateAll() if the designated constraints
// aren't met.
type DismissGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DismissGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DismissGroupReqMultiError) AllErrors() []error { return m }

// DismissGroupReqValidationError is the validation error returned by
// DismissGroupReq.Validate if the designated constraints aren't met.
type DismissGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DismissGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DismissGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DismissGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DismissGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DismissGroupReqValidationError) ErrorName() string { return "DismissGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e DismissGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDismissGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DismissGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DismissGroupReqValidationError{}

// Validate checks the field values on DismissGroupResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DismissGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DismissGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DismissGroupRespMultiError, or nil if none found.
func (m *DismissGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DismissGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DismissGroupRespMultiError(errors)
	}

	return nil
}

// DismissGroupRespMultiError is an error wrapping multiple validation errors
// returned by DismissGroupResp.ValidateAll() if the designated constraints
// aren't met.
type DismissGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DismissGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DismissGroupRespMultiError) AllErrors() []error { return m }

// DismissGroupRespValidationError is the validation error returned by
// DismissGroupResp.Validate if the designated constraints aren't met.
type DismissGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DismissGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DismissGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DismissGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DismissGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DismissGroupRespValidationError) ErrorName() string { return "DismissGroupRespValidationError" }

// Error satisfies the builtin error interface
func (e DismissGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDismissGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DismissGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DismissGroupRespValidationError{}

// Validate checks the field values on MuteGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteGroupMemberReqMultiError, or nil if none found.
func (m *MuteGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	// no validation rules for MutedSeconds

	if len(errors) > 0 {
		return MuteGroupMemberReqMultiError(errors)
	}

	return nil
}

// MuteGroupMemberReqMultiError is an error wrapping multiple validation errors
// returned by MuteGroupMemberReq.ValidateAll() if the designated constraints
// aren't met.
type MuteGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteGroupMemberReqMultiError) AllErrors() []error { return m }

// MuteGroupMemberReqValidationError is the validation error returned by
// MuteGroupMemberReq.Validate if the designated constraints aren't met.
type MuteGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteGroupMemberReqValidationError) ErrorName() string {
	return "MuteGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e MuteGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteGroupMemberReqValidationError{}

// Validate checks the field values on MuteGroupMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteGroupMemberResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteGroupMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteGroupMemberRespMultiError, or nil if none found.
func (m *MuteGroupMemberResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteGroupMemberResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MuteGroupMemberRespMultiError(errors)
	}

	return nil
}

// MuteGroupMemberRespMultiError is an error wrapping multiple validation
// errors returned by MuteGroupMemberResp.ValidateAll() if the designated
// constraints aren't met.
type MuteGroupMemberRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteGroupMemberRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteGroupMemberRespMultiError) AllErrors() []error { return m }

// MuteGroupMemberRespValidationError is the validation error returned by
// MuteGroupMemberResp.Validate if the designated constraints aren't met.
type MuteGroupMemberRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteGroupMemberRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteGroupMemberRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteGroupMemberRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteGroupMemberRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteGroupMemberRespValidationError) ErrorName() string {
	return "MuteGroupMemberRespValidationError"
}

// Error satisfies the builtin error interface
func (e MuteGroupMemberRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteGroupMemberResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteGroupMemberRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteGroupMemberRespValidationError{}

// Validate checks the field values on CancelMuteGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelMuteGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMuteGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMuteGroupMemberReqMultiError, or nil if none found.
func (m *CancelMuteGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMuteGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if len(errors) > 0 {
		return CancelMuteGroupMemberReqMultiError(errors)
	}

	return nil
}

// CancelMuteGroupMemberReqMultiError is an error wrapping multiple validation
// errors returned by CancelMuteGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type CancelMuteGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMuteGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMuteGroupMemberReqMultiError) AllErrors() []error { return m }

// CancelMuteGroupMemberReqValidationError is the validation error returned by
// CancelMuteGroupMemberReq.Validate if the designated constraints aren't met.
type CancelMuteGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMuteGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMuteGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMuteGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMuteGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMuteGroupMemberReqValidationError) ErrorName() string {
	return "CancelMuteGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMuteGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMuteGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMuteGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMuteGroupMemberReqValidationError{}

// Validate checks the field values on CancelMuteGroupMemberResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelMuteGroupMemberResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMuteGroupMemberResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMuteGroupMemberRespMultiError, or nil if none found.
func (m *CancelMuteGroupMemberResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMuteGroupMemberResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelMuteGroupMemberRespMultiError(errors)
	}

	return nil
}

// CancelMuteGroupMemberRespMultiError is an error wrapping multiple validation
// errors returned by CancelMuteGroupMemberResp.ValidateAll() if the
// designated constraints aren't met.
type CancelMuteGroupMemberRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMuteGroupMemberRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMuteGroupMemberRespMultiError) AllErrors() []error { return m }

// CancelMuteGroupMemberRespValidationError is the validation error returned by
// CancelMuteGroupMemberResp.Validate if the designated constraints aren't met.
type CancelMuteGroupMemberRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMuteGroupMemberRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMuteGroupMemberRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMuteGroupMemberRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMuteGroupMemberRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMuteGroupMemberRespValidationError) ErrorName() string {
	return "CancelMuteGroupMemberRespValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMuteGroupMemberRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMuteGroupMemberResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMuteGroupMemberRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMuteGroupMemberRespValidationError{}

// Validate checks the field values on MuteGroupReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MuteGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteGroupReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MuteGroupReqMultiError, or
// nil if none found.
func (m *MuteGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return MuteGroupReqMultiError(errors)
	}

	return nil
}

// MuteGroupReqMultiError is an error wrapping multiple validation errors
// returned by MuteGroupReq.ValidateAll() if the designated constraints aren't met.
type MuteGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteGroupReqMultiError) AllErrors() []error { return m }

// MuteGroupReqValidationError is the validation error returned by
// MuteGroupReq.Validate if the designated constraints aren't met.
type MuteGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteGroupReqValidationError) ErrorName() string { return "MuteGroupReqValidationError" }

// Error satisfies the builtin error interface
func (e MuteGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteGroupReqValidationError{}

// Validate checks the field values on MuteGroupResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MuteGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteGroupResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MuteGroupRespMultiError, or
// nil if none found.
func (m *MuteGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MuteGroupRespMultiError(errors)
	}

	return nil
}

// MuteGroupRespMultiError is an error wrapping multiple validation errors
// returned by MuteGroupResp.ValidateAll() if the designated constraints
// aren't met.
type MuteGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteGroupRespMultiError) AllErrors() []error { return m }

// MuteGroupRespValidationError is the validation error returned by
// MuteGroupResp.Validate if the designated constraints aren't met.
type MuteGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteGroupRespValidationError) ErrorName() string { return "MuteGroupRespValidationError" }

// Error satisfies the builtin error interface
func (e MuteGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteGroupRespValidationError{}

// Validate checks the field values on CancelMuteGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelMuteGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMuteGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMuteGroupReqMultiError, or nil if none found.
func (m *CancelMuteGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMuteGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return CancelMuteGroupReqMultiError(errors)
	}

	return nil
}

// CancelMuteGroupReqMultiError is an error wrapping multiple validation errors
// returned by CancelMuteGroupReq.ValidateAll() if the designated constraints
// aren't met.
type CancelMuteGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMuteGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMuteGroupReqMultiError) AllErrors() []error { return m }

// CancelMuteGroupReqValidationError is the validation error returned by
// CancelMuteGroupReq.Validate if the designated constraints aren't met.
type CancelMuteGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMuteGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMuteGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMuteGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMuteGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMuteGroupReqValidationError) ErrorName() string {
	return "CancelMuteGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMuteGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMuteGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMuteGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMuteGroupReqValidationError{}

// Validate checks the field values on CancelMuteGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelMuteGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMuteGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMuteGroupRespMultiError, or nil if none found.
func (m *CancelMuteGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMuteGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelMuteGroupRespMultiError(errors)
	}

	return nil
}

// CancelMuteGroupRespMultiError is an error wrapping multiple validation
// errors returned by CancelMuteGroupResp.ValidateAll() if the designated
// constraints aren't met.
type CancelMuteGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMuteGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMuteGroupRespMultiError) AllErrors() []error { return m }

// CancelMuteGroupRespValidationError is the validation error returned by
// CancelMuteGroupResp.Validate if the designated constraints aren't met.
type CancelMuteGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMuteGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMuteGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMuteGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMuteGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMuteGroupRespValidationError) ErrorName() string {
	return "CancelMuteGroupRespValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMuteGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMuteGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMuteGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMuteGroupRespValidationError{}

// Validate checks the field values on SetGroupMemberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGroupMemberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupMemberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupMemberInfoMultiError, or nil if none found.
func (m *SetGroupMemberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupMemberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetNickname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupMemberInfoValidationError{
					field:  "Nickname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupMemberInfoValidationError{
					field:  "Nickname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNickname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupMemberInfoValidationError{
				field:  "Nickname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFaceURL()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupMemberInfoValidationError{
					field:  "FaceURL",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupMemberInfoValidationError{
					field:  "FaceURL",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFaceURL()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupMemberInfoValidationError{
				field:  "FaceURL",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRoleLevel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupMemberInfoValidationError{
					field:  "RoleLevel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupMemberInfoValidationError{
					field:  "RoleLevel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleLevel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupMemberInfoValidationError{
				field:  "RoleLevel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetGroupMemberInfoValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetGroupMemberInfoValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetGroupMemberInfoValidationError{
				field:  "Ex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetGroupMemberInfoMultiError(errors)
	}

	return nil
}

// SetGroupMemberInfoMultiError is an error wrapping multiple validation errors
// returned by SetGroupMemberInfo.ValidateAll() if the designated constraints
// aren't met.
type SetGroupMemberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupMemberInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupMemberInfoMultiError) AllErrors() []error { return m }

// SetGroupMemberInfoValidationError is the validation error returned by
// SetGroupMemberInfo.Validate if the designated constraints aren't met.
type SetGroupMemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupMemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupMemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupMemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupMemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupMemberInfoValidationError) ErrorName() string {
	return "SetGroupMemberInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SetGroupMemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupMemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupMemberInfoValidationError{}

// Validate checks the field values on SetGroupMemberInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGroupMemberInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupMemberInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupMemberInfoReqMultiError, or nil if none found.
func (m *SetGroupMemberInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupMemberInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetGroupMemberInfoReqValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetGroupMemberInfoReqValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetGroupMemberInfoReqValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetGroupMemberInfoReqMultiError(errors)
	}

	return nil
}

// SetGroupMemberInfoReqMultiError is an error wrapping multiple validation
// errors returned by SetGroupMemberInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SetGroupMemberInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupMemberInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupMemberInfoReqMultiError) AllErrors() []error { return m }

// SetGroupMemberInfoReqValidationError is the validation error returned by
// SetGroupMemberInfoReq.Validate if the designated constraints aren't met.
type SetGroupMemberInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupMemberInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupMemberInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupMemberInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupMemberInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupMemberInfoReqValidationError) ErrorName() string {
	return "SetGroupMemberInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetGroupMemberInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupMemberInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupMemberInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupMemberInfoReqValidationError{}

// Validate checks the field values on SetGroupMemberInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGroupMemberInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGroupMemberInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGroupMemberInfoRespMultiError, or nil if none found.
func (m *SetGroupMemberInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGroupMemberInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetGroupMemberInfoRespMultiError(errors)
	}

	return nil
}

// SetGroupMemberInfoRespMultiError is an error wrapping multiple validation
// errors returned by SetGroupMemberInfoResp.ValidateAll() if the designated
// constraints aren't met.
type SetGroupMemberInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGroupMemberInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGroupMemberInfoRespMultiError) AllErrors() []error { return m }

// SetGroupMemberInfoRespValidationError is the validation error returned by
// SetGroupMemberInfoResp.Validate if the designated constraints aren't met.
type SetGroupMemberInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGroupMemberInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGroupMemberInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGroupMemberInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGroupMemberInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGroupMemberInfoRespValidationError) ErrorName() string {
	return "SetGroupMemberInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetGroupMemberInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGroupMemberInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGroupMemberInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGroupMemberInfoRespValidationError{}

// Validate checks the field values on GetGroupAbstractInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAbstractInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAbstractInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAbstractInfoReqMultiError, or nil if none found.
func (m *GetGroupAbstractInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAbstractInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGroupAbstractInfoReqMultiError(errors)
	}

	return nil
}

// GetGroupAbstractInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupAbstractInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupAbstractInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAbstractInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAbstractInfoReqMultiError) AllErrors() []error { return m }

// GetGroupAbstractInfoReqValidationError is the validation error returned by
// GetGroupAbstractInfoReq.Validate if the designated constraints aren't met.
type GetGroupAbstractInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAbstractInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAbstractInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAbstractInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAbstractInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAbstractInfoReqValidationError) ErrorName() string {
	return "GetGroupAbstractInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAbstractInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAbstractInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAbstractInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAbstractInfoReqValidationError{}

// Validate checks the field values on GroupAbstractInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupAbstractInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupAbstractInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupAbstractInfoMultiError, or nil if none found.
func (m *GroupAbstractInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupAbstractInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for GroupMemberNumber

	// no validation rules for GroupMemberListHash

	if len(errors) > 0 {
		return GroupAbstractInfoMultiError(errors)
	}

	return nil
}

// GroupAbstractInfoMultiError is an error wrapping multiple validation errors
// returned by GroupAbstractInfo.ValidateAll() if the designated constraints
// aren't met.
type GroupAbstractInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupAbstractInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupAbstractInfoMultiError) AllErrors() []error { return m }

// GroupAbstractInfoValidationError is the validation error returned by
// GroupAbstractInfo.Validate if the designated constraints aren't met.
type GroupAbstractInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupAbstractInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupAbstractInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupAbstractInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupAbstractInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupAbstractInfoValidationError) ErrorName() string {
	return "GroupAbstractInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GroupAbstractInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupAbstractInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupAbstractInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupAbstractInfoValidationError{}

// Validate checks the field values on GetGroupAbstractInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupAbstractInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupAbstractInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupAbstractInfoRespMultiError, or nil if none found.
func (m *GetGroupAbstractInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupAbstractInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupAbstractInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupAbstractInfoRespValidationError{
						field:  fmt.Sprintf("GroupAbstractInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupAbstractInfoRespValidationError{
						field:  fmt.Sprintf("GroupAbstractInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupAbstractInfoRespValidationError{
					field:  fmt.Sprintf("GroupAbstractInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupAbstractInfoRespMultiError(errors)
	}

	return nil
}

// GetGroupAbstractInfoRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupAbstractInfoResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupAbstractInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupAbstractInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupAbstractInfoRespMultiError) AllErrors() []error { return m }

// GetGroupAbstractInfoRespValidationError is the validation error returned by
// GetGroupAbstractInfoResp.Validate if the designated constraints aren't met.
type GetGroupAbstractInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupAbstractInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupAbstractInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupAbstractInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupAbstractInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupAbstractInfoRespValidationError) ErrorName() string {
	return "GetGroupAbstractInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupAbstractInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupAbstractInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupAbstractInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupAbstractInfoRespValidationError{}

// Validate checks the field values on GetUserInGroupMembersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInGroupMembersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInGroupMembersReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInGroupMembersReqMultiError, or nil if none found.
func (m *GetUserInGroupMembersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInGroupMembersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserInGroupMembersReqMultiError(errors)
	}

	return nil
}

// GetUserInGroupMembersReqMultiError is an error wrapping multiple validation
// errors returned by GetUserInGroupMembersReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserInGroupMembersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInGroupMembersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInGroupMembersReqMultiError) AllErrors() []error { return m }

// GetUserInGroupMembersReqValidationError is the validation error returned by
// GetUserInGroupMembersReq.Validate if the designated constraints aren't met.
type GetUserInGroupMembersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInGroupMembersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInGroupMembersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInGroupMembersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInGroupMembersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInGroupMembersReqValidationError) ErrorName() string {
	return "GetUserInGroupMembersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInGroupMembersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInGroupMembersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInGroupMembersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInGroupMembersReqValidationError{}

// Validate checks the field values on GetUserInGroupMembersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInGroupMembersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInGroupMembersResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInGroupMembersRespMultiError, or nil if none found.
func (m *GetUserInGroupMembersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInGroupMembersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserInGroupMembersRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserInGroupMembersRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserInGroupMembersRespValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserInGroupMembersRespMultiError(errors)
	}

	return nil
}

// GetUserInGroupMembersRespMultiError is an error wrapping multiple validation
// errors returned by GetUserInGroupMembersResp.ValidateAll() if the
// designated constraints aren't met.
type GetUserInGroupMembersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInGroupMembersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInGroupMembersRespMultiError) AllErrors() []error { return m }

// GetUserInGroupMembersRespValidationError is the validation error returned by
// GetUserInGroupMembersResp.Validate if the designated constraints aren't met.
type GetUserInGroupMembersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInGroupMembersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInGroupMembersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInGroupMembersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInGroupMembersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInGroupMembersRespValidationError) ErrorName() string {
	return "GetUserInGroupMembersRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInGroupMembersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInGroupMembersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInGroupMembersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInGroupMembersRespValidationError{}

// Validate checks the field values on GetGroupMemberUserIDsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberUserIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberUserIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberUserIDsReqMultiError, or nil if none found.
func (m *GetGroupMemberUserIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberUserIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupMemberUserIDsReqMultiError(errors)
	}

	return nil
}

// GetGroupMemberUserIDsReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberUserIDsReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberUserIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberUserIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberUserIDsReqMultiError) AllErrors() []error { return m }

// GetGroupMemberUserIDsReqValidationError is the validation error returned by
// GetGroupMemberUserIDsReq.Validate if the designated constraints aren't met.
type GetGroupMemberUserIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberUserIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberUserIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberUserIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberUserIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberUserIDsReqValidationError) ErrorName() string {
	return "GetGroupMemberUserIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberUserIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberUserIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberUserIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberUserIDsReqValidationError{}

// Validate checks the field values on GetGroupMemberUserIDsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberUserIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberUserIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberUserIDsRespMultiError, or nil if none found.
func (m *GetGroupMemberUserIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberUserIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGroupMemberUserIDsRespMultiError(errors)
	}

	return nil
}

// GetGroupMemberUserIDsRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberUserIDsResp.ValidateAll() if the
// designated constraints aren't met.
type GetGroupMemberUserIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberUserIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberUserIDsRespMultiError) AllErrors() []error { return m }

// GetGroupMemberUserIDsRespValidationError is the validation error returned by
// GetGroupMemberUserIDsResp.Validate if the designated constraints aren't met.
type GetGroupMemberUserIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberUserIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberUserIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberUserIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberUserIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberUserIDsRespValidationError) ErrorName() string {
	return "GetGroupMemberUserIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberUserIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberUserIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberUserIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberUserIDsRespValidationError{}

// Validate checks the field values on GetGroupMemberRoleLevelReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberRoleLevelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberRoleLevelReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberRoleLevelReqMultiError, or nil if none found.
func (m *GetGroupMemberRoleLevelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberRoleLevelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupMemberRoleLevelReqMultiError(errors)
	}

	return nil
}

// GetGroupMemberRoleLevelReqMultiError is an error wrapping multiple
// validation errors returned by GetGroupMemberRoleLevelReq.ValidateAll() if
// the designated constraints aren't met.
type GetGroupMemberRoleLevelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberRoleLevelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberRoleLevelReqMultiError) AllErrors() []error { return m }

// GetGroupMemberRoleLevelReqValidationError is the validation error returned
// by GetGroupMemberRoleLevelReq.Validate if the designated constraints aren't met.
type GetGroupMemberRoleLevelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberRoleLevelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberRoleLevelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberRoleLevelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberRoleLevelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberRoleLevelReqValidationError) ErrorName() string {
	return "GetGroupMemberRoleLevelReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberRoleLevelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberRoleLevelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberRoleLevelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberRoleLevelReqValidationError{}

// Validate checks the field values on GetGroupMemberRoleLevelResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberRoleLevelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberRoleLevelResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberRoleLevelRespMultiError, or nil if none found.
func (m *GetGroupMemberRoleLevelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberRoleLevelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupMemberRoleLevelRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupMemberRoleLevelRespValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupMemberRoleLevelRespValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupMemberRoleLevelRespMultiError(errors)
	}

	return nil
}

// GetGroupMemberRoleLevelRespMultiError is an error wrapping multiple
// validation errors returned by GetGroupMemberRoleLevelResp.ValidateAll() if
// the designated constraints aren't met.
type GetGroupMemberRoleLevelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberRoleLevelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberRoleLevelRespMultiError) AllErrors() []error { return m }

// GetGroupMemberRoleLevelRespValidationError is the validation error returned
// by GetGroupMemberRoleLevelResp.Validate if the designated constraints
// aren't met.
type GetGroupMemberRoleLevelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberRoleLevelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberRoleLevelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberRoleLevelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberRoleLevelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberRoleLevelRespValidationError) ErrorName() string {
	return "GetGroupMemberRoleLevelRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberRoleLevelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberRoleLevelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberRoleLevelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberRoleLevelRespValidationError{}

// Validate checks the field values on GetGroupInfoCacheReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupInfoCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupInfoCacheReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupInfoCacheReqMultiError, or nil if none found.
func (m *GetGroupInfoCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupInfoCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupInfoCacheReqMultiError(errors)
	}

	return nil
}

// GetGroupInfoCacheReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupInfoCacheReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupInfoCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupInfoCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupInfoCacheReqMultiError) AllErrors() []error { return m }

// GetGroupInfoCacheReqValidationError is the validation error returned by
// GetGroupInfoCacheReq.Validate if the designated constraints aren't met.
type GetGroupInfoCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupInfoCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupInfoCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupInfoCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupInfoCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupInfoCacheReqValidationError) ErrorName() string {
	return "GetGroupInfoCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupInfoCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupInfoCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupInfoCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupInfoCacheReqValidationError{}

// Validate checks the field values on GetGroupInfoCacheResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupInfoCacheResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupInfoCacheResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupInfoCacheRespMultiError, or nil if none found.
func (m *GetGroupInfoCacheResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupInfoCacheResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupInfoCacheRespValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupInfoCacheRespValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupInfoCacheRespValidationError{
				field:  "GroupInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupInfoCacheRespMultiError(errors)
	}

	return nil
}

// GetGroupInfoCacheRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupInfoCacheResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupInfoCacheRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupInfoCacheRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupInfoCacheRespMultiError) AllErrors() []error { return m }

// GetGroupInfoCacheRespValidationError is the validation error returned by
// GetGroupInfoCacheResp.Validate if the designated constraints aren't met.
type GetGroupInfoCacheRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupInfoCacheRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupInfoCacheRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupInfoCacheRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupInfoCacheRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupInfoCacheRespValidationError) ErrorName() string {
	return "GetGroupInfoCacheRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupInfoCacheRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupInfoCacheResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupInfoCacheRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupInfoCacheRespValidationError{}

// Validate checks the field values on GetGroupMemberCacheReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberCacheReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberCacheReqMultiError, or nil if none found.
func (m *GetGroupMemberCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for GroupMemberID

	if len(errors) > 0 {
		return GetGroupMemberCacheReqMultiError(errors)
	}

	return nil
}

// GetGroupMemberCacheReqMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberCacheReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberCacheReqMultiError) AllErrors() []error { return m }

// GetGroupMemberCacheReqValidationError is the validation error returned by
// GetGroupMemberCacheReq.Validate if the designated constraints aren't met.
type GetGroupMemberCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberCacheReqValidationError) ErrorName() string {
	return "GetGroupMemberCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberCacheReqValidationError{}

// Validate checks the field values on GetGroupMemberCacheResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupMemberCacheResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupMemberCacheResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupMemberCacheRespMultiError, or nil if none found.
func (m *GetGroupMemberCacheResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupMemberCacheResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupMemberCacheRespValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupMemberCacheRespValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupMemberCacheRespValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupMemberCacheRespMultiError(errors)
	}

	return nil
}

// GetGroupMemberCacheRespMultiError is an error wrapping multiple validation
// errors returned by GetGroupMemberCacheResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupMemberCacheRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupMemberCacheRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupMemberCacheRespMultiError) AllErrors() []error { return m }

// GetGroupMemberCacheRespValidationError is the validation error returned by
// GetGroupMemberCacheResp.Validate if the designated constraints aren't met.
type GetGroupMemberCacheRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupMemberCacheRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupMemberCacheRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupMemberCacheRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupMemberCacheRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupMemberCacheRespValidationError) ErrorName() string {
	return "GetGroupMemberCacheRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupMemberCacheRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupMemberCacheResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupMemberCacheRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupMemberCacheRespValidationError{}

// Validate checks the field values on GroupCreateCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupCreateCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupCreateCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupCreateCountReqMultiError, or nil if none found.
func (m *GroupCreateCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupCreateCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return GroupCreateCountReqMultiError(errors)
	}

	return nil
}

// GroupCreateCountReqMultiError is an error wrapping multiple validation
// errors returned by GroupCreateCountReq.ValidateAll() if the designated
// constraints aren't met.
type GroupCreateCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupCreateCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupCreateCountReqMultiError) AllErrors() []error { return m }

// GroupCreateCountReqValidationError is the validation error returned by
// GroupCreateCountReq.Validate if the designated constraints aren't met.
type GroupCreateCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupCreateCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupCreateCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupCreateCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupCreateCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupCreateCountReqValidationError) ErrorName() string {
	return "GroupCreateCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GroupCreateCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupCreateCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupCreateCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupCreateCountReqValidationError{}

// Validate checks the field values on GroupCreateCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupCreateCountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupCreateCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupCreateCountRespMultiError, or nil if none found.
func (m *GroupCreateCountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupCreateCountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Before

	// no validation rules for Count

	if len(errors) > 0 {
		return GroupCreateCountRespMultiError(errors)
	}

	return nil
}

// GroupCreateCountRespMultiError is an error wrapping multiple validation
// errors returned by GroupCreateCountResp.ValidateAll() if the designated
// constraints aren't met.
type GroupCreateCountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupCreateCountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupCreateCountRespMultiError) AllErrors() []error { return m }

// GroupCreateCountRespValidationError is the validation error returned by
// GroupCreateCountResp.Validate if the designated constraints aren't met.
type GroupCreateCountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupCreateCountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupCreateCountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupCreateCountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupCreateCountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupCreateCountRespValidationError) ErrorName() string {
	return "GroupCreateCountRespValidationError"
}

// Error satisfies the builtin error interface
func (e GroupCreateCountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupCreateCountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupCreateCountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupCreateCountRespValidationError{}

// Validate checks the field values on GetGroupUsersReqApplicationListReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGroupUsersReqApplicationListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupUsersReqApplicationListReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetGroupUsersReqApplicationListReqMultiError, or nil if none found.
func (m *GetGroupUsersReqApplicationListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupUsersReqApplicationListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetGroupUsersReqApplicationListReqMultiError(errors)
	}

	return nil
}

// GetGroupUsersReqApplicationListReqMultiError is an error wrapping multiple
// validation errors returned by
// GetGroupUsersReqApplicationListReq.ValidateAll() if the designated
// constraints aren't met.
type GetGroupUsersReqApplicationListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupUsersReqApplicationListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupUsersReqApplicationListReqMultiError) AllErrors() []error { return m }

// GetGroupUsersReqApplicationListReqValidationError is the validation error
// returned by GetGroupUsersReqApplicationListReq.Validate if the designated
// constraints aren't met.
type GetGroupUsersReqApplicationListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupUsersReqApplicationListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupUsersReqApplicationListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupUsersReqApplicationListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupUsersReqApplicationListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupUsersReqApplicationListReqValidationError) ErrorName() string {
	return "GetGroupUsersReqApplicationListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupUsersReqApplicationListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupUsersReqApplicationListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupUsersReqApplicationListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupUsersReqApplicationListReqValidationError{}

// Validate checks the field values on GetGroupUsersReqApplicationListResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGroupUsersReqApplicationListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupUsersReqApplicationListResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetGroupUsersReqApplicationListRespMultiError, or nil if none found.
func (m *GetGroupUsersReqApplicationListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupUsersReqApplicationListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetGroupRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupUsersReqApplicationListRespValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupUsersReqApplicationListRespValidationError{
						field:  fmt.Sprintf("GroupRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupUsersReqApplicationListRespValidationError{
					field:  fmt.Sprintf("GroupRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupUsersReqApplicationListRespMultiError(errors)
	}

	return nil
}

// GetGroupUsersReqApplicationListRespMultiError is an error wrapping multiple
// validation errors returned by
// GetGroupUsersReqApplicationListResp.ValidateAll() if the designated
// constraints aren't met.
type GetGroupUsersReqApplicationListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupUsersReqApplicationListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupUsersReqApplicationListRespMultiError) AllErrors() []error { return m }

// GetGroupUsersReqApplicationListRespValidationError is the validation error
// returned by GetGroupUsersReqApplicationListResp.Validate if the designated
// constraints aren't met.
type GetGroupUsersReqApplicationListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupUsersReqApplicationListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupUsersReqApplicationListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupUsersReqApplicationListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupUsersReqApplicationListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupUsersReqApplicationListRespValidationError) ErrorName() string {
	return "GetGroupUsersReqApplicationListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupUsersReqApplicationListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupUsersReqApplicationListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupUsersReqApplicationListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupUsersReqApplicationListRespValidationError{}

// Validate checks the field values on NotificationUserInfoUpdateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationUserInfoUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationUserInfoUpdateReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NotificationUserInfoUpdateReqMultiError, or nil if none found.
func (m *NotificationUserInfoUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationUserInfoUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetOldUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationUserInfoUpdateReqValidationError{
					field:  "OldUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationUserInfoUpdateReqValidationError{
					field:  "OldUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOldUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationUserInfoUpdateReqValidationError{
				field:  "OldUserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNewUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationUserInfoUpdateReqValidationError{
					field:  "NewUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationUserInfoUpdateReqValidationError{
					field:  "NewUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationUserInfoUpdateReqValidationError{
				field:  "NewUserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationUserInfoUpdateReqMultiError(errors)
	}

	return nil
}

// NotificationUserInfoUpdateReqMultiError is an error wrapping multiple
// validation errors returned by NotificationUserInfoUpdateReq.ValidateAll()
// if the designated constraints aren't met.
type NotificationUserInfoUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationUserInfoUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationUserInfoUpdateReqMultiError) AllErrors() []error { return m }

// NotificationUserInfoUpdateReqValidationError is the validation error
// returned by NotificationUserInfoUpdateReq.Validate if the designated
// constraints aren't met.
type NotificationUserInfoUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationUserInfoUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationUserInfoUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationUserInfoUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationUserInfoUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationUserInfoUpdateReqValidationError) ErrorName() string {
	return "NotificationUserInfoUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationUserInfoUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationUserInfoUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationUserInfoUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationUserInfoUpdateReqValidationError{}

// Validate checks the field values on NotificationUserInfoUpdateResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationUserInfoUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationUserInfoUpdateResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NotificationUserInfoUpdateRespMultiError, or nil if none found.
func (m *NotificationUserInfoUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationUserInfoUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotificationUserInfoUpdateRespMultiError(errors)
	}

	return nil
}

// NotificationUserInfoUpdateRespMultiError is an error wrapping multiple
// validation errors returned by NotificationUserInfoUpdateResp.ValidateAll()
// if the designated constraints aren't met.
type NotificationUserInfoUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationUserInfoUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationUserInfoUpdateRespMultiError) AllErrors() []error { return m }

// NotificationUserInfoUpdateRespValidationError is the validation error
// returned by NotificationUserInfoUpdateResp.Validate if the designated
// constraints aren't met.
type NotificationUserInfoUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationUserInfoUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationUserInfoUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationUserInfoUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationUserInfoUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationUserInfoUpdateRespValidationError) ErrorName() string {
	return "NotificationUserInfoUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationUserInfoUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationUserInfoUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationUserInfoUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationUserInfoUpdateRespValidationError{}

// Validate checks the field values on GetIncrementalGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncrementalGroupMemberReqMultiError, or nil if none found.
func (m *GetIncrementalGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for VersionID

	// no validation rules for Version

	if len(errors) > 0 {
		return GetIncrementalGroupMemberReqMultiError(errors)
	}

	return nil
}

// GetIncrementalGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by GetIncrementalGroupMemberReq.ValidateAll() if
// the designated constraints aren't met.
type GetIncrementalGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalGroupMemberReqMultiError) AllErrors() []error { return m }

// GetIncrementalGroupMemberReqValidationError is the validation error returned
// by GetIncrementalGroupMemberReq.Validate if the designated constraints
// aren't met.
type GetIncrementalGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalGroupMemberReqValidationError) ErrorName() string {
	return "GetIncrementalGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalGroupMemberReqValidationError{}

// Validate checks the field values on GetIncrementalGroupMemberResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalGroupMemberResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalGroupMemberResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIncrementalGroupMemberRespMultiError, or nil if none found.
func (m *GetIncrementalGroupMemberResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalGroupMemberResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Full

	for idx, item := range m.GetInsert() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalGroupMemberRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalGroupMemberRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalGroupMemberRespValidationError{
					field:  fmt.Sprintf("Insert[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalGroupMemberRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalGroupMemberRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalGroupMemberRespValidationError{
					field:  fmt.Sprintf("Update[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIncrementalGroupMemberRespValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIncrementalGroupMemberRespValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIncrementalGroupMemberRespValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortVersion

	if len(errors) > 0 {
		return GetIncrementalGroupMemberRespMultiError(errors)
	}

	return nil
}

// GetIncrementalGroupMemberRespMultiError is an error wrapping multiple
// validation errors returned by GetIncrementalGroupMemberResp.ValidateAll()
// if the designated constraints aren't met.
type GetIncrementalGroupMemberRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalGroupMemberRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalGroupMemberRespMultiError) AllErrors() []error { return m }

// GetIncrementalGroupMemberRespValidationError is the validation error
// returned by GetIncrementalGroupMemberResp.Validate if the designated
// constraints aren't met.
type GetIncrementalGroupMemberRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalGroupMemberRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalGroupMemberRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalGroupMemberRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalGroupMemberRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalGroupMemberRespValidationError) ErrorName() string {
	return "GetIncrementalGroupMemberRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalGroupMemberRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalGroupMemberResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalGroupMemberRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalGroupMemberRespValidationError{}

// Validate checks the field values on GetIncrementalJoinGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalJoinGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalJoinGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncrementalJoinGroupReqMultiError, or nil if none found.
func (m *GetIncrementalJoinGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalJoinGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for VersionID

	// no validation rules for Version

	if len(errors) > 0 {
		return GetIncrementalJoinGroupReqMultiError(errors)
	}

	return nil
}

// GetIncrementalJoinGroupReqMultiError is an error wrapping multiple
// validation errors returned by GetIncrementalJoinGroupReq.ValidateAll() if
// the designated constraints aren't met.
type GetIncrementalJoinGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalJoinGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalJoinGroupReqMultiError) AllErrors() []error { return m }

// GetIncrementalJoinGroupReqValidationError is the validation error returned
// by GetIncrementalJoinGroupReq.Validate if the designated constraints aren't met.
type GetIncrementalJoinGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalJoinGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalJoinGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalJoinGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalJoinGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalJoinGroupReqValidationError) ErrorName() string {
	return "GetIncrementalJoinGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalJoinGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalJoinGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalJoinGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalJoinGroupReqValidationError{}

// Validate checks the field values on GetIncrementalJoinGroupResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalJoinGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalJoinGroupResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncrementalJoinGroupRespMultiError, or nil if none found.
func (m *GetIncrementalJoinGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalJoinGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Full

	for idx, item := range m.GetInsert() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalJoinGroupRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalJoinGroupRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalJoinGroupRespValidationError{
					field:  fmt.Sprintf("Insert[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalJoinGroupRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalJoinGroupRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalJoinGroupRespValidationError{
					field:  fmt.Sprintf("Update[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SortVersion

	if len(errors) > 0 {
		return GetIncrementalJoinGroupRespMultiError(errors)
	}

	return nil
}

// GetIncrementalJoinGroupRespMultiError is an error wrapping multiple
// validation errors returned by GetIncrementalJoinGroupResp.ValidateAll() if
// the designated constraints aren't met.
type GetIncrementalJoinGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalJoinGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalJoinGroupRespMultiError) AllErrors() []error { return m }

// GetIncrementalJoinGroupRespValidationError is the validation error returned
// by GetIncrementalJoinGroupResp.Validate if the designated constraints
// aren't met.
type GetIncrementalJoinGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalJoinGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalJoinGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalJoinGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalJoinGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalJoinGroupRespValidationError) ErrorName() string {
	return "GetIncrementalJoinGroupRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalJoinGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalJoinGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalJoinGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalJoinGroupRespValidationError{}

// Validate checks the field values on GetFullGroupMemberUserIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullGroupMemberUserIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullGroupMemberUserIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFullGroupMemberUserIDsReqMultiError, or nil if none found.
func (m *GetFullGroupMemberUserIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullGroupMemberUserIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdHash

	// no validation rules for GroupID

	if len(errors) > 0 {
		return GetFullGroupMemberUserIDsReqMultiError(errors)
	}

	return nil
}

// GetFullGroupMemberUserIDsReqMultiError is an error wrapping multiple
// validation errors returned by GetFullGroupMemberUserIDsReq.ValidateAll() if
// the designated constraints aren't met.
type GetFullGroupMemberUserIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullGroupMemberUserIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullGroupMemberUserIDsReqMultiError) AllErrors() []error { return m }

// GetFullGroupMemberUserIDsReqValidationError is the validation error returned
// by GetFullGroupMemberUserIDsReq.Validate if the designated constraints
// aren't met.
type GetFullGroupMemberUserIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullGroupMemberUserIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullGroupMemberUserIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullGroupMemberUserIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullGroupMemberUserIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullGroupMemberUserIDsReqValidationError) ErrorName() string {
	return "GetFullGroupMemberUserIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullGroupMemberUserIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullGroupMemberUserIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullGroupMemberUserIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullGroupMemberUserIDsReqValidationError{}

// Validate checks the field values on GetFullGroupMemberUserIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullGroupMemberUserIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullGroupMemberUserIDsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFullGroupMemberUserIDsRespMultiError, or nil if none found.
func (m *GetFullGroupMemberUserIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullGroupMemberUserIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Equal

	if len(errors) > 0 {
		return GetFullGroupMemberUserIDsRespMultiError(errors)
	}

	return nil
}

// GetFullGroupMemberUserIDsRespMultiError is an error wrapping multiple
// validation errors returned by GetFullGroupMemberUserIDsResp.ValidateAll()
// if the designated constraints aren't met.
type GetFullGroupMemberUserIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullGroupMemberUserIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullGroupMemberUserIDsRespMultiError) AllErrors() []error { return m }

// GetFullGroupMemberUserIDsRespValidationError is the validation error
// returned by GetFullGroupMemberUserIDsResp.Validate if the designated
// constraints aren't met.
type GetFullGroupMemberUserIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullGroupMemberUserIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullGroupMemberUserIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullGroupMemberUserIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullGroupMemberUserIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullGroupMemberUserIDsRespValidationError) ErrorName() string {
	return "GetFullGroupMemberUserIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullGroupMemberUserIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullGroupMemberUserIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullGroupMemberUserIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullGroupMemberUserIDsRespValidationError{}

// Validate checks the field values on GetFullJoinGroupIDsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullJoinGroupIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullJoinGroupIDsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFullJoinGroupIDsReqMultiError, or nil if none found.
func (m *GetFullJoinGroupIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullJoinGroupIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdHash

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetFullJoinGroupIDsReqMultiError(errors)
	}

	return nil
}

// GetFullJoinGroupIDsReqMultiError is an error wrapping multiple validation
// errors returned by GetFullJoinGroupIDsReq.ValidateAll() if the designated
// constraints aren't met.
type GetFullJoinGroupIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullJoinGroupIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullJoinGroupIDsReqMultiError) AllErrors() []error { return m }

// GetFullJoinGroupIDsReqValidationError is the validation error returned by
// GetFullJoinGroupIDsReq.Validate if the designated constraints aren't met.
type GetFullJoinGroupIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullJoinGroupIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullJoinGroupIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullJoinGroupIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullJoinGroupIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullJoinGroupIDsReqValidationError) ErrorName() string {
	return "GetFullJoinGroupIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullJoinGroupIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullJoinGroupIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullJoinGroupIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullJoinGroupIDsReqValidationError{}

// Validate checks the field values on GetFullJoinGroupIDsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullJoinGroupIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullJoinGroupIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFullJoinGroupIDsRespMultiError, or nil if none found.
func (m *GetFullJoinGroupIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullJoinGroupIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Equal

	if len(errors) > 0 {
		return GetFullJoinGroupIDsRespMultiError(errors)
	}

	return nil
}

// GetFullJoinGroupIDsRespMultiError is an error wrapping multiple validation
// errors returned by GetFullJoinGroupIDsResp.ValidateAll() if the designated
// constraints aren't met.
type GetFullJoinGroupIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullJoinGroupIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullJoinGroupIDsRespMultiError) AllErrors() []error { return m }

// GetFullJoinGroupIDsRespValidationError is the validation error returned by
// GetFullJoinGroupIDsResp.Validate if the designated constraints aren't met.
type GetFullJoinGroupIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullJoinGroupIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullJoinGroupIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullJoinGroupIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullJoinGroupIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullJoinGroupIDsRespValidationError) ErrorName() string {
	return "GetFullJoinGroupIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullJoinGroupIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullJoinGroupIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullJoinGroupIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullJoinGroupIDsRespValidationError{}

// Validate checks the field values on BatchGetIncrementalGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchGetIncrementalGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetIncrementalGroupMemberReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchGetIncrementalGroupMemberReqMultiError, or nil if none found.
func (m *BatchGetIncrementalGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetIncrementalGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	for idx, item := range m.GetReqList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchGetIncrementalGroupMemberReqValidationError{
						field:  fmt.Sprintf("ReqList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchGetIncrementalGroupMemberReqValidationError{
						field:  fmt.Sprintf("ReqList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchGetIncrementalGroupMemberReqValidationError{
					field:  fmt.Sprintf("ReqList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchGetIncrementalGroupMemberReqMultiError(errors)
	}

	return nil
}

// BatchGetIncrementalGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by
// BatchGetIncrementalGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type BatchGetIncrementalGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetIncrementalGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetIncrementalGroupMemberReqMultiError) AllErrors() []error { return m }

// BatchGetIncrementalGroupMemberReqValidationError is the validation error
// returned by BatchGetIncrementalGroupMemberReq.Validate if the designated
// constraints aren't met.
type BatchGetIncrementalGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetIncrementalGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetIncrementalGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetIncrementalGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetIncrementalGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetIncrementalGroupMemberReqValidationError) ErrorName() string {
	return "BatchGetIncrementalGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetIncrementalGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetIncrementalGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetIncrementalGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetIncrementalGroupMemberReqValidationError{}

// Validate checks the field values on BatchGetIncrementalGroupMemberResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchGetIncrementalGroupMemberResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetIncrementalGroupMemberResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchGetIncrementalGroupMemberRespMultiError, or nil if none found.
func (m *BatchGetIncrementalGroupMemberResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetIncrementalGroupMemberResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetRespList()))
		i := 0
		for key := range m.GetRespList() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRespList()[key]
			_ = val

			// no validation rules for RespList[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, BatchGetIncrementalGroupMemberRespValidationError{
							field:  fmt.Sprintf("RespList[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, BatchGetIncrementalGroupMemberRespValidationError{
							field:  fmt.Sprintf("RespList[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return BatchGetIncrementalGroupMemberRespValidationError{
						field:  fmt.Sprintf("RespList[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return BatchGetIncrementalGroupMemberRespMultiError(errors)
	}

	return nil
}

// BatchGetIncrementalGroupMemberRespMultiError is an error wrapping multiple
// validation errors returned by
// BatchGetIncrementalGroupMemberResp.ValidateAll() if the designated
// constraints aren't met.
type BatchGetIncrementalGroupMemberRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetIncrementalGroupMemberRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetIncrementalGroupMemberRespMultiError) AllErrors() []error { return m }

// BatchGetIncrementalGroupMemberRespValidationError is the validation error
// returned by BatchGetIncrementalGroupMemberResp.Validate if the designated
// constraints aren't met.
type BatchGetIncrementalGroupMemberRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetIncrementalGroupMemberRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetIncrementalGroupMemberRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetIncrementalGroupMemberRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetIncrementalGroupMemberRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetIncrementalGroupMemberRespValidationError) ErrorName() string {
	return "BatchGetIncrementalGroupMemberRespValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetIncrementalGroupMemberRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetIncrementalGroupMemberResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetIncrementalGroupMemberRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetIncrementalGroupMemberRespValidationError{}
