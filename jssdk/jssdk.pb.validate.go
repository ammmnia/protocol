// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jssdk/jssdk.proto

package jssdk

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConversationMsg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConversationMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConversationMsg with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConversationMsgMultiError, or nil if none found.
func (m *ConversationMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *ConversationMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationMsgValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastMsg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "LastMsg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "LastMsg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastMsg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationMsgValidationError{
				field:  "LastMsg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationMsgValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFriend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "Friend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "Friend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationMsgValidationError{
				field:  "Friend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationMsgValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationMsgValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxSeq

	// no validation rules for ReadSeq

	if len(errors) > 0 {
		return ConversationMsgMultiError(errors)
	}

	return nil
}

// ConversationMsgMultiError is an error wrapping multiple validation errors
// returned by ConversationMsg.ValidateAll() if the designated constraints
// aren't met.
type ConversationMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationMsgMultiError) AllErrors() []error { return m }

// ConversationMsgValidationError is the validation error returned by
// ConversationMsg.Validate if the designated constraints aren't met.
type ConversationMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationMsgValidationError) ErrorName() string { return "ConversationMsgValidationError" }

// Error satisfies the builtin error interface
func (e ConversationMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversationMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationMsgValidationError{}

// Validate checks the field values on GetActiveConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActiveConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActiveConversationsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActiveConversationsReqMultiError, or nil if none found.
func (m *GetActiveConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActiveConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for Count

	if len(errors) > 0 {
		return GetActiveConversationsReqMultiError(errors)
	}

	return nil
}

// GetActiveConversationsReqMultiError is an error wrapping multiple validation
// errors returned by GetActiveConversationsReq.ValidateAll() if the
// designated constraints aren't met.
type GetActiveConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActiveConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActiveConversationsReqMultiError) AllErrors() []error { return m }

// GetActiveConversationsReqValidationError is the validation error returned by
// GetActiveConversationsReq.Validate if the designated constraints aren't met.
type GetActiveConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActiveConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActiveConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActiveConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActiveConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActiveConversationsReqValidationError) ErrorName() string {
	return "GetActiveConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetActiveConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActiveConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActiveConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActiveConversationsReqValidationError{}

// Validate checks the field values on GetActiveConversationsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActiveConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActiveConversationsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActiveConversationsRespMultiError, or nil if none found.
func (m *GetActiveConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActiveConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnreadCount

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActiveConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActiveConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActiveConversationsRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActiveConversationsRespMultiError(errors)
	}

	return nil
}

// GetActiveConversationsRespMultiError is an error wrapping multiple
// validation errors returned by GetActiveConversationsResp.ValidateAll() if
// the designated constraints aren't met.
type GetActiveConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActiveConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActiveConversationsRespMultiError) AllErrors() []error { return m }

// GetActiveConversationsRespValidationError is the validation error returned
// by GetActiveConversationsResp.Validate if the designated constraints aren't met.
type GetActiveConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActiveConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActiveConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActiveConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActiveConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActiveConversationsRespValidationError) ErrorName() string {
	return "GetActiveConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetActiveConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActiveConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActiveConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActiveConversationsRespValidationError{}

// Validate checks the field values on GetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationsReqMultiError, or nil if none found.
func (m *GetConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetConversationsReqMultiError(errors)
	}

	return nil
}

// GetConversationsReqMultiError is an error wrapping multiple validation
// errors returned by GetConversationsReq.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsReqMultiError) AllErrors() []error { return m }

// GetConversationsReqValidationError is the validation error returned by
// GetConversationsReq.Validate if the designated constraints aren't met.
type GetConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsReqValidationError) ErrorName() string {
	return "GetConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsReqValidationError{}

// Validate checks the field values on GetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationsRespMultiError, or nil if none found.
func (m *GetConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnreadCount

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConversationsRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConversationsRespMultiError(errors)
	}

	return nil
}

// GetConversationsRespMultiError is an error wrapping multiple validation
// errors returned by GetConversationsResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsRespMultiError) AllErrors() []error { return m }

// GetConversationsRespValidationError is the validation error returned by
// GetConversationsResp.Validate if the designated constraints aren't met.
type GetConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsRespValidationError) ErrorName() string {
	return "GetConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsRespValidationError{}
