// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: msggateway/msggateway.proto

package msggateway

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OnlinePushMsgReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OnlinePushMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlinePushMsgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlinePushMsgReqMultiError, or nil if none found.
func (m *OnlinePushMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlinePushMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMsgData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OnlinePushMsgReqValidationError{
					field:  "MsgData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OnlinePushMsgReqValidationError{
					field:  "MsgData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsgData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnlinePushMsgReqValidationError{
				field:  "MsgData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PushToUserID

	if len(errors) > 0 {
		return OnlinePushMsgReqMultiError(errors)
	}

	return nil
}

// OnlinePushMsgReqMultiError is an error wrapping multiple validation errors
// returned by OnlinePushMsgReq.ValidateAll() if the designated constraints
// aren't met.
type OnlinePushMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlinePushMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlinePushMsgReqMultiError) AllErrors() []error { return m }

// OnlinePushMsgReqValidationError is the validation error returned by
// OnlinePushMsgReq.Validate if the designated constraints aren't met.
type OnlinePushMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlinePushMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlinePushMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlinePushMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlinePushMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlinePushMsgReqValidationError) ErrorName() string { return "OnlinePushMsgReqValidationError" }

// Error satisfies the builtin error interface
func (e OnlinePushMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlinePushMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlinePushMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlinePushMsgReqValidationError{}

// Validate checks the field values on OnlinePushMsgResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OnlinePushMsgResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlinePushMsgResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlinePushMsgRespMultiError, or nil if none found.
func (m *OnlinePushMsgResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlinePushMsgResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResp() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OnlinePushMsgRespValidationError{
						field:  fmt.Sprintf("Resp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OnlinePushMsgRespValidationError{
						field:  fmt.Sprintf("Resp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OnlinePushMsgRespValidationError{
					field:  fmt.Sprintf("Resp[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OnlinePushMsgRespMultiError(errors)
	}

	return nil
}

// OnlinePushMsgRespMultiError is an error wrapping multiple validation errors
// returned by OnlinePushMsgResp.ValidateAll() if the designated constraints
// aren't met.
type OnlinePushMsgRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlinePushMsgRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlinePushMsgRespMultiError) AllErrors() []error { return m }

// OnlinePushMsgRespValidationError is the validation error returned by
// OnlinePushMsgResp.Validate if the designated constraints aren't met.
type OnlinePushMsgRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlinePushMsgRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlinePushMsgRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlinePushMsgRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlinePushMsgRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlinePushMsgRespValidationError) ErrorName() string {
	return "OnlinePushMsgRespValidationError"
}

// Error satisfies the builtin error interface
func (e OnlinePushMsgRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlinePushMsgResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlinePushMsgRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlinePushMsgRespValidationError{}

// Validate checks the field values on SingleMsgToUserResults with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleMsgToUserResults) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleMsgToUserResults with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleMsgToUserResultsMultiError, or nil if none found.
func (m *SingleMsgToUserResults) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleMsgToUserResults) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	for idx, item := range m.GetResp() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SingleMsgToUserResultsValidationError{
						field:  fmt.Sprintf("Resp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SingleMsgToUserResultsValidationError{
						field:  fmt.Sprintf("Resp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SingleMsgToUserResultsValidationError{
					field:  fmt.Sprintf("Resp[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OnlinePush

	if len(errors) > 0 {
		return SingleMsgToUserResultsMultiError(errors)
	}

	return nil
}

// SingleMsgToUserResultsMultiError is an error wrapping multiple validation
// errors returned by SingleMsgToUserResults.ValidateAll() if the designated
// constraints aren't met.
type SingleMsgToUserResultsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleMsgToUserResultsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleMsgToUserResultsMultiError) AllErrors() []error { return m }

// SingleMsgToUserResultsValidationError is the validation error returned by
// SingleMsgToUserResults.Validate if the designated constraints aren't met.
type SingleMsgToUserResultsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleMsgToUserResultsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleMsgToUserResultsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleMsgToUserResultsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleMsgToUserResultsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleMsgToUserResultsValidationError) ErrorName() string {
	return "SingleMsgToUserResultsValidationError"
}

// Error satisfies the builtin error interface
func (e SingleMsgToUserResultsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleMsgToUserResults.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleMsgToUserResultsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleMsgToUserResultsValidationError{}

// Validate checks the field values on OnlineBatchPushOneMsgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineBatchPushOneMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineBatchPushOneMsgReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineBatchPushOneMsgReqMultiError, or nil if none found.
func (m *OnlineBatchPushOneMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineBatchPushOneMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMsgData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OnlineBatchPushOneMsgReqValidationError{
					field:  "MsgData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OnlineBatchPushOneMsgReqValidationError{
					field:  "MsgData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsgData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnlineBatchPushOneMsgReqValidationError{
				field:  "MsgData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OnlineBatchPushOneMsgReqMultiError(errors)
	}

	return nil
}

// OnlineBatchPushOneMsgReqMultiError is an error wrapping multiple validation
// errors returned by OnlineBatchPushOneMsgReq.ValidateAll() if the designated
// constraints aren't met.
type OnlineBatchPushOneMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineBatchPushOneMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineBatchPushOneMsgReqMultiError) AllErrors() []error { return m }

// OnlineBatchPushOneMsgReqValidationError is the validation error returned by
// OnlineBatchPushOneMsgReq.Validate if the designated constraints aren't met.
type OnlineBatchPushOneMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineBatchPushOneMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineBatchPushOneMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineBatchPushOneMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineBatchPushOneMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineBatchPushOneMsgReqValidationError) ErrorName() string {
	return "OnlineBatchPushOneMsgReqValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineBatchPushOneMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineBatchPushOneMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineBatchPushOneMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineBatchPushOneMsgReqValidationError{}

// Validate checks the field values on OnlineBatchPushOneMsgResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnlineBatchPushOneMsgResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineBatchPushOneMsgResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnlineBatchPushOneMsgRespMultiError, or nil if none found.
func (m *OnlineBatchPushOneMsgResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineBatchPushOneMsgResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSinglePushResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OnlineBatchPushOneMsgRespValidationError{
						field:  fmt.Sprintf("SinglePushResult[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OnlineBatchPushOneMsgRespValidationError{
						field:  fmt.Sprintf("SinglePushResult[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OnlineBatchPushOneMsgRespValidationError{
					field:  fmt.Sprintf("SinglePushResult[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OnlineBatchPushOneMsgRespMultiError(errors)
	}

	return nil
}

// OnlineBatchPushOneMsgRespMultiError is an error wrapping multiple validation
// errors returned by OnlineBatchPushOneMsgResp.ValidateAll() if the
// designated constraints aren't met.
type OnlineBatchPushOneMsgRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineBatchPushOneMsgRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineBatchPushOneMsgRespMultiError) AllErrors() []error { return m }

// OnlineBatchPushOneMsgRespValidationError is the validation error returned by
// OnlineBatchPushOneMsgResp.Validate if the designated constraints aren't met.
type OnlineBatchPushOneMsgRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineBatchPushOneMsgRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineBatchPushOneMsgRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineBatchPushOneMsgRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineBatchPushOneMsgRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineBatchPushOneMsgRespValidationError) ErrorName() string {
	return "OnlineBatchPushOneMsgRespValidationError"
}

// Error satisfies the builtin error interface
func (e OnlineBatchPushOneMsgRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineBatchPushOneMsgResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineBatchPushOneMsgRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineBatchPushOneMsgRespValidationError{}

// Validate checks the field values on SingleMsgToUserPlatform with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleMsgToUserPlatform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleMsgToUserPlatform with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleMsgToUserPlatformMultiError, or nil if none found.
func (m *SingleMsgToUserPlatform) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleMsgToUserPlatform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResultCode

	// no validation rules for RecvID

	// no validation rules for RecvPlatFormID

	if len(errors) > 0 {
		return SingleMsgToUserPlatformMultiError(errors)
	}

	return nil
}

// SingleMsgToUserPlatformMultiError is an error wrapping multiple validation
// errors returned by SingleMsgToUserPlatform.ValidateAll() if the designated
// constraints aren't met.
type SingleMsgToUserPlatformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleMsgToUserPlatformMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleMsgToUserPlatformMultiError) AllErrors() []error { return m }

// SingleMsgToUserPlatformValidationError is the validation error returned by
// SingleMsgToUserPlatform.Validate if the designated constraints aren't met.
type SingleMsgToUserPlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleMsgToUserPlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleMsgToUserPlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleMsgToUserPlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleMsgToUserPlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleMsgToUserPlatformValidationError) ErrorName() string {
	return "SingleMsgToUserPlatformValidationError"
}

// Error satisfies the builtin error interface
func (e SingleMsgToUserPlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleMsgToUserPlatform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleMsgToUserPlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleMsgToUserPlatformValidationError{}

// Validate checks the field values on GetUsersOnlineStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersOnlineStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersOnlineStatusReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersOnlineStatusReqMultiError, or nil if none found.
func (m *GetUsersOnlineStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersOnlineStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersOnlineStatusReqMultiError(errors)
	}

	return nil
}

// GetUsersOnlineStatusReqMultiError is an error wrapping multiple validation
// errors returned by GetUsersOnlineStatusReq.ValidateAll() if the designated
// constraints aren't met.
type GetUsersOnlineStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersOnlineStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersOnlineStatusReqMultiError) AllErrors() []error { return m }

// GetUsersOnlineStatusReqValidationError is the validation error returned by
// GetUsersOnlineStatusReq.Validate if the designated constraints aren't met.
type GetUsersOnlineStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersOnlineStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersOnlineStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersOnlineStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersOnlineStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersOnlineStatusReqValidationError) ErrorName() string {
	return "GetUsersOnlineStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersOnlineStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersOnlineStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersOnlineStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersOnlineStatusReqValidationError{}

// Validate checks the field values on GetUsersOnlineStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersOnlineStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersOnlineStatusResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersOnlineStatusRespMultiError, or nil if none found.
func (m *GetUsersOnlineStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersOnlineStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSuccessResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersOnlineStatusRespValidationError{
						field:  fmt.Sprintf("SuccessResult[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersOnlineStatusRespValidationError{
						field:  fmt.Sprintf("SuccessResult[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersOnlineStatusRespValidationError{
					field:  fmt.Sprintf("SuccessResult[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFailedResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersOnlineStatusRespValidationError{
						field:  fmt.Sprintf("FailedResult[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersOnlineStatusRespValidationError{
						field:  fmt.Sprintf("FailedResult[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersOnlineStatusRespValidationError{
					field:  fmt.Sprintf("FailedResult[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersOnlineStatusRespMultiError(errors)
	}

	return nil
}

// GetUsersOnlineStatusRespMultiError is an error wrapping multiple validation
// errors returned by GetUsersOnlineStatusResp.ValidateAll() if the designated
// constraints aren't met.
type GetUsersOnlineStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersOnlineStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersOnlineStatusRespMultiError) AllErrors() []error { return m }

// GetUsersOnlineStatusRespValidationError is the validation error returned by
// GetUsersOnlineStatusResp.Validate if the designated constraints aren't met.
type GetUsersOnlineStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersOnlineStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersOnlineStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersOnlineStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersOnlineStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersOnlineStatusRespValidationError) ErrorName() string {
	return "GetUsersOnlineStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersOnlineStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersOnlineStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersOnlineStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersOnlineStatusRespValidationError{}

// Validate checks the field values on SingleDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SingleDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SingleDetailMultiError, or
// nil if none found.
func (m *SingleDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Status

	for idx, item := range m.GetSinglePlatformToken() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SingleDetailValidationError{
						field:  fmt.Sprintf("SinglePlatformToken[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SingleDetailValidationError{
						field:  fmt.Sprintf("SinglePlatformToken[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SingleDetailValidationError{
					field:  fmt.Sprintf("SinglePlatformToken[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SingleDetailMultiError(errors)
	}

	return nil
}

// SingleDetailMultiError is an error wrapping multiple validation errors
// returned by SingleDetail.ValidateAll() if the designated constraints aren't met.
type SingleDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleDetailMultiError) AllErrors() []error { return m }

// SingleDetailValidationError is the validation error returned by
// SingleDetail.Validate if the designated constraints aren't met.
type SingleDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleDetailValidationError) ErrorName() string { return "SingleDetailValidationError" }

// Error satisfies the builtin error interface
func (e SingleDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleDetailValidationError{}

// Validate checks the field values on SinglePlatformToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SinglePlatformToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SinglePlatformToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SinglePlatformTokenMultiError, or nil if none found.
func (m *SinglePlatformToken) ValidateAll() error {
	return m.validate(true)
}

func (m *SinglePlatformToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlatformID

	// no validation rules for Total

	if len(errors) > 0 {
		return SinglePlatformTokenMultiError(errors)
	}

	return nil
}

// SinglePlatformTokenMultiError is an error wrapping multiple validation
// errors returned by SinglePlatformToken.ValidateAll() if the designated
// constraints aren't met.
type SinglePlatformTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SinglePlatformTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SinglePlatformTokenMultiError) AllErrors() []error { return m }

// SinglePlatformTokenValidationError is the validation error returned by
// SinglePlatformToken.Validate if the designated constraints aren't met.
type SinglePlatformTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SinglePlatformTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SinglePlatformTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SinglePlatformTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SinglePlatformTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SinglePlatformTokenValidationError) ErrorName() string {
	return "SinglePlatformTokenValidationError"
}

// Error satisfies the builtin error interface
func (e SinglePlatformTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSinglePlatformToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SinglePlatformTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SinglePlatformTokenValidationError{}

// Validate checks the field values on KickUserOfflineReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickUserOfflineReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickUserOfflineReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickUserOfflineReqMultiError, or nil if none found.
func (m *KickUserOfflineReq) ValidateAll() error {
	return m.validate(true)
}

func (m *KickUserOfflineReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlatformID

	if len(errors) > 0 {
		return KickUserOfflineReqMultiError(errors)
	}

	return nil
}

// KickUserOfflineReqMultiError is an error wrapping multiple validation errors
// returned by KickUserOfflineReq.ValidateAll() if the designated constraints
// aren't met.
type KickUserOfflineReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickUserOfflineReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickUserOfflineReqMultiError) AllErrors() []error { return m }

// KickUserOfflineReqValidationError is the validation error returned by
// KickUserOfflineReq.Validate if the designated constraints aren't met.
type KickUserOfflineReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickUserOfflineReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickUserOfflineReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickUserOfflineReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickUserOfflineReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickUserOfflineReqValidationError) ErrorName() string {
	return "KickUserOfflineReqValidationError"
}

// Error satisfies the builtin error interface
func (e KickUserOfflineReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickUserOfflineReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickUserOfflineReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickUserOfflineReqValidationError{}

// Validate checks the field values on KickUserOfflineResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickUserOfflineResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickUserOfflineResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickUserOfflineRespMultiError, or nil if none found.
func (m *KickUserOfflineResp) ValidateAll() error {
	return m.validate(true)
}

func (m *KickUserOfflineResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return KickUserOfflineRespMultiError(errors)
	}

	return nil
}

// KickUserOfflineRespMultiError is an error wrapping multiple validation
// errors returned by KickUserOfflineResp.ValidateAll() if the designated
// constraints aren't met.
type KickUserOfflineRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickUserOfflineRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickUserOfflineRespMultiError) AllErrors() []error { return m }

// KickUserOfflineRespValidationError is the validation error returned by
// KickUserOfflineResp.Validate if the designated constraints aren't met.
type KickUserOfflineRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickUserOfflineRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickUserOfflineRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickUserOfflineRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickUserOfflineRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickUserOfflineRespValidationError) ErrorName() string {
	return "KickUserOfflineRespValidationError"
}

// Error satisfies the builtin error interface
func (e KickUserOfflineRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickUserOfflineResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickUserOfflineRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickUserOfflineRespValidationError{}

// Validate checks the field values on MultiTerminalLoginCheckReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiTerminalLoginCheckReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiTerminalLoginCheckReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiTerminalLoginCheckReqMultiError, or nil if none found.
func (m *MultiTerminalLoginCheckReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiTerminalLoginCheckReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for PlatformID

	// no validation rules for Token

	if len(errors) > 0 {
		return MultiTerminalLoginCheckReqMultiError(errors)
	}

	return nil
}

// MultiTerminalLoginCheckReqMultiError is an error wrapping multiple
// validation errors returned by MultiTerminalLoginCheckReq.ValidateAll() if
// the designated constraints aren't met.
type MultiTerminalLoginCheckReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiTerminalLoginCheckReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiTerminalLoginCheckReqMultiError) AllErrors() []error { return m }

// MultiTerminalLoginCheckReqValidationError is the validation error returned
// by MultiTerminalLoginCheckReq.Validate if the designated constraints aren't met.
type MultiTerminalLoginCheckReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiTerminalLoginCheckReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiTerminalLoginCheckReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiTerminalLoginCheckReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiTerminalLoginCheckReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiTerminalLoginCheckReqValidationError) ErrorName() string {
	return "MultiTerminalLoginCheckReqValidationError"
}

// Error satisfies the builtin error interface
func (e MultiTerminalLoginCheckReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiTerminalLoginCheckReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiTerminalLoginCheckReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiTerminalLoginCheckReqValidationError{}

// Validate checks the field values on MultiTerminalLoginCheckResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiTerminalLoginCheckResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiTerminalLoginCheckResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiTerminalLoginCheckRespMultiError, or nil if none found.
func (m *MultiTerminalLoginCheckResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiTerminalLoginCheckResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MultiTerminalLoginCheckRespMultiError(errors)
	}

	return nil
}

// MultiTerminalLoginCheckRespMultiError is an error wrapping multiple
// validation errors returned by MultiTerminalLoginCheckResp.ValidateAll() if
// the designated constraints aren't met.
type MultiTerminalLoginCheckRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiTerminalLoginCheckRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiTerminalLoginCheckRespMultiError) AllErrors() []error { return m }

// MultiTerminalLoginCheckRespValidationError is the validation error returned
// by MultiTerminalLoginCheckResp.Validate if the designated constraints
// aren't met.
type MultiTerminalLoginCheckRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiTerminalLoginCheckRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiTerminalLoginCheckRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiTerminalLoginCheckRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiTerminalLoginCheckRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiTerminalLoginCheckRespValidationError) ErrorName() string {
	return "MultiTerminalLoginCheckRespValidationError"
}

// Error satisfies the builtin error interface
func (e MultiTerminalLoginCheckRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiTerminalLoginCheckResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiTerminalLoginCheckRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiTerminalLoginCheckRespValidationError{}

// Validate checks the field values on GetUsersOnlineStatusResp_SuccessDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUsersOnlineStatusResp_SuccessDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUsersOnlineStatusResp_SuccessDetail with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetUsersOnlineStatusResp_SuccessDetailMultiError, or nil if none found.
func (m *GetUsersOnlineStatusResp_SuccessDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersOnlineStatusResp_SuccessDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlatformID

	// no validation rules for ConnID

	// no validation rules for IsBackground

	// no validation rules for Token

	if len(errors) > 0 {
		return GetUsersOnlineStatusResp_SuccessDetailMultiError(errors)
	}

	return nil
}

// GetUsersOnlineStatusResp_SuccessDetailMultiError is an error wrapping
// multiple validation errors returned by
// GetUsersOnlineStatusResp_SuccessDetail.ValidateAll() if the designated
// constraints aren't met.
type GetUsersOnlineStatusResp_SuccessDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersOnlineStatusResp_SuccessDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersOnlineStatusResp_SuccessDetailMultiError) AllErrors() []error { return m }

// GetUsersOnlineStatusResp_SuccessDetailValidationError is the validation
// error returned by GetUsersOnlineStatusResp_SuccessDetail.Validate if the
// designated constraints aren't met.
type GetUsersOnlineStatusResp_SuccessDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersOnlineStatusResp_SuccessDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersOnlineStatusResp_SuccessDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersOnlineStatusResp_SuccessDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersOnlineStatusResp_SuccessDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersOnlineStatusResp_SuccessDetailValidationError) ErrorName() string {
	return "GetUsersOnlineStatusResp_SuccessDetailValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersOnlineStatusResp_SuccessDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersOnlineStatusResp_SuccessDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersOnlineStatusResp_SuccessDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersOnlineStatusResp_SuccessDetailValidationError{}

// Validate checks the field values on GetUsersOnlineStatusResp_FailedDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUsersOnlineStatusResp_FailedDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersOnlineStatusResp_FailedDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUsersOnlineStatusResp_FailedDetailMultiError, or nil if none found.
func (m *GetUsersOnlineStatusResp_FailedDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersOnlineStatusResp_FailedDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUsersOnlineStatusResp_FailedDetailMultiError(errors)
	}

	return nil
}

// GetUsersOnlineStatusResp_FailedDetailMultiError is an error wrapping
// multiple validation errors returned by
// GetUsersOnlineStatusResp_FailedDetail.ValidateAll() if the designated
// constraints aren't met.
type GetUsersOnlineStatusResp_FailedDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersOnlineStatusResp_FailedDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersOnlineStatusResp_FailedDetailMultiError) AllErrors() []error { return m }

// GetUsersOnlineStatusResp_FailedDetailValidationError is the validation error
// returned by GetUsersOnlineStatusResp_FailedDetail.Validate if the
// designated constraints aren't met.
type GetUsersOnlineStatusResp_FailedDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersOnlineStatusResp_FailedDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersOnlineStatusResp_FailedDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersOnlineStatusResp_FailedDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersOnlineStatusResp_FailedDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersOnlineStatusResp_FailedDetailValidationError) ErrorName() string {
	return "GetUsersOnlineStatusResp_FailedDetailValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersOnlineStatusResp_FailedDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersOnlineStatusResp_FailedDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersOnlineStatusResp_FailedDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersOnlineStatusResp_FailedDetailValidationError{}

// Validate checks the field values on GetUsersOnlineStatusResp_SuccessResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUsersOnlineStatusResp_SuccessResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUsersOnlineStatusResp_SuccessResult with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetUsersOnlineStatusResp_SuccessResultMultiError, or nil if none found.
func (m *GetUsersOnlineStatusResp_SuccessResult) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersOnlineStatusResp_SuccessResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Status

	for idx, item := range m.GetDetailPlatformStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersOnlineStatusResp_SuccessResultValidationError{
						field:  fmt.Sprintf("DetailPlatformStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersOnlineStatusResp_SuccessResultValidationError{
						field:  fmt.Sprintf("DetailPlatformStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersOnlineStatusResp_SuccessResultValidationError{
					field:  fmt.Sprintf("DetailPlatformStatus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersOnlineStatusResp_SuccessResultMultiError(errors)
	}

	return nil
}

// GetUsersOnlineStatusResp_SuccessResultMultiError is an error wrapping
// multiple validation errors returned by
// GetUsersOnlineStatusResp_SuccessResult.ValidateAll() if the designated
// constraints aren't met.
type GetUsersOnlineStatusResp_SuccessResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersOnlineStatusResp_SuccessResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersOnlineStatusResp_SuccessResultMultiError) AllErrors() []error { return m }

// GetUsersOnlineStatusResp_SuccessResultValidationError is the validation
// error returned by GetUsersOnlineStatusResp_SuccessResult.Validate if the
// designated constraints aren't met.
type GetUsersOnlineStatusResp_SuccessResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersOnlineStatusResp_SuccessResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersOnlineStatusResp_SuccessResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersOnlineStatusResp_SuccessResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersOnlineStatusResp_SuccessResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersOnlineStatusResp_SuccessResultValidationError) ErrorName() string {
	return "GetUsersOnlineStatusResp_SuccessResultValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersOnlineStatusResp_SuccessResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersOnlineStatusResp_SuccessResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersOnlineStatusResp_SuccessResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersOnlineStatusResp_SuccessResultValidationError{}
