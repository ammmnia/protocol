// Copyright © 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.2
// source: openchat/admin/admin.proto

package admin

import (
	common "github.com/ammmnia/protocol/openchat/common"
	sdkws "github.com/ammmnia/protocol/openchat/sdkws"
	wrapperspb "github.com/ammmnia/protocol/openchat/wrapperspb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// login
type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{0}
}

func (x *LoginReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccount string `protobuf:"bytes,1,opt,name=adminAccount,proto3" json:"adminAccount,omitempty"`
	AdminToken   string `protobuf:"bytes,2,opt,name=adminToken,proto3" json:"adminToken,omitempty"`
	Nickname     string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL      string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Level        int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	AdminUserID  string `protobuf:"bytes,6,opt,name=adminUserID,proto3" json:"adminUserID,omitempty"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{1}
}

func (x *LoginResp) GetAdminAccount() string {
	if x != nil {
		return x.AdminAccount
	}
	return ""
}

func (x *LoginResp) GetAdminToken() string {
	if x != nil {
		return x.AdminToken
	}
	return ""
}

func (x *LoginResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *LoginResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *LoginResp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LoginResp) GetAdminUserID() string {
	if x != nil {
		return x.AdminUserID
	}
	return ""
}

type LogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *LogoutReq) Reset() {
	*x = LogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReq) ProtoMessage() {}

func (x *LogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReq.ProtoReflect.Descriptor instead.
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{2}
}

func (x *LogoutReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type LogoutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogoutResp) Reset() {
	*x = LogoutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResp) ProtoMessage() {}

func (x *LogoutResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResp.ProtoReflect.Descriptor instead.
func (*LogoutResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{3}
}

type AddAdminAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"` //用户名
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"` //姓名
	RoleId   uint64 `protobuf:"varint,5,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Desc     string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Status   uint32 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddAdminAccountReq) Reset() {
	*x = AddAdminAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminAccountReq) ProtoMessage() {}

func (x *AddAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminAccountReq.ProtoReflect.Descriptor instead.
func (*AddAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{4}
}

func (x *AddAdminAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AddAdminAccountReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddAdminAccountReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddAdminAccountReq) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *AddAdminAccountReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *AddAdminAccountReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type AddAdminAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddAdminAccountResp) Reset() {
	*x = AddAdminAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminAccountResp) ProtoMessage() {}

func (x *AddAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminAccountResp.ProtoReflect.Descriptor instead.
func (*AddAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{5}
}

type AdminUpdateInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Account  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Password *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Username *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Status   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	RoleId   *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Desc     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *AdminUpdateInfoReq) Reset() {
	*x = AdminUpdateInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateInfoReq) ProtoMessage() {}

func (x *AdminUpdateInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateInfoReq.ProtoReflect.Descriptor instead.
func (*AdminUpdateInfoReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{6}
}

func (x *AdminUpdateInfoReq) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetAccount() *wrapperspb.StringValue {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetStatus() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetRoleId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.RoleId
	}
	return nil
}

func (x *AdminUpdateInfoReq) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

type AdminUpdateInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Account  string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL  string `protobuf:"bytes,5,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
}

func (x *AdminUpdateInfoResp) Reset() {
	*x = AdminUpdateInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateInfoResp) ProtoMessage() {}

func (x *AdminUpdateInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateInfoResp.ProtoReflect.Descriptor instead.
func (*AdminUpdateInfoResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{7}
}

func (x *AdminUpdateInfoResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AdminUpdateInfoResp) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminUpdateInfoResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminUpdateInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AdminUpdateInfoResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

type ChangePasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ChangePasswordReq) Reset() {
	*x = ChangePasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordReq) ProtoMessage() {}

func (x *ChangePasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordReq.ProtoReflect.Descriptor instead.
func (*ChangePasswordReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{8}
}

func (x *ChangePasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ChangePasswordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangePasswordResp) Reset() {
	*x = ChangePasswordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordResp) ProtoMessage() {}

func (x *ChangePasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordResp.ProtoReflect.Descriptor instead.
func (*ChangePasswordResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{9}
}

type GetAdminInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetAdminInfoReq) Reset() {
	*x = GetAdminInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminInfoReq) ProtoMessage() {}

func (x *GetAdminInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminInfoReq.ProtoReflect.Descriptor instead.
func (*GetAdminInfoReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{10}
}

func (x *GetAdminInfoReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ChangeAdminPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CurrentPassword string `protobuf:"bytes,2,opt,name=currentPassword,proto3" json:"currentPassword,omitempty"`
	NewPassword     string `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ChangeAdminPasswordReq) Reset() {
	*x = ChangeAdminPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAdminPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdminPasswordReq) ProtoMessage() {}

func (x *ChangeAdminPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdminPasswordReq.ProtoReflect.Descriptor instead.
func (*ChangeAdminPasswordReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{11}
}

func (x *ChangeAdminPasswordReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ChangeAdminPasswordReq) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *ChangeAdminPasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type ChangeAdminPasswordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeAdminPasswordResp) Reset() {
	*x = ChangeAdminPasswordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAdminPasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAdminPasswordResp) ProtoMessage() {}

func (x *ChangeAdminPasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAdminPasswordResp.ProtoReflect.Descriptor instead.
func (*ChangeAdminPasswordResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{12}
}

type DelAdminAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *DelAdminAccountReq) Reset() {
	*x = DelAdminAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAdminAccountReq) ProtoMessage() {}

func (x *DelAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAdminAccountReq.ProtoReflect.Descriptor instead.
func (*DelAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{13}
}

func (x *DelAdminAccountReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type DelAdminAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelAdminAccountResp) Reset() {
	*x = DelAdminAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAdminAccountResp) ProtoMessage() {}

func (x *DelAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAdminAccountResp.ProtoReflect.Descriptor instead.
func (*DelAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{14}
}

type SearchAdminAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	UserName   string                   `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	RoleId     uint64                   `protobuf:"varint,4,opt,name=roleId,proto3" json:"roleId,omitempty"`
	OpUserName string                   `protobuf:"bytes,5,opt,name=opUserName,proto3" json:"opUserName,omitempty"`
	Status     uint32                   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	StartTime  string                   `protobuf:"bytes,7,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    string                   `protobuf:"bytes,8,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *SearchAdminAccountReq) Reset() {
	*x = SearchAdminAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminAccountReq) ProtoMessage() {}

func (x *SearchAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminAccountReq.ProtoReflect.Descriptor instead.
func (*SearchAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{15}
}

func (x *SearchAdminAccountReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchAdminAccountReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SearchAdminAccountReq) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *SearchAdminAccountReq) GetOpUserName() string {
	if x != nil {
		return x.OpUserName
	}
	return ""
}

func (x *SearchAdminAccountReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchAdminAccountReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SearchAdminAccountReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type SearchAdminAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         uint64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Pages         uint64              `protobuf:"varint,2,opt,name=pages,proto3" json:"pages,omitempty"`
	AdminAccounts []*GetAdminInfoResp `protobuf:"bytes,3,rep,name=adminAccounts,proto3" json:"adminAccounts,omitempty"`
}

func (x *SearchAdminAccountResp) Reset() {
	*x = SearchAdminAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAdminAccountResp) ProtoMessage() {}

func (x *SearchAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAdminAccountResp.ProtoReflect.Descriptor instead.
func (*SearchAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{16}
}

func (x *SearchAdminAccountResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchAdminAccountResp) GetPages() uint64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *SearchAdminAccountResp) GetAdminAccounts() []*GetAdminInfoResp {
	if x != nil {
		return x.AdminAccounts
	}
	return nil
}

type GetAdminInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	UserName   string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	FaceURL    string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Nickname   string `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserID     string `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	Desc       string `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	CreateTime int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	RoleId     uint64 `protobuf:"varint,9,opt,name=roleId,proto3" json:"roleId,omitempty"`
	Status     uint32 `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	OpUserName string `protobuf:"bytes,11,opt,name=opUserName,proto3" json:"opUserName,omitempty"`
	OpTime     int64  `protobuf:"varint,12,opt,name=opTime,proto3" json:"opTime,omitempty"`
}

func (x *GetAdminInfoResp) Reset() {
	*x = GetAdminInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminInfoResp) ProtoMessage() {}

func (x *GetAdminInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminInfoResp.ProtoReflect.Descriptor instead.
func (*GetAdminInfoResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{17}
}

func (x *GetAdminInfoResp) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetAdminInfoResp) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetAdminInfoResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *GetAdminInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GetAdminInfoResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetAdminInfoResp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GetAdminInfoResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetAdminInfoResp) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *GetAdminInfoResp) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAdminInfoResp) GetOpUserName() string {
	if x != nil {
		return x.OpUserName
	}
	return ""
}

func (x *GetAdminInfoResp) GetOpTime() int64 {
	if x != nil {
		return x.OpTime
	}
	return 0
}

type DisableAdminAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DisableAdminAccountReq) Reset() {
	*x = DisableAdminAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAdminAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAdminAccountReq) ProtoMessage() {}

func (x *DisableAdminAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAdminAccountReq.ProtoReflect.Descriptor instead.
func (*DisableAdminAccountReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{18}
}

func (x *DisableAdminAccountReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DisableAdminAccountReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type DisableAdminAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableAdminAccountResp) Reset() {
	*x = DisableAdminAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAdminAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAdminAccountResp) ProtoMessage() {}

func (x *DisableAdminAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAdminAccountResp.ProtoReflect.Descriptor instead.
func (*DisableAdminAccountResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{19}
}

type AddDefaultFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *AddDefaultFriendReq) Reset() {
	*x = AddDefaultFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultFriendReq) ProtoMessage() {}

func (x *AddDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*AddDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{20}
}

func (x *AddDefaultFriendReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type AddDefaultFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDefaultFriendResp) Reset() {
	*x = AddDefaultFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultFriendResp) ProtoMessage() {}

func (x *AddDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*AddDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{21}
}

type DelDefaultFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *DelDefaultFriendReq) Reset() {
	*x = DelDefaultFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultFriendReq) ProtoMessage() {}

func (x *DelDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*DelDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{22}
}

func (x *DelDefaultFriendReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type DelDefaultFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelDefaultFriendResp) Reset() {
	*x = DelDefaultFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultFriendResp) ProtoMessage() {}

func (x *DelDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*DelDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{23}
}

type FindDefaultFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindDefaultFriendReq) Reset() {
	*x = FindDefaultFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultFriendReq) ProtoMessage() {}

func (x *FindDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*FindDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{24}
}

type FindDefaultFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *FindDefaultFriendResp) Reset() {
	*x = FindDefaultFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultFriendResp) ProtoMessage() {}

func (x *FindDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*FindDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{25}
}

func (x *FindDefaultFriendResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type SearchDefaultFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchDefaultFriendReq) Reset() {
	*x = SearchDefaultFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultFriendReq) ProtoMessage() {}

func (x *SearchDefaultFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultFriendReq.ProtoReflect.Descriptor instead.
func (*SearchDefaultFriendReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{26}
}

func (x *SearchDefaultFriendReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchDefaultFriendReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DefaultFriendAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CreateTime int64                  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	User       *common.UserPublicInfo `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *DefaultFriendAttribute) Reset() {
	*x = DefaultFriendAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultFriendAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultFriendAttribute) ProtoMessage() {}

func (x *DefaultFriendAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultFriendAttribute.ProtoReflect.Descriptor instead.
func (*DefaultFriendAttribute) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{27}
}

func (x *DefaultFriendAttribute) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DefaultFriendAttribute) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DefaultFriendAttribute) GetUser() *common.UserPublicInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type SearchDefaultFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Users []*DefaultFriendAttribute `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *SearchDefaultFriendResp) Reset() {
	*x = SearchDefaultFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultFriendResp) ProtoMessage() {}

func (x *SearchDefaultFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultFriendResp.ProtoReflect.Descriptor instead.
func (*SearchDefaultFriendResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{28}
}

func (x *SearchDefaultFriendResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchDefaultFriendResp) GetUsers() []*DefaultFriendAttribute {
	if x != nil {
		return x.Users
	}
	return nil
}

type AddDefaultGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *AddDefaultGroupReq) Reset() {
	*x = AddDefaultGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultGroupReq) ProtoMessage() {}

func (x *AddDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*AddDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{29}
}

func (x *AddDefaultGroupReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type AddDefaultGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDefaultGroupResp) Reset() {
	*x = AddDefaultGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultGroupResp) ProtoMessage() {}

func (x *AddDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*AddDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{30}
}

type DelDefaultGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *DelDefaultGroupReq) Reset() {
	*x = DelDefaultGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultGroupReq) ProtoMessage() {}

func (x *DelDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*DelDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{31}
}

func (x *DelDefaultGroupReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type DelDefaultGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelDefaultGroupResp) Reset() {
	*x = DelDefaultGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDefaultGroupResp) ProtoMessage() {}

func (x *DelDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*DelDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{32}
}

type FindDefaultGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindDefaultGroupReq) Reset() {
	*x = FindDefaultGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultGroupReq) ProtoMessage() {}

func (x *FindDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*FindDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{33}
}

type FindDefaultGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *FindDefaultGroupResp) Reset() {
	*x = FindDefaultGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDefaultGroupResp) ProtoMessage() {}

func (x *FindDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*FindDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{34}
}

func (x *FindDefaultGroupResp) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type SearchDefaultGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchDefaultGroupReq) Reset() {
	*x = SearchDefaultGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultGroupReq) ProtoMessage() {}

func (x *SearchDefaultGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultGroupReq.ProtoReflect.Descriptor instead.
func (*SearchDefaultGroupReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{35}
}

func (x *SearchDefaultGroupReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchDefaultGroupReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID    string           `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	CreateTime int64            `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Group      *sdkws.GroupInfo `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupAttribute) Reset() {
	*x = GroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAttribute) ProtoMessage() {}

func (x *GroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAttribute.ProtoReflect.Descriptor instead.
func (*GroupAttribute) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{36}
}

func (x *GroupAttribute) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupAttribute) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GroupAttribute) GetGroup() *sdkws.GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

type SearchDefaultGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	GroupIDs []string `protobuf:"bytes,2,rep,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *SearchDefaultGroupResp) Reset() {
	*x = SearchDefaultGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultGroupResp) ProtoMessage() {}

func (x *SearchDefaultGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultGroupResp.ProtoReflect.Descriptor instead.
func (*SearchDefaultGroupResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{37}
}

func (x *SearchDefaultGroupResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchDefaultGroupResp) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type AddInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *AddInvitationCodeReq) Reset() {
	*x = AddInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInvitationCodeReq) ProtoMessage() {}

func (x *AddInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*AddInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{38}
}

func (x *AddInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type AddInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddInvitationCodeResp) Reset() {
	*x = AddInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInvitationCodeResp) ProtoMessage() {}

func (x *AddInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*AddInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{39}
}

type GenInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len   int32  `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	Num   int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Chars string `protobuf:"bytes,3,opt,name=chars,proto3" json:"chars,omitempty"`
}

func (x *GenInvitationCodeReq) Reset() {
	*x = GenInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenInvitationCodeReq) ProtoMessage() {}

func (x *GenInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*GenInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{40}
}

func (x *GenInvitationCodeReq) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *GenInvitationCodeReq) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GenInvitationCodeReq) GetChars() string {
	if x != nil {
		return x.Chars
	}
	return ""
}

type GenInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenInvitationCodeResp) Reset() {
	*x = GenInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenInvitationCodeResp) ProtoMessage() {}

func (x *GenInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*GenInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{41}
}

type FindInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *FindInvitationCodeReq) Reset() {
	*x = FindInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInvitationCodeReq) ProtoMessage() {}

func (x *FindInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*FindInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{42}
}

func (x *FindInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type FindInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []*InvitationRegister `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *FindInvitationCodeResp) Reset() {
	*x = FindInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindInvitationCodeResp) ProtoMessage() {}

func (x *FindInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*FindInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{43}
}

func (x *FindInvitationCodeResp) GetCodes() []*InvitationRegister {
	if x != nil {
		return x.Codes
	}
	return nil
}

type UseInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UseInvitationCodeReq) Reset() {
	*x = UseInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseInvitationCodeReq) ProtoMessage() {}

func (x *UseInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*UseInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{44}
}

func (x *UseInvitationCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UseInvitationCodeReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UseInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UseInvitationCodeResp) Reset() {
	*x = UseInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseInvitationCodeResp) ProtoMessage() {}

func (x *UseInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*UseInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{45}
}

type DelInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *DelInvitationCodeReq) Reset() {
	*x = DelInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelInvitationCodeReq) ProtoMessage() {}

func (x *DelInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*DelInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{46}
}

func (x *DelInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type DelInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelInvitationCodeResp) Reset() {
	*x = DelInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelInvitationCodeResp) ProtoMessage() {}

func (x *DelInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*DelInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{47}
}

type InvitationRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCode string                 `protobuf:"bytes,1,opt,name=invitationCode,proto3" json:"invitationCode,omitempty"`
	CreateTime     int64                  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UsedUserID     string                 `protobuf:"bytes,3,opt,name=usedUserID,proto3" json:"usedUserID,omitempty"`
	UsedUser       *common.UserPublicInfo `protobuf:"bytes,4,opt,name=usedUser,proto3" json:"usedUser,omitempty"`
}

func (x *InvitationRegister) Reset() {
	*x = InvitationRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationRegister) ProtoMessage() {}

func (x *InvitationRegister) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationRegister.ProtoReflect.Descriptor instead.
func (*InvitationRegister) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{48}
}

func (x *InvitationRegister) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *InvitationRegister) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *InvitationRegister) GetUsedUserID() string {
	if x != nil {
		return x.UsedUserID
	}
	return ""
}

func (x *InvitationRegister) GetUsedUser() *common.UserPublicInfo {
	if x != nil {
		return x.UsedUser
	}
	return nil
}

type SearchInvitationCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     int32                    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	UserIDs    []string                 `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
	Codes      []string                 `protobuf:"bytes,3,rep,name=codes,proto3" json:"codes,omitempty"`
	Keyword    string                   `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchInvitationCodeReq) Reset() {
	*x = SearchInvitationCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInvitationCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInvitationCodeReq) ProtoMessage() {}

func (x *SearchInvitationCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInvitationCodeReq.ProtoReflect.Descriptor instead.
func (*SearchInvitationCodeReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{49}
}

func (x *SearchInvitationCodeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchInvitationCodeReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *SearchInvitationCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *SearchInvitationCodeReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchInvitationCodeReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchInvitationCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*InvitationRegister `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchInvitationCodeResp) Reset() {
	*x = SearchInvitationCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInvitationCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInvitationCodeResp) ProtoMessage() {}

func (x *SearchInvitationCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInvitationCodeResp.ProtoReflect.Descriptor instead.
func (*SearchInvitationCodeResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{50}
}

func (x *SearchInvitationCodeResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchInvitationCodeResp) GetList() []*InvitationRegister {
	if x != nil {
		return x.List
	}
	return nil
}

type SearchUserIPLimitLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchUserIPLimitLoginReq) Reset() {
	*x = SearchUserIPLimitLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserIPLimitLoginReq) ProtoMessage() {}

func (x *SearchUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*SearchUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{51}
}

func (x *SearchUserIPLimitLoginReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserIPLimitLoginReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type LimitUserLoginIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Ip         string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	CreateTime int64                  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	User       *common.UserPublicInfo `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *LimitUserLoginIP) Reset() {
	*x = LimitUserLoginIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitUserLoginIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitUserLoginIP) ProtoMessage() {}

func (x *LimitUserLoginIP) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitUserLoginIP.ProtoReflect.Descriptor instead.
func (*LimitUserLoginIP) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{52}
}

func (x *LimitUserLoginIP) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *LimitUserLoginIP) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LimitUserLoginIP) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *LimitUserLoginIP) GetUser() *common.UserPublicInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type SearchUserIPLimitLoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  uint32              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Limits []*LimitUserLoginIP `protobuf:"bytes,2,rep,name=limits,proto3" json:"limits,omitempty"`
}

func (x *SearchUserIPLimitLoginResp) Reset() {
	*x = SearchUserIPLimitLoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserIPLimitLoginResp) ProtoMessage() {}

func (x *SearchUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*SearchUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{53}
}

func (x *SearchUserIPLimitLoginResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchUserIPLimitLoginResp) GetLimits() []*LimitUserLoginIP {
	if x != nil {
		return x.Limits
	}
	return nil
}

type UserIPLimitLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *UserIPLimitLogin) Reset() {
	*x = UserIPLimitLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIPLimitLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIPLimitLogin) ProtoMessage() {}

func (x *UserIPLimitLogin) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIPLimitLogin.ProtoReflect.Descriptor instead.
func (*UserIPLimitLogin) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{54}
}

func (x *UserIPLimitLogin) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserIPLimitLogin) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type AddUserIPLimitLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits []*UserIPLimitLogin `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
}

func (x *AddUserIPLimitLoginReq) Reset() {
	*x = AddUserIPLimitLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserIPLimitLoginReq) ProtoMessage() {}

func (x *AddUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*AddUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{55}
}

func (x *AddUserIPLimitLoginReq) GetLimits() []*UserIPLimitLogin {
	if x != nil {
		return x.Limits
	}
	return nil
}

type AddUserIPLimitLoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddUserIPLimitLoginResp) Reset() {
	*x = AddUserIPLimitLoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserIPLimitLoginResp) ProtoMessage() {}

func (x *AddUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*AddUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{56}
}

type DelUserIPLimitLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits []*UserIPLimitLogin `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
}

func (x *DelUserIPLimitLoginReq) Reset() {
	*x = DelUserIPLimitLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserIPLimitLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserIPLimitLoginReq) ProtoMessage() {}

func (x *DelUserIPLimitLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserIPLimitLoginReq.ProtoReflect.Descriptor instead.
func (*DelUserIPLimitLoginReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{57}
}

func (x *DelUserIPLimitLoginReq) GetLimits() []*UserIPLimitLogin {
	if x != nil {
		return x.Limits
	}
	return nil
}

type DelUserIPLimitLoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelUserIPLimitLoginResp) Reset() {
	*x = DelUserIPLimitLoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserIPLimitLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserIPLimitLoginResp) ProtoMessage() {}

func (x *DelUserIPLimitLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserIPLimitLoginResp.ProtoReflect.Descriptor instead.
func (*DelUserIPLimitLoginResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{58}
}

type IPForbidden struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip            string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	LimitRegister bool   `protobuf:"varint,2,opt,name=limitRegister,proto3" json:"limitRegister,omitempty"`
	LimitLogin    bool   `protobuf:"varint,3,opt,name=limitLogin,proto3" json:"limitLogin,omitempty"`
	CreateTime    int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *IPForbidden) Reset() {
	*x = IPForbidden{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPForbidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPForbidden) ProtoMessage() {}

func (x *IPForbidden) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPForbidden.ProtoReflect.Descriptor instead.
func (*IPForbidden) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{59}
}

func (x *IPForbidden) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPForbidden) GetLimitRegister() bool {
	if x != nil {
		return x.LimitRegister
	}
	return false
}

func (x *IPForbidden) GetLimitLogin() bool {
	if x != nil {
		return x.LimitLogin
	}
	return false
}

func (x *IPForbidden) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type IPForbiddenAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip            string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	LimitRegister bool   `protobuf:"varint,2,opt,name=limitRegister,proto3" json:"limitRegister,omitempty"`
	LimitLogin    bool   `protobuf:"varint,3,opt,name=limitLogin,proto3" json:"limitLogin,omitempty"`
}

func (x *IPForbiddenAdd) Reset() {
	*x = IPForbiddenAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPForbiddenAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPForbiddenAdd) ProtoMessage() {}

func (x *IPForbiddenAdd) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPForbiddenAdd.ProtoReflect.Descriptor instead.
func (*IPForbiddenAdd) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{60}
}

func (x *IPForbiddenAdd) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPForbiddenAdd) GetLimitRegister() bool {
	if x != nil {
		return x.LimitRegister
	}
	return false
}

func (x *IPForbiddenAdd) GetLimitLogin() bool {
	if x != nil {
		return x.LimitLogin
	}
	return false
}

type SearchIPForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Status     int32                    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchIPForbiddenReq) Reset() {
	*x = SearchIPForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIPForbiddenReq) ProtoMessage() {}

func (x *SearchIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*SearchIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{61}
}

func (x *SearchIPForbiddenReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchIPForbiddenReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchIPForbiddenReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchIPForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      uint32         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Forbiddens []*IPForbidden `protobuf:"bytes,2,rep,name=forbiddens,proto3" json:"forbiddens,omitempty"`
}

func (x *SearchIPForbiddenResp) Reset() {
	*x = SearchIPForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIPForbiddenResp) ProtoMessage() {}

func (x *SearchIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*SearchIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{62}
}

func (x *SearchIPForbiddenResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchIPForbiddenResp) GetForbiddens() []*IPForbidden {
	if x != nil {
		return x.Forbiddens
	}
	return nil
}

type AddIPForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forbiddens []*IPForbiddenAdd `protobuf:"bytes,1,rep,name=forbiddens,proto3" json:"forbiddens,omitempty"`
}

func (x *AddIPForbiddenReq) Reset() {
	*x = AddIPForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIPForbiddenReq) ProtoMessage() {}

func (x *AddIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*AddIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{63}
}

func (x *AddIPForbiddenReq) GetForbiddens() []*IPForbiddenAdd {
	if x != nil {
		return x.Forbiddens
	}
	return nil
}

type AddIPForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddIPForbiddenResp) Reset() {
	*x = AddIPForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIPForbiddenResp) ProtoMessage() {}

func (x *AddIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*AddIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{64}
}

type DelIPForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *DelIPForbiddenReq) Reset() {
	*x = DelIPForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelIPForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelIPForbiddenReq) ProtoMessage() {}

func (x *DelIPForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelIPForbiddenReq.ProtoReflect.Descriptor instead.
func (*DelIPForbiddenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{65}
}

func (x *DelIPForbiddenReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type DelIPForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelIPForbiddenResp) Reset() {
	*x = DelIPForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelIPForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelIPForbiddenResp) ProtoMessage() {}

func (x *DelIPForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelIPForbiddenResp.ProtoReflect.Descriptor instead.
func (*DelIPForbiddenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{66}
}

// ################### User Limit ###################
type CheckRegisterForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *CheckRegisterForbiddenReq) Reset() {
	*x = CheckRegisterForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRegisterForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRegisterForbiddenReq) ProtoMessage() {}

func (x *CheckRegisterForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRegisterForbiddenReq.ProtoReflect.Descriptor instead.
func (*CheckRegisterForbiddenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{67}
}

func (x *CheckRegisterForbiddenReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CheckRegisterForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckRegisterForbiddenResp) Reset() {
	*x = CheckRegisterForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRegisterForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRegisterForbiddenResp) ProtoMessage() {}

func (x *CheckRegisterForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRegisterForbiddenResp.ProtoReflect.Descriptor instead.
func (*CheckRegisterForbiddenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{68}
}

type CheckLoginForbiddenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CheckLoginForbiddenReq) Reset() {
	*x = CheckLoginForbiddenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginForbiddenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginForbiddenReq) ProtoMessage() {}

func (x *CheckLoginForbiddenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginForbiddenReq.ProtoReflect.Descriptor instead.
func (*CheckLoginForbiddenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{69}
}

func (x *CheckLoginForbiddenReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CheckLoginForbiddenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CheckLoginForbiddenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckLoginForbiddenResp) Reset() {
	*x = CheckLoginForbiddenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginForbiddenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginForbiddenResp) ProtoMessage() {}

func (x *CheckLoginForbiddenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginForbiddenResp.ProtoReflect.Descriptor instead.
func (*CheckLoginForbiddenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{70}
}

// ################### login out ###################
type CancellationUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CancellationUserReq) Reset() {
	*x = CancellationUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancellationUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationUserReq) ProtoMessage() {}

func (x *CancellationUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationUserReq.ProtoReflect.Descriptor instead.
func (*CancellationUserReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{71}
}

func (x *CancellationUserReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CancellationUserReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CancellationUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancellationUserResp) Reset() {
	*x = CancellationUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancellationUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationUserResp) ProtoMessage() {}

func (x *CancellationUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationUserResp.ProtoReflect.Descriptor instead.
func (*CancellationUserResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{72}
}

// ################### Block User, Unblock User ###################
type BlockUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *BlockUserReq) Reset() {
	*x = BlockUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserReq) ProtoMessage() {}

func (x *BlockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserReq.ProtoReflect.Descriptor instead.
func (*BlockUserReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{73}
}

func (x *BlockUserReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockUserReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BlockUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockUserResp) Reset() {
	*x = BlockUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResp) ProtoMessage() {}

func (x *BlockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResp.ProtoReflect.Descriptor instead.
func (*BlockUserResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{74}
}

type UnblockUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *UnblockUserReq) Reset() {
	*x = UnblockUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserReq) ProtoMessage() {}

func (x *UnblockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserReq.ProtoReflect.Descriptor instead.
func (*UnblockUserReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{75}
}

func (x *UnblockUserReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type UnblockUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnblockUserResp) Reset() {
	*x = UnblockUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserResp) ProtoMessage() {}

func (x *UnblockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserResp.ProtoReflect.Descriptor instead.
func (*UnblockUserResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{76}
}

type SearchBlockUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchBlockUserReq) Reset() {
	*x = SearchBlockUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBlockUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlockUserReq) ProtoMessage() {}

func (x *SearchBlockUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlockUserReq.ProtoReflect.Descriptor instead.
func (*SearchBlockUserReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{77}
}

func (x *SearchBlockUserReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchBlockUserReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type BlockUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Account     string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	AreaCode    string `protobuf:"bytes,4,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Nickname    string `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL     string `protobuf:"bytes,7,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Gender      int32  `protobuf:"varint,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Reason      string `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	OpUserID    string `protobuf:"bytes,10,opt,name=opUserID,proto3" json:"opUserID,omitempty"`
	CreateTime  int64  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *BlockUserInfo) Reset() {
	*x = BlockUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserInfo) ProtoMessage() {}

func (x *BlockUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserInfo.ProtoReflect.Descriptor instead.
func (*BlockUserInfo) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{78}
}

func (x *BlockUserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockUserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *BlockUserInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BlockUserInfo) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *BlockUserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BlockUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BlockUserInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *BlockUserInfo) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *BlockUserInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BlockUserInfo) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *BlockUserInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type SearchBlockUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Users []*BlockUserInfo `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *SearchBlockUserResp) Reset() {
	*x = SearchBlockUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBlockUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBlockUserResp) ProtoMessage() {}

func (x *SearchBlockUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBlockUserResp.ProtoReflect.Descriptor instead.
func (*SearchBlockUserResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{79}
}

func (x *SearchBlockUserResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchBlockUserResp) GetUsers() []*BlockUserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type FindUserBlockInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *FindUserBlockInfoReq) Reset() {
	*x = FindUserBlockInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserBlockInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserBlockInfoReq) ProtoMessage() {}

func (x *FindUserBlockInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserBlockInfoReq.ProtoReflect.Descriptor instead.
func (*FindUserBlockInfoReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{80}
}

func (x *FindUserBlockInfoReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	OpUserID   string `protobuf:"bytes,3,opt,name=opUserID,proto3" json:"opUserID,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{81}
}

func (x *BlockInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BlockInfo) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *BlockInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type FindUserBlockInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*BlockInfo `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *FindUserBlockInfoResp) Reset() {
	*x = FindUserBlockInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserBlockInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserBlockInfoResp) ProtoMessage() {}

func (x *FindUserBlockInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserBlockInfoResp.ProtoReflect.Descriptor instead.
func (*FindUserBlockInfoResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{82}
}

func (x *FindUserBlockInfoResp) GetBlocks() []*BlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type CreateTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	UserType int32  `protobuf:"varint,32,opt,name=userType,proto3" json:"userType,omitempty"`
}

func (x *CreateTokenReq) Reset() {
	*x = CreateTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenReq) ProtoMessage() {}

func (x *CreateTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenReq.ProtoReflect.Descriptor instead.
func (*CreateTokenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{83}
}

func (x *CreateTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateTokenReq) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

type CreateTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateTokenResp) Reset() {
	*x = CreateTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenResp) ProtoMessage() {}

func (x *CreateTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenResp.ProtoReflect.Descriptor instead.
func (*CreateTokenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{84}
}

func (x *CreateTokenResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ParseTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ParseTokenReq) Reset() {
	*x = ParseTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTokenReq) ProtoMessage() {}

func (x *ParseTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTokenReq.ProtoReflect.Descriptor instead.
func (*ParseTokenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{85}
}

func (x *ParseTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ParseTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID            string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	UserType          int32  `protobuf:"varint,2,opt,name=userType,proto3" json:"userType,omitempty"`
	ExpireTimeSeconds int64  `protobuf:"varint,3,opt,name=expireTimeSeconds,proto3" json:"expireTimeSeconds,omitempty"`
}

func (x *ParseTokenResp) Reset() {
	*x = ParseTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTokenResp) ProtoMessage() {}

func (x *ParseTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTokenResp.ProtoReflect.Descriptor instead.
func (*ParseTokenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{86}
}

func (x *ParseTokenResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ParseTokenResp) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *ParseTokenResp) GetExpireTimeSeconds() int64 {
	if x != nil {
		return x.ExpireTimeSeconds
	}
	return 0
}

type InvalidateTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *InvalidateTokenReq) Reset() {
	*x = InvalidateTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateTokenReq) ProtoMessage() {}

func (x *InvalidateTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateTokenReq.ProtoReflect.Descriptor instead.
func (*InvalidateTokenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{87}
}

func (x *InvalidateTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type InvalidateTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidateTokenResp) Reset() {
	*x = InvalidateTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateTokenResp) ProtoMessage() {}

func (x *InvalidateTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateTokenResp.ProtoReflect.Descriptor instead.
func (*InvalidateTokenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{88}
}

type AddAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AppID      string `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID,omitempty"`
	Icon       string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Url        string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Md5        string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Size       int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Version    string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	Priority   uint32 `protobuf:"varint,9,opt,name=priority,proto3" json:"priority,omitempty"`
	Status     uint32 `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime int64  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *AddAppletReq) Reset() {
	*x = AddAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAppletReq) ProtoMessage() {}

func (x *AddAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAppletReq.ProtoReflect.Descriptor instead.
func (*AddAppletReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{89}
}

func (x *AddAppletReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddAppletReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddAppletReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AddAppletReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddAppletReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddAppletReq) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *AddAppletReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddAppletReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AddAppletReq) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AddAppletReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddAppletReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AddAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddAppletResp) Reset() {
	*x = AddAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAppletResp) ProtoMessage() {}

func (x *AddAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAppletResp.ProtoReflect.Descriptor instead.
func (*AddAppletResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{90}
}

type DelAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppletIds []string `protobuf:"bytes,1,rep,name=appletIds,proto3" json:"appletIds,omitempty"`
}

func (x *DelAppletReq) Reset() {
	*x = DelAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAppletReq) ProtoMessage() {}

func (x *DelAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAppletReq.ProtoReflect.Descriptor instead.
func (*DelAppletReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{91}
}

func (x *DelAppletReq) GetAppletIds() []string {
	if x != nil {
		return x.AppletIds
	}
	return nil
}

type DelAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelAppletResp) Reset() {
	*x = DelAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAppletResp) ProtoMessage() {}

func (x *DelAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAppletResp.ProtoReflect.Descriptor instead.
func (*DelAppletResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{92}
}

type UpdateAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AppID      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID,omitempty"`
	Icon       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Url        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Md5        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Size       *wrapperspb.Int64Value  `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	Version    *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	Priority   *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=priority,proto3" json:"priority,omitempty"`
	Status     *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime *wrapperspb.Int64Value  `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *UpdateAppletReq) Reset() {
	*x = UpdateAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppletReq) ProtoMessage() {}

func (x *UpdateAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppletReq.ProtoReflect.Descriptor instead.
func (*UpdateAppletReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateAppletReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAppletReq) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateAppletReq) GetAppID() *wrapperspb.StringValue {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *UpdateAppletReq) GetIcon() *wrapperspb.StringValue {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *UpdateAppletReq) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *UpdateAppletReq) GetMd5() *wrapperspb.StringValue {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *UpdateAppletReq) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *UpdateAppletReq) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *UpdateAppletReq) GetPriority() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UpdateAppletReq) GetStatus() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateAppletReq) GetCreateTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type UpdateAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAppletResp) Reset() {
	*x = UpdateAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppletResp) ProtoMessage() {}

func (x *UpdateAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppletResp.ProtoReflect.Descriptor instead.
func (*UpdateAppletResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{94}
}

type FindAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAppletReq) Reset() {
	*x = FindAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAppletReq) ProtoMessage() {}

func (x *FindAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAppletReq.ProtoReflect.Descriptor instead.
func (*FindAppletReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{95}
}

type FindAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applets []*common.AppletInfo `protobuf:"bytes,1,rep,name=applets,proto3" json:"applets,omitempty"`
}

func (x *FindAppletResp) Reset() {
	*x = FindAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAppletResp) ProtoMessage() {}

func (x *FindAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAppletResp.ProtoReflect.Descriptor instead.
func (*FindAppletResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{96}
}

func (x *FindAppletResp) GetApplets() []*common.AppletInfo {
	if x != nil {
		return x.Applets
	}
	return nil
}

type SearchAppletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchAppletReq) Reset() {
	*x = SearchAppletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAppletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAppletReq) ProtoMessage() {}

func (x *SearchAppletReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAppletReq.ProtoReflect.Descriptor instead.
func (*SearchAppletReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{97}
}

func (x *SearchAppletReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchAppletReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchAppletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Applets []*common.AppletInfo `protobuf:"bytes,2,rep,name=applets,proto3" json:"applets,omitempty"`
}

func (x *SearchAppletResp) Reset() {
	*x = SearchAppletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAppletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAppletResp) ProtoMessage() {}

func (x *SearchAppletResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAppletResp.ProtoReflect.Descriptor instead.
func (*SearchAppletResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{98}
}

func (x *SearchAppletResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchAppletResp) GetApplets() []*common.AppletInfo {
	if x != nil {
		return x.Applets
	}
	return nil
}

type SetClientConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetClientConfigReq) Reset() {
	*x = SetClientConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientConfigReq) ProtoMessage() {}

func (x *SetClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientConfigReq.ProtoReflect.Descriptor instead.
func (*SetClientConfigReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{99}
}

func (x *SetClientConfigReq) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetClientConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetClientConfigResp) Reset() {
	*x = SetClientConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClientConfigResp) ProtoMessage() {}

func (x *SetClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClientConfigResp.ProtoReflect.Descriptor instead.
func (*SetClientConfigResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{100}
}

type DelClientConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *DelClientConfigReq) Reset() {
	*x = DelClientConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelClientConfigReq) ProtoMessage() {}

func (x *DelClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelClientConfigReq.ProtoReflect.Descriptor instead.
func (*DelClientConfigReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{101}
}

func (x *DelClientConfigReq) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type DelClientConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelClientConfigResp) Reset() {
	*x = DelClientConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelClientConfigResp) ProtoMessage() {}

func (x *DelClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelClientConfigResp.ProtoReflect.Descriptor instead.
func (*DelClientConfigResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{102}
}

type GetClientConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClientConfigReq) Reset() {
	*x = GetClientConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientConfigReq) ProtoMessage() {}

func (x *GetClientConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientConfigReq.ProtoReflect.Descriptor instead.
func (*GetClientConfigReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{103}
}

type GetClientConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetClientConfigResp) Reset() {
	*x = GetClientConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientConfigResp) ProtoMessage() {}

func (x *GetClientConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientConfigResp.ProtoReflect.Descriptor instead.
func (*GetClientConfigResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{104}
}

func (x *GetClientConfigResp) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetUserTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetUserTokenReq) Reset() {
	*x = GetUserTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTokenReq) ProtoMessage() {}

func (x *GetUserTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTokenReq.ProtoReflect.Descriptor instead.
func (*GetUserTokenReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{105}
}

func (x *GetUserTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokensMap map[string]int32 `protobuf:"bytes,1,rep,name=tokensMap,proto3" json:"tokensMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetUserTokenResp) Reset() {
	*x = GetUserTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTokenResp) ProtoMessage() {}

func (x *GetUserTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTokenResp.ProtoReflect.Descriptor instead.
func (*GetUserTokenResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{106}
}

func (x *GetUserTokenResp) GetTokensMap() map[string]int32 {
	if x != nil {
		return x.TokensMap
	}
	return nil
}

type UpdateMenuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuName     string `protobuf:"bytes,1,opt,name=menuName,proto3" json:"menuName,omitempty"`
	MenuType     uint32 `protobuf:"varint,2,opt,name=menuType,proto3" json:"menuType,omitempty"`
	MenuParentId uint32 `protobuf:"varint,3,opt,name=menuParentId,proto3" json:"menuParentId,omitempty"`
	Sort         uint64 `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Icon         string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Path         string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	IsCache      uint32 `protobuf:"varint,7,opt,name=isCache,proto3" json:"isCache,omitempty"`
	Status       uint32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	MenuId       uint64 `protobuf:"varint,9,opt,name=menuId,proto3" json:"menuId,omitempty"`
}

func (x *UpdateMenuReq) Reset() {
	*x = UpdateMenuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuReq) ProtoMessage() {}

func (x *UpdateMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuReq.ProtoReflect.Descriptor instead.
func (*UpdateMenuReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{107}
}

func (x *UpdateMenuReq) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *UpdateMenuReq) GetMenuType() uint32 {
	if x != nil {
		return x.MenuType
	}
	return 0
}

func (x *UpdateMenuReq) GetMenuParentId() uint32 {
	if x != nil {
		return x.MenuParentId
	}
	return 0
}

func (x *UpdateMenuReq) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateMenuReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateMenuReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UpdateMenuReq) GetIsCache() uint32 {
	if x != nil {
		return x.IsCache
	}
	return 0
}

func (x *UpdateMenuReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateMenuReq) GetMenuId() uint64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

type MenuInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuId uint64 `protobuf:"varint,1,opt,name=menuId,proto3" json:"menuId,omitempty"`
}

func (x *MenuInfoReq) Reset() {
	*x = MenuInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuInfoReq) ProtoMessage() {}

func (x *MenuInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuInfoReq.ProtoReflect.Descriptor instead.
func (*MenuInfoReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{108}
}

func (x *MenuInfoReq) GetMenuId() uint64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

type AddMenuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuName     string `protobuf:"bytes,1,opt,name=menuName,proto3" json:"menuName,omitempty"`
	MenuType     uint32 `protobuf:"varint,2,opt,name=menuType,proto3" json:"menuType,omitempty"`
	MenuParentId uint32 `protobuf:"varint,3,opt,name=menuParentId,proto3" json:"menuParentId,omitempty"`
	Sort         uint64 `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Icon         string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Path         string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	IsCache      uint32 `protobuf:"varint,7,opt,name=isCache,proto3" json:"isCache,omitempty"`
	Status       uint32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Desc         string `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *AddMenuReq) Reset() {
	*x = AddMenuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMenuReq) ProtoMessage() {}

func (x *AddMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMenuReq.ProtoReflect.Descriptor instead.
func (*AddMenuReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{109}
}

func (x *AddMenuReq) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *AddMenuReq) GetMenuType() uint32 {
	if x != nil {
		return x.MenuType
	}
	return 0
}

func (x *AddMenuReq) GetMenuParentId() uint32 {
	if x != nil {
		return x.MenuParentId
	}
	return 0
}

func (x *AddMenuReq) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddMenuReq) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddMenuReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddMenuReq) GetIsCache() uint32 {
	if x != nil {
		return x.IsCache
	}
	return 0
}

func (x *AddMenuReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddMenuReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type DelMenuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuId uint64 `protobuf:"varint,1,opt,name=menuId,proto3" json:"menuId,omitempty"`
}

func (x *DelMenuReq) Reset() {
	*x = DelMenuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMenuReq) ProtoMessage() {}

func (x *DelMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMenuReq.ProtoReflect.Descriptor instead.
func (*DelMenuReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{110}
}

func (x *DelMenuReq) GetMenuId() uint64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

type UpdateMenuResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMenuResp) Reset() {
	*x = UpdateMenuResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuResp) ProtoMessage() {}

func (x *UpdateMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuResp.ProtoReflect.Descriptor instead.
func (*UpdateMenuResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{111}
}

type SearchMenuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuName   string                   `protobuf:"bytes,1,opt,name=menuName,proto3" json:"menuName,omitempty"`
	MenuType   uint32                   `protobuf:"varint,2,opt,name=menuType,proto3" json:"menuType,omitempty"`
	Path       string                   `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	Status     uint32                   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	RoleId     uint64                   `protobuf:"varint,9,opt,name=roleId,proto3" json:"roleId,omitempty"`
	CreateBy   string                   `protobuf:"bytes,10,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	StartTime  string                   `protobuf:"bytes,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    string                   `protobuf:"bytes,12,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Pagination *sdkws.RequestPagination `protobuf:"bytes,13,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchMenuReq) Reset() {
	*x = SearchMenuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMenuReq) ProtoMessage() {}

func (x *SearchMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMenuReq.ProtoReflect.Descriptor instead.
func (*SearchMenuReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{112}
}

func (x *SearchMenuReq) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *SearchMenuReq) GetMenuType() uint32 {
	if x != nil {
		return x.MenuType
	}
	return 0
}

func (x *SearchMenuReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SearchMenuReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchMenuReq) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *SearchMenuReq) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *SearchMenuReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SearchMenuReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SearchMenuReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DisableMenuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuId uint64 `protobuf:"varint,1,opt,name=menuId,proto3" json:"menuId,omitempty"`
}

func (x *DisableMenuReq) Reset() {
	*x = DisableMenuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMenuReq) ProtoMessage() {}

func (x *DisableMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMenuReq.ProtoReflect.Descriptor instead.
func (*DisableMenuReq) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{113}
}

func (x *DisableMenuReq) GetMenuId() uint64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

type MenuInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuName     string `protobuf:"bytes,1,opt,name=menuName,proto3" json:"menuName,omitempty"`
	MenuType     uint32 `protobuf:"varint,2,opt,name=menuType,proto3" json:"menuType,omitempty"`
	MenuParentId uint32 `protobuf:"varint,3,opt,name=menuParentId,proto3" json:"menuParentId,omitempty"`
	Sort         uint64 `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Icon         string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Path         string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	IsCache      uint32 `protobuf:"varint,7,opt,name=isCache,proto3" json:"isCache,omitempty"`
	Status       uint32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	MenuId       uint64 `protobuf:"varint,9,opt,name=menuId,proto3" json:"menuId,omitempty"`
	CreateBy     string `protobuf:"bytes,10,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	CreateTime   int64  `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *MenuInfoResp) Reset() {
	*x = MenuInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuInfoResp) ProtoMessage() {}

func (x *MenuInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuInfoResp.ProtoReflect.Descriptor instead.
func (*MenuInfoResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{114}
}

func (x *MenuInfoResp) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *MenuInfoResp) GetMenuType() uint32 {
	if x != nil {
		return x.MenuType
	}
	return 0
}

func (x *MenuInfoResp) GetMenuParentId() uint32 {
	if x != nil {
		return x.MenuParentId
	}
	return 0
}

func (x *MenuInfoResp) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MenuInfoResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *MenuInfoResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MenuInfoResp) GetIsCache() uint32 {
	if x != nil {
		return x.IsCache
	}
	return 0
}

func (x *MenuInfoResp) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MenuInfoResp) GetMenuId() uint64 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *MenuInfoResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *MenuInfoResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AddMenuResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddMenuResp) Reset() {
	*x = AddMenuResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMenuResp) ProtoMessage() {}

func (x *AddMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMenuResp.ProtoReflect.Descriptor instead.
func (*AddMenuResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{115}
}

type DelMenuResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelMenuResp) Reset() {
	*x = DelMenuResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMenuResp) ProtoMessage() {}

func (x *DelMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMenuResp.ProtoReflect.Descriptor instead.
func (*DelMenuResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{116}
}

type SearchMenuResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuInfo []*MenuInfoResp `protobuf:"bytes,1,rep,name=menuInfo,proto3" json:"menuInfo,omitempty"`
	Total    uint64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Pages    uint64          `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *SearchMenuResp) Reset() {
	*x = SearchMenuResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMenuResp) ProtoMessage() {}

func (x *SearchMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMenuResp.ProtoReflect.Descriptor instead.
func (*SearchMenuResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{117}
}

func (x *SearchMenuResp) GetMenuInfo() []*MenuInfoResp {
	if x != nil {
		return x.MenuInfo
	}
	return nil
}

func (x *SearchMenuResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchMenuResp) GetPages() uint64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

type DisableMenuResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableMenuResp) Reset() {
	*x = DisableMenuResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openchat_admin_admin_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableMenuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMenuResp) ProtoMessage() {}

func (x *DisableMenuResp) ProtoReflect() protoreflect.Message {
	mi := &file_openchat_admin_admin_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMenuResp.ProtoReflect.Descriptor instead.
func (*DisableMenuResp) Descriptor() ([]byte, []int) {
	return file_openchat_admin_admin_proto_rawDescGZIP(), []int{118}
}

var File_openchat_admin_admin_proto protoreflect.FileDescriptor

var file_openchat_admin_admin_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x1a, 0x1c, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x62, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x0c, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe1,
	0x03, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x43,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70,
	0x62, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x22, 0x2f,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x14, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x7c, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x19,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x85, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xb2,
	0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x19, 0x0a,
	0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2f, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x2f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x69,
	0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x22, 0x31, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x7c, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x74, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x30, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x69,
	0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x22, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x7b, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4a, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x73, 0x22, 0x2c, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x73, 0x22, 0x17, 0x0a, 0x15,
	0x47, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f,
	0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x42, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2c, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x42, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f,
	0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x7f, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x96, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x1a, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x50, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x3a,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x59, 0x0a, 0x16, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x59, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x49, 0x50, 0x46, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0e,
	0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x48, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x15, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x45, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x50,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x0a, 0x66, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x49,
	0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x25,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2b, 0x0a, 0x19, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x40, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x45, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x3e, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x2a, 0x0a, 0x0e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22,
	0x11, 0x0a, 0x0f, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x78, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x02, 0x0a,
	0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22,
	0x30, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x22, 0x77, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x15, 0x46, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x44, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x25, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x82, 0x02, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x9d, 0x05, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x64, 0x35,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6d, 0x64, 0x35, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x41, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x62, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x12, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x0f, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x22, 0x4e, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a,
	0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x4d, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x28, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x14,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x3c, 0x0a,
	0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x6e,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6e,
	0x75, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x22,
	0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x22, 0x24, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x22, 0xaa, 0x02, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x6e,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x6e, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75,
	0x49, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x6e, 0x75, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x73,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d,
	0x65, 0x6e, 0x75, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x7d, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x11, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x32, 0xe2, 0x2c, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x4a, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x68, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x71, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6b, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x71,
	0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6e, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x71, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x77, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7d, 0x0a,
	0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x74, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x49,
	0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x65, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x0b, 0x55,
	0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x0f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x7d, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x74, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x56, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x59, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74,
	0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a,
	0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x12, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x68, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a,
	0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a,
	0x07, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x59, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x0b, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6d, 0x6d, 0x6d, 0x6e, 0x69, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_openchat_admin_admin_proto_rawDescOnce sync.Once
	file_openchat_admin_admin_proto_rawDescData = file_openchat_admin_admin_proto_rawDesc
)

func file_openchat_admin_admin_proto_rawDescGZIP() []byte {
	file_openchat_admin_admin_proto_rawDescOnce.Do(func() {
		file_openchat_admin_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_openchat_admin_admin_proto_rawDescData)
	})
	return file_openchat_admin_admin_proto_rawDescData
}

var file_openchat_admin_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 122)
var file_openchat_admin_admin_proto_goTypes = []interface{}{
	(*LoginReq)(nil),                   // 0: openim.openchat.admin.LoginReq
	(*LoginResp)(nil),                  // 1: openim.openchat.admin.LoginResp
	(*LogoutReq)(nil),                  // 2: openim.openchat.admin.LogoutReq
	(*LogoutResp)(nil),                 // 3: openim.openchat.admin.LogoutResp
	(*AddAdminAccountReq)(nil),         // 4: openim.openchat.admin.AddAdminAccountReq
	(*AddAdminAccountResp)(nil),        // 5: openim.openchat.admin.AddAdminAccountResp
	(*AdminUpdateInfoReq)(nil),         // 6: openim.openchat.admin.AdminUpdateInfoReq
	(*AdminUpdateInfoResp)(nil),        // 7: openim.openchat.admin.AdminUpdateInfoResp
	(*ChangePasswordReq)(nil),          // 8: openim.openchat.admin.ChangePasswordReq
	(*ChangePasswordResp)(nil),         // 9: openim.openchat.admin.ChangePasswordResp
	(*GetAdminInfoReq)(nil),            // 10: openim.openchat.admin.GetAdminInfoReq
	(*ChangeAdminPasswordReq)(nil),     // 11: openim.openchat.admin.ChangeAdminPasswordReq
	(*ChangeAdminPasswordResp)(nil),    // 12: openim.openchat.admin.ChangeAdminPasswordResp
	(*DelAdminAccountReq)(nil),         // 13: openim.openchat.admin.DelAdminAccountReq
	(*DelAdminAccountResp)(nil),        // 14: openim.openchat.admin.DelAdminAccountResp
	(*SearchAdminAccountReq)(nil),      // 15: openim.openchat.admin.SearchAdminAccountReq
	(*SearchAdminAccountResp)(nil),     // 16: openim.openchat.admin.SearchAdminAccountResp
	(*GetAdminInfoResp)(nil),           // 17: openim.openchat.admin.GetAdminInfoResp
	(*DisableAdminAccountReq)(nil),     // 18: openim.openchat.admin.DisableAdminAccountReq
	(*DisableAdminAccountResp)(nil),    // 19: openim.openchat.admin.DisableAdminAccountResp
	(*AddDefaultFriendReq)(nil),        // 20: openim.openchat.admin.AddDefaultFriendReq
	(*AddDefaultFriendResp)(nil),       // 21: openim.openchat.admin.AddDefaultFriendResp
	(*DelDefaultFriendReq)(nil),        // 22: openim.openchat.admin.DelDefaultFriendReq
	(*DelDefaultFriendResp)(nil),       // 23: openim.openchat.admin.DelDefaultFriendResp
	(*FindDefaultFriendReq)(nil),       // 24: openim.openchat.admin.FindDefaultFriendReq
	(*FindDefaultFriendResp)(nil),      // 25: openim.openchat.admin.FindDefaultFriendResp
	(*SearchDefaultFriendReq)(nil),     // 26: openim.openchat.admin.SearchDefaultFriendReq
	(*DefaultFriendAttribute)(nil),     // 27: openim.openchat.admin.DefaultFriendAttribute
	(*SearchDefaultFriendResp)(nil),    // 28: openim.openchat.admin.SearchDefaultFriendResp
	(*AddDefaultGroupReq)(nil),         // 29: openim.openchat.admin.AddDefaultGroupReq
	(*AddDefaultGroupResp)(nil),        // 30: openim.openchat.admin.AddDefaultGroupResp
	(*DelDefaultGroupReq)(nil),         // 31: openim.openchat.admin.DelDefaultGroupReq
	(*DelDefaultGroupResp)(nil),        // 32: openim.openchat.admin.DelDefaultGroupResp
	(*FindDefaultGroupReq)(nil),        // 33: openim.openchat.admin.FindDefaultGroupReq
	(*FindDefaultGroupResp)(nil),       // 34: openim.openchat.admin.FindDefaultGroupResp
	(*SearchDefaultGroupReq)(nil),      // 35: openim.openchat.admin.SearchDefaultGroupReq
	(*GroupAttribute)(nil),             // 36: openim.openchat.admin.GroupAttribute
	(*SearchDefaultGroupResp)(nil),     // 37: openim.openchat.admin.SearchDefaultGroupResp
	(*AddInvitationCodeReq)(nil),       // 38: openim.openchat.admin.AddInvitationCodeReq
	(*AddInvitationCodeResp)(nil),      // 39: openim.openchat.admin.AddInvitationCodeResp
	(*GenInvitationCodeReq)(nil),       // 40: openim.openchat.admin.GenInvitationCodeReq
	(*GenInvitationCodeResp)(nil),      // 41: openim.openchat.admin.GenInvitationCodeResp
	(*FindInvitationCodeReq)(nil),      // 42: openim.openchat.admin.FindInvitationCodeReq
	(*FindInvitationCodeResp)(nil),     // 43: openim.openchat.admin.FindInvitationCodeResp
	(*UseInvitationCodeReq)(nil),       // 44: openim.openchat.admin.UseInvitationCodeReq
	(*UseInvitationCodeResp)(nil),      // 45: openim.openchat.admin.UseInvitationCodeResp
	(*DelInvitationCodeReq)(nil),       // 46: openim.openchat.admin.DelInvitationCodeReq
	(*DelInvitationCodeResp)(nil),      // 47: openim.openchat.admin.DelInvitationCodeResp
	(*InvitationRegister)(nil),         // 48: openim.openchat.admin.InvitationRegister
	(*SearchInvitationCodeReq)(nil),    // 49: openim.openchat.admin.SearchInvitationCodeReq
	(*SearchInvitationCodeResp)(nil),   // 50: openim.openchat.admin.SearchInvitationCodeResp
	(*SearchUserIPLimitLoginReq)(nil),  // 51: openim.openchat.admin.SearchUserIPLimitLoginReq
	(*LimitUserLoginIP)(nil),           // 52: openim.openchat.admin.LimitUserLoginIP
	(*SearchUserIPLimitLoginResp)(nil), // 53: openim.openchat.admin.SearchUserIPLimitLoginResp
	(*UserIPLimitLogin)(nil),           // 54: openim.openchat.admin.UserIPLimitLogin
	(*AddUserIPLimitLoginReq)(nil),     // 55: openim.openchat.admin.AddUserIPLimitLoginReq
	(*AddUserIPLimitLoginResp)(nil),    // 56: openim.openchat.admin.AddUserIPLimitLoginResp
	(*DelUserIPLimitLoginReq)(nil),     // 57: openim.openchat.admin.DelUserIPLimitLoginReq
	(*DelUserIPLimitLoginResp)(nil),    // 58: openim.openchat.admin.DelUserIPLimitLoginResp
	(*IPForbidden)(nil),                // 59: openim.openchat.admin.IPForbidden
	(*IPForbiddenAdd)(nil),             // 60: openim.openchat.admin.IPForbiddenAdd
	(*SearchIPForbiddenReq)(nil),       // 61: openim.openchat.admin.SearchIPForbiddenReq
	(*SearchIPForbiddenResp)(nil),      // 62: openim.openchat.admin.SearchIPForbiddenResp
	(*AddIPForbiddenReq)(nil),          // 63: openim.openchat.admin.AddIPForbiddenReq
	(*AddIPForbiddenResp)(nil),         // 64: openim.openchat.admin.AddIPForbiddenResp
	(*DelIPForbiddenReq)(nil),          // 65: openim.openchat.admin.DelIPForbiddenReq
	(*DelIPForbiddenResp)(nil),         // 66: openim.openchat.admin.DelIPForbiddenResp
	(*CheckRegisterForbiddenReq)(nil),  // 67: openim.openchat.admin.CheckRegisterForbiddenReq
	(*CheckRegisterForbiddenResp)(nil), // 68: openim.openchat.admin.CheckRegisterForbiddenResp
	(*CheckLoginForbiddenReq)(nil),     // 69: openim.openchat.admin.CheckLoginForbiddenReq
	(*CheckLoginForbiddenResp)(nil),    // 70: openim.openchat.admin.CheckLoginForbiddenResp
	(*CancellationUserReq)(nil),        // 71: openim.openchat.admin.CancellationUserReq
	(*CancellationUserResp)(nil),       // 72: openim.openchat.admin.CancellationUserResp
	(*BlockUserReq)(nil),               // 73: openim.openchat.admin.BlockUserReq
	(*BlockUserResp)(nil),              // 74: openim.openchat.admin.BlockUserResp
	(*UnblockUserReq)(nil),             // 75: openim.openchat.admin.UnblockUserReq
	(*UnblockUserResp)(nil),            // 76: openim.openchat.admin.UnblockUserResp
	(*SearchBlockUserReq)(nil),         // 77: openim.openchat.admin.SearchBlockUserReq
	(*BlockUserInfo)(nil),              // 78: openim.openchat.admin.BlockUserInfo
	(*SearchBlockUserResp)(nil),        // 79: openim.openchat.admin.SearchBlockUserResp
	(*FindUserBlockInfoReq)(nil),       // 80: openim.openchat.admin.FindUserBlockInfoReq
	(*BlockInfo)(nil),                  // 81: openim.openchat.admin.BlockInfo
	(*FindUserBlockInfoResp)(nil),      // 82: openim.openchat.admin.FindUserBlockInfoResp
	(*CreateTokenReq)(nil),             // 83: openim.openchat.admin.CreateTokenReq
	(*CreateTokenResp)(nil),            // 84: openim.openchat.admin.CreateTokenResp
	(*ParseTokenReq)(nil),              // 85: openim.openchat.admin.ParseTokenReq
	(*ParseTokenResp)(nil),             // 86: openim.openchat.admin.ParseTokenResp
	(*InvalidateTokenReq)(nil),         // 87: openim.openchat.admin.InvalidateTokenReq
	(*InvalidateTokenResp)(nil),        // 88: openim.openchat.admin.InvalidateTokenResp
	(*AddAppletReq)(nil),               // 89: openim.openchat.admin.AddAppletReq
	(*AddAppletResp)(nil),              // 90: openim.openchat.admin.AddAppletResp
	(*DelAppletReq)(nil),               // 91: openim.openchat.admin.DelAppletReq
	(*DelAppletResp)(nil),              // 92: openim.openchat.admin.DelAppletResp
	(*UpdateAppletReq)(nil),            // 93: openim.openchat.admin.UpdateAppletReq
	(*UpdateAppletResp)(nil),           // 94: openim.openchat.admin.UpdateAppletResp
	(*FindAppletReq)(nil),              // 95: openim.openchat.admin.FindAppletReq
	(*FindAppletResp)(nil),             // 96: openim.openchat.admin.FindAppletResp
	(*SearchAppletReq)(nil),            // 97: openim.openchat.admin.SearchAppletReq
	(*SearchAppletResp)(nil),           // 98: openim.openchat.admin.SearchAppletResp
	(*SetClientConfigReq)(nil),         // 99: openim.openchat.admin.SetClientConfigReq
	(*SetClientConfigResp)(nil),        // 100: openim.openchat.admin.SetClientConfigResp
	(*DelClientConfigReq)(nil),         // 101: openim.openchat.admin.DelClientConfigReq
	(*DelClientConfigResp)(nil),        // 102: openim.openchat.admin.DelClientConfigResp
	(*GetClientConfigReq)(nil),         // 103: openim.openchat.admin.GetClientConfigReq
	(*GetClientConfigResp)(nil),        // 104: openim.openchat.admin.GetClientConfigResp
	(*GetUserTokenReq)(nil),            // 105: openim.openchat.admin.GetUserTokenReq
	(*GetUserTokenResp)(nil),           // 106: openim.openchat.admin.GetUserTokenResp
	(*UpdateMenuReq)(nil),              // 107: openim.openchat.admin.UpdateMenuReq
	(*MenuInfoReq)(nil),                // 108: openim.openchat.admin.MenuInfoReq
	(*AddMenuReq)(nil),                 // 109: openim.openchat.admin.AddMenuReq
	(*DelMenuReq)(nil),                 // 110: openim.openchat.admin.DelMenuReq
	(*UpdateMenuResp)(nil),             // 111: openim.openchat.admin.UpdateMenuResp
	(*SearchMenuReq)(nil),              // 112: openim.openchat.admin.SearchMenuReq
	(*DisableMenuReq)(nil),             // 113: openim.openchat.admin.DisableMenuReq
	(*MenuInfoResp)(nil),               // 114: openim.openchat.admin.MenuInfoResp
	(*AddMenuResp)(nil),                // 115: openim.openchat.admin.AddMenuResp
	(*DelMenuResp)(nil),                // 116: openim.openchat.admin.DelMenuResp
	(*SearchMenuResp)(nil),             // 117: openim.openchat.admin.SearchMenuResp
	(*DisableMenuResp)(nil),            // 118: openim.openchat.admin.DisableMenuResp
	nil,                                // 119: openim.openchat.admin.SetClientConfigReq.ConfigEntry
	nil,                                // 120: openim.openchat.admin.GetClientConfigResp.ConfigEntry
	nil,                                // 121: openim.openchat.admin.GetUserTokenResp.TokensMapEntry
	(*wrapperspb.StringValue)(nil),     // 122: openim.openchat.wrapperspb.StringValue
	(*wrapperspb.UInt32Value)(nil),     // 123: openim.openchat.wrapperspb.UInt32Value
	(*wrapperspb.UInt64Value)(nil),     // 124: openim.openchat.wrapperspb.UInt64Value
	(*sdkws.RequestPagination)(nil),    // 125: openim.openchat.sdkws.RequestPagination
	(*common.UserPublicInfo)(nil),      // 126: openim.openchat.common.UserPublicInfo
	(*sdkws.GroupInfo)(nil),            // 127: openim.openchat.sdkws.GroupInfo
	(*wrapperspb.Int64Value)(nil),      // 128: openim.openchat.wrapperspb.Int64Value
	(*common.AppletInfo)(nil),          // 129: openim.openchat.common.AppletInfo
}
var file_openchat_admin_admin_proto_depIdxs = []int32{
	122, // 0: openim.openchat.admin.AdminUpdateInfoReq.userId:type_name -> openim.openchat.wrapperspb.StringValue
	122, // 1: openim.openchat.admin.AdminUpdateInfoReq.account:type_name -> openim.openchat.wrapperspb.StringValue
	122, // 2: openim.openchat.admin.AdminUpdateInfoReq.password:type_name -> openim.openchat.wrapperspb.StringValue
	122, // 3: openim.openchat.admin.AdminUpdateInfoReq.username:type_name -> openim.openchat.wrapperspb.StringValue
	123, // 4: openim.openchat.admin.AdminUpdateInfoReq.status:type_name -> openim.openchat.wrapperspb.UInt32Value
	124, // 5: openim.openchat.admin.AdminUpdateInfoReq.roleId:type_name -> openim.openchat.wrapperspb.UInt64Value
	122, // 6: openim.openchat.admin.AdminUpdateInfoReq.desc:type_name -> openim.openchat.wrapperspb.StringValue
	125, // 7: openim.openchat.admin.SearchAdminAccountReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	17,  // 8: openim.openchat.admin.SearchAdminAccountResp.adminAccounts:type_name -> openim.openchat.admin.GetAdminInfoResp
	125, // 9: openim.openchat.admin.SearchDefaultFriendReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	126, // 10: openim.openchat.admin.DefaultFriendAttribute.user:type_name -> openim.openchat.common.UserPublicInfo
	27,  // 11: openim.openchat.admin.SearchDefaultFriendResp.users:type_name -> openim.openchat.admin.DefaultFriendAttribute
	125, // 12: openim.openchat.admin.SearchDefaultGroupReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	127, // 13: openim.openchat.admin.GroupAttribute.group:type_name -> openim.openchat.sdkws.GroupInfo
	48,  // 14: openim.openchat.admin.FindInvitationCodeResp.codes:type_name -> openim.openchat.admin.InvitationRegister
	126, // 15: openim.openchat.admin.InvitationRegister.usedUser:type_name -> openim.openchat.common.UserPublicInfo
	125, // 16: openim.openchat.admin.SearchInvitationCodeReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	48,  // 17: openim.openchat.admin.SearchInvitationCodeResp.list:type_name -> openim.openchat.admin.InvitationRegister
	125, // 18: openim.openchat.admin.SearchUserIPLimitLoginReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	126, // 19: openim.openchat.admin.LimitUserLoginIP.user:type_name -> openim.openchat.common.UserPublicInfo
	52,  // 20: openim.openchat.admin.SearchUserIPLimitLoginResp.limits:type_name -> openim.openchat.admin.LimitUserLoginIP
	54,  // 21: openim.openchat.admin.AddUserIPLimitLoginReq.limits:type_name -> openim.openchat.admin.UserIPLimitLogin
	54,  // 22: openim.openchat.admin.DelUserIPLimitLoginReq.limits:type_name -> openim.openchat.admin.UserIPLimitLogin
	125, // 23: openim.openchat.admin.SearchIPForbiddenReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	59,  // 24: openim.openchat.admin.SearchIPForbiddenResp.forbiddens:type_name -> openim.openchat.admin.IPForbidden
	60,  // 25: openim.openchat.admin.AddIPForbiddenReq.forbiddens:type_name -> openim.openchat.admin.IPForbiddenAdd
	125, // 26: openim.openchat.admin.SearchBlockUserReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	78,  // 27: openim.openchat.admin.SearchBlockUserResp.users:type_name -> openim.openchat.admin.BlockUserInfo
	81,  // 28: openim.openchat.admin.FindUserBlockInfoResp.blocks:type_name -> openim.openchat.admin.BlockInfo
	122, // 29: openim.openchat.admin.UpdateAppletReq.name:type_name -> openim.openchat.wrapperspb.StringValue
	122, // 30: openim.openchat.admin.UpdateAppletReq.appID:type_name -> openim.openchat.wrapperspb.StringValue
	122, // 31: openim.openchat.admin.UpdateAppletReq.icon:type_name -> openim.openchat.wrapperspb.StringValue
	122, // 32: openim.openchat.admin.UpdateAppletReq.url:type_name -> openim.openchat.wrapperspb.StringValue
	122, // 33: openim.openchat.admin.UpdateAppletReq.md5:type_name -> openim.openchat.wrapperspb.StringValue
	128, // 34: openim.openchat.admin.UpdateAppletReq.size:type_name -> openim.openchat.wrapperspb.Int64Value
	122, // 35: openim.openchat.admin.UpdateAppletReq.version:type_name -> openim.openchat.wrapperspb.StringValue
	123, // 36: openim.openchat.admin.UpdateAppletReq.priority:type_name -> openim.openchat.wrapperspb.UInt32Value
	123, // 37: openim.openchat.admin.UpdateAppletReq.status:type_name -> openim.openchat.wrapperspb.UInt32Value
	128, // 38: openim.openchat.admin.UpdateAppletReq.createTime:type_name -> openim.openchat.wrapperspb.Int64Value
	129, // 39: openim.openchat.admin.FindAppletResp.applets:type_name -> openim.openchat.common.AppletInfo
	125, // 40: openim.openchat.admin.SearchAppletReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	129, // 41: openim.openchat.admin.SearchAppletResp.applets:type_name -> openim.openchat.common.AppletInfo
	119, // 42: openim.openchat.admin.SetClientConfigReq.config:type_name -> openim.openchat.admin.SetClientConfigReq.ConfigEntry
	120, // 43: openim.openchat.admin.GetClientConfigResp.config:type_name -> openim.openchat.admin.GetClientConfigResp.ConfigEntry
	121, // 44: openim.openchat.admin.GetUserTokenResp.tokensMap:type_name -> openim.openchat.admin.GetUserTokenResp.TokensMapEntry
	125, // 45: openim.openchat.admin.SearchMenuReq.pagination:type_name -> openim.openchat.sdkws.RequestPagination
	114, // 46: openim.openchat.admin.SearchMenuResp.menuInfo:type_name -> openim.openchat.admin.MenuInfoResp
	0,   // 47: openim.openchat.admin.admin.Login:input_type -> openim.openchat.admin.LoginReq
	2,   // 48: openim.openchat.admin.admin.Logout:input_type -> openim.openchat.admin.LogoutReq
	8,   // 49: openim.openchat.admin.admin.ChangePassword:input_type -> openim.openchat.admin.ChangePasswordReq
	6,   // 50: openim.openchat.admin.admin.AdminUpdateInfo:input_type -> openim.openchat.admin.AdminUpdateInfoReq
	10,  // 51: openim.openchat.admin.admin.GetAdminInfo:input_type -> openim.openchat.admin.GetAdminInfoReq
	4,   // 52: openim.openchat.admin.admin.AddAdminAccount:input_type -> openim.openchat.admin.AddAdminAccountReq
	11,  // 53: openim.openchat.admin.admin.ChangeAdminPassword:input_type -> openim.openchat.admin.ChangeAdminPasswordReq
	13,  // 54: openim.openchat.admin.admin.DelAdminAccount:input_type -> openim.openchat.admin.DelAdminAccountReq
	15,  // 55: openim.openchat.admin.admin.SearchAdminAccount:input_type -> openim.openchat.admin.SearchAdminAccountReq
	18,  // 56: openim.openchat.admin.admin.DisableAdminAccount:input_type -> openim.openchat.admin.DisableAdminAccountReq
	20,  // 57: openim.openchat.admin.admin.AddDefaultFriend:input_type -> openim.openchat.admin.AddDefaultFriendReq
	22,  // 58: openim.openchat.admin.admin.DelDefaultFriend:input_type -> openim.openchat.admin.DelDefaultFriendReq
	24,  // 59: openim.openchat.admin.admin.FindDefaultFriend:input_type -> openim.openchat.admin.FindDefaultFriendReq
	26,  // 60: openim.openchat.admin.admin.SearchDefaultFriend:input_type -> openim.openchat.admin.SearchDefaultFriendReq
	29,  // 61: openim.openchat.admin.admin.AddDefaultGroup:input_type -> openim.openchat.admin.AddDefaultGroupReq
	31,  // 62: openim.openchat.admin.admin.DelDefaultGroup:input_type -> openim.openchat.admin.DelDefaultGroupReq
	33,  // 63: openim.openchat.admin.admin.FindDefaultGroup:input_type -> openim.openchat.admin.FindDefaultGroupReq
	35,  // 64: openim.openchat.admin.admin.SearchDefaultGroup:input_type -> openim.openchat.admin.SearchDefaultGroupReq
	38,  // 65: openim.openchat.admin.admin.AddInvitationCode:input_type -> openim.openchat.admin.AddInvitationCodeReq
	40,  // 66: openim.openchat.admin.admin.GenInvitationCode:input_type -> openim.openchat.admin.GenInvitationCodeReq
	42,  // 67: openim.openchat.admin.admin.FindInvitationCode:input_type -> openim.openchat.admin.FindInvitationCodeReq
	44,  // 68: openim.openchat.admin.admin.UseInvitationCode:input_type -> openim.openchat.admin.UseInvitationCodeReq
	46,  // 69: openim.openchat.admin.admin.DelInvitationCode:input_type -> openim.openchat.admin.DelInvitationCodeReq
	49,  // 70: openim.openchat.admin.admin.SearchInvitationCode:input_type -> openim.openchat.admin.SearchInvitationCodeReq
	51,  // 71: openim.openchat.admin.admin.SearchUserIPLimitLogin:input_type -> openim.openchat.admin.SearchUserIPLimitLoginReq
	55,  // 72: openim.openchat.admin.admin.AddUserIPLimitLogin:input_type -> openim.openchat.admin.AddUserIPLimitLoginReq
	57,  // 73: openim.openchat.admin.admin.DelUserIPLimitLogin:input_type -> openim.openchat.admin.DelUserIPLimitLoginReq
	61,  // 74: openim.openchat.admin.admin.SearchIPForbidden:input_type -> openim.openchat.admin.SearchIPForbiddenReq
	63,  // 75: openim.openchat.admin.admin.AddIPForbidden:input_type -> openim.openchat.admin.AddIPForbiddenReq
	65,  // 76: openim.openchat.admin.admin.DelIPForbidden:input_type -> openim.openchat.admin.DelIPForbiddenReq
	71,  // 77: openim.openchat.admin.admin.CancellationUser:input_type -> openim.openchat.admin.CancellationUserReq
	73,  // 78: openim.openchat.admin.admin.BlockUser:input_type -> openim.openchat.admin.BlockUserReq
	75,  // 79: openim.openchat.admin.admin.UnblockUser:input_type -> openim.openchat.admin.UnblockUserReq
	77,  // 80: openim.openchat.admin.admin.SearchBlockUser:input_type -> openim.openchat.admin.SearchBlockUserReq
	80,  // 81: openim.openchat.admin.admin.FindUserBlockInfo:input_type -> openim.openchat.admin.FindUserBlockInfoReq
	67,  // 82: openim.openchat.admin.admin.CheckRegisterForbidden:input_type -> openim.openchat.admin.CheckRegisterForbiddenReq
	69,  // 83: openim.openchat.admin.admin.CheckLoginForbidden:input_type -> openim.openchat.admin.CheckLoginForbiddenReq
	83,  // 84: openim.openchat.admin.admin.CreateToken:input_type -> openim.openchat.admin.CreateTokenReq
	85,  // 85: openim.openchat.admin.admin.ParseToken:input_type -> openim.openchat.admin.ParseTokenReq
	89,  // 86: openim.openchat.admin.admin.AddApplet:input_type -> openim.openchat.admin.AddAppletReq
	91,  // 87: openim.openchat.admin.admin.DelApplet:input_type -> openim.openchat.admin.DelAppletReq
	93,  // 88: openim.openchat.admin.admin.UpdateApplet:input_type -> openim.openchat.admin.UpdateAppletReq
	95,  // 89: openim.openchat.admin.admin.FindApplet:input_type -> openim.openchat.admin.FindAppletReq
	97,  // 90: openim.openchat.admin.admin.SearchApplet:input_type -> openim.openchat.admin.SearchAppletReq
	103, // 91: openim.openchat.admin.admin.GetClientConfig:input_type -> openim.openchat.admin.GetClientConfigReq
	99,  // 92: openim.openchat.admin.admin.SetClientConfig:input_type -> openim.openchat.admin.SetClientConfigReq
	101, // 93: openim.openchat.admin.admin.DelClientConfig:input_type -> openim.openchat.admin.DelClientConfigReq
	105, // 94: openim.openchat.admin.admin.GetUserToken:input_type -> openim.openchat.admin.GetUserTokenReq
	87,  // 95: openim.openchat.admin.admin.InvalidateToken:input_type -> openim.openchat.admin.InvalidateTokenReq
	107, // 96: openim.openchat.admin.admin.UpdateMenuInfo:input_type -> openim.openchat.admin.UpdateMenuReq
	108, // 97: openim.openchat.admin.admin.MenuInfo:input_type -> openim.openchat.admin.MenuInfoReq
	109, // 98: openim.openchat.admin.admin.AddMenu:input_type -> openim.openchat.admin.AddMenuReq
	110, // 99: openim.openchat.admin.admin.DelMenu:input_type -> openim.openchat.admin.DelMenuReq
	112, // 100: openim.openchat.admin.admin.SearchMenu:input_type -> openim.openchat.admin.SearchMenuReq
	113, // 101: openim.openchat.admin.admin.DisableMenu:input_type -> openim.openchat.admin.DisableMenuReq
	1,   // 102: openim.openchat.admin.admin.Login:output_type -> openim.openchat.admin.LoginResp
	3,   // 103: openim.openchat.admin.admin.Logout:output_type -> openim.openchat.admin.LogoutResp
	9,   // 104: openim.openchat.admin.admin.ChangePassword:output_type -> openim.openchat.admin.ChangePasswordResp
	7,   // 105: openim.openchat.admin.admin.AdminUpdateInfo:output_type -> openim.openchat.admin.AdminUpdateInfoResp
	17,  // 106: openim.openchat.admin.admin.GetAdminInfo:output_type -> openim.openchat.admin.GetAdminInfoResp
	5,   // 107: openim.openchat.admin.admin.AddAdminAccount:output_type -> openim.openchat.admin.AddAdminAccountResp
	12,  // 108: openim.openchat.admin.admin.ChangeAdminPassword:output_type -> openim.openchat.admin.ChangeAdminPasswordResp
	14,  // 109: openim.openchat.admin.admin.DelAdminAccount:output_type -> openim.openchat.admin.DelAdminAccountResp
	16,  // 110: openim.openchat.admin.admin.SearchAdminAccount:output_type -> openim.openchat.admin.SearchAdminAccountResp
	19,  // 111: openim.openchat.admin.admin.DisableAdminAccount:output_type -> openim.openchat.admin.DisableAdminAccountResp
	21,  // 112: openim.openchat.admin.admin.AddDefaultFriend:output_type -> openim.openchat.admin.AddDefaultFriendResp
	23,  // 113: openim.openchat.admin.admin.DelDefaultFriend:output_type -> openim.openchat.admin.DelDefaultFriendResp
	25,  // 114: openim.openchat.admin.admin.FindDefaultFriend:output_type -> openim.openchat.admin.FindDefaultFriendResp
	28,  // 115: openim.openchat.admin.admin.SearchDefaultFriend:output_type -> openim.openchat.admin.SearchDefaultFriendResp
	30,  // 116: openim.openchat.admin.admin.AddDefaultGroup:output_type -> openim.openchat.admin.AddDefaultGroupResp
	32,  // 117: openim.openchat.admin.admin.DelDefaultGroup:output_type -> openim.openchat.admin.DelDefaultGroupResp
	34,  // 118: openim.openchat.admin.admin.FindDefaultGroup:output_type -> openim.openchat.admin.FindDefaultGroupResp
	37,  // 119: openim.openchat.admin.admin.SearchDefaultGroup:output_type -> openim.openchat.admin.SearchDefaultGroupResp
	39,  // 120: openim.openchat.admin.admin.AddInvitationCode:output_type -> openim.openchat.admin.AddInvitationCodeResp
	41,  // 121: openim.openchat.admin.admin.GenInvitationCode:output_type -> openim.openchat.admin.GenInvitationCodeResp
	43,  // 122: openim.openchat.admin.admin.FindInvitationCode:output_type -> openim.openchat.admin.FindInvitationCodeResp
	45,  // 123: openim.openchat.admin.admin.UseInvitationCode:output_type -> openim.openchat.admin.UseInvitationCodeResp
	47,  // 124: openim.openchat.admin.admin.DelInvitationCode:output_type -> openim.openchat.admin.DelInvitationCodeResp
	50,  // 125: openim.openchat.admin.admin.SearchInvitationCode:output_type -> openim.openchat.admin.SearchInvitationCodeResp
	53,  // 126: openim.openchat.admin.admin.SearchUserIPLimitLogin:output_type -> openim.openchat.admin.SearchUserIPLimitLoginResp
	56,  // 127: openim.openchat.admin.admin.AddUserIPLimitLogin:output_type -> openim.openchat.admin.AddUserIPLimitLoginResp
	58,  // 128: openim.openchat.admin.admin.DelUserIPLimitLogin:output_type -> openim.openchat.admin.DelUserIPLimitLoginResp
	62,  // 129: openim.openchat.admin.admin.SearchIPForbidden:output_type -> openim.openchat.admin.SearchIPForbiddenResp
	64,  // 130: openim.openchat.admin.admin.AddIPForbidden:output_type -> openim.openchat.admin.AddIPForbiddenResp
	66,  // 131: openim.openchat.admin.admin.DelIPForbidden:output_type -> openim.openchat.admin.DelIPForbiddenResp
	72,  // 132: openim.openchat.admin.admin.CancellationUser:output_type -> openim.openchat.admin.CancellationUserResp
	74,  // 133: openim.openchat.admin.admin.BlockUser:output_type -> openim.openchat.admin.BlockUserResp
	76,  // 134: openim.openchat.admin.admin.UnblockUser:output_type -> openim.openchat.admin.UnblockUserResp
	79,  // 135: openim.openchat.admin.admin.SearchBlockUser:output_type -> openim.openchat.admin.SearchBlockUserResp
	82,  // 136: openim.openchat.admin.admin.FindUserBlockInfo:output_type -> openim.openchat.admin.FindUserBlockInfoResp
	68,  // 137: openim.openchat.admin.admin.CheckRegisterForbidden:output_type -> openim.openchat.admin.CheckRegisterForbiddenResp
	70,  // 138: openim.openchat.admin.admin.CheckLoginForbidden:output_type -> openim.openchat.admin.CheckLoginForbiddenResp
	84,  // 139: openim.openchat.admin.admin.CreateToken:output_type -> openim.openchat.admin.CreateTokenResp
	86,  // 140: openim.openchat.admin.admin.ParseToken:output_type -> openim.openchat.admin.ParseTokenResp
	90,  // 141: openim.openchat.admin.admin.AddApplet:output_type -> openim.openchat.admin.AddAppletResp
	92,  // 142: openim.openchat.admin.admin.DelApplet:output_type -> openim.openchat.admin.DelAppletResp
	94,  // 143: openim.openchat.admin.admin.UpdateApplet:output_type -> openim.openchat.admin.UpdateAppletResp
	96,  // 144: openim.openchat.admin.admin.FindApplet:output_type -> openim.openchat.admin.FindAppletResp
	98,  // 145: openim.openchat.admin.admin.SearchApplet:output_type -> openim.openchat.admin.SearchAppletResp
	104, // 146: openim.openchat.admin.admin.GetClientConfig:output_type -> openim.openchat.admin.GetClientConfigResp
	100, // 147: openim.openchat.admin.admin.SetClientConfig:output_type -> openim.openchat.admin.SetClientConfigResp
	102, // 148: openim.openchat.admin.admin.DelClientConfig:output_type -> openim.openchat.admin.DelClientConfigResp
	106, // 149: openim.openchat.admin.admin.GetUserToken:output_type -> openim.openchat.admin.GetUserTokenResp
	88,  // 150: openim.openchat.admin.admin.InvalidateToken:output_type -> openim.openchat.admin.InvalidateTokenResp
	111, // 151: openim.openchat.admin.admin.UpdateMenuInfo:output_type -> openim.openchat.admin.UpdateMenuResp
	114, // 152: openim.openchat.admin.admin.MenuInfo:output_type -> openim.openchat.admin.MenuInfoResp
	115, // 153: openim.openchat.admin.admin.AddMenu:output_type -> openim.openchat.admin.AddMenuResp
	116, // 154: openim.openchat.admin.admin.DelMenu:output_type -> openim.openchat.admin.DelMenuResp
	117, // 155: openim.openchat.admin.admin.SearchMenu:output_type -> openim.openchat.admin.SearchMenuResp
	118, // 156: openim.openchat.admin.admin.DisableMenu:output_type -> openim.openchat.admin.DisableMenuResp
	102, // [102:157] is the sub-list for method output_type
	47,  // [47:102] is the sub-list for method input_type
	47,  // [47:47] is the sub-list for extension type_name
	47,  // [47:47] is the sub-list for extension extendee
	0,   // [0:47] is the sub-list for field type_name
}

func init() { file_openchat_admin_admin_proto_init() }
func file_openchat_admin_admin_proto_init() {
	if File_openchat_admin_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openchat_admin_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAdminPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAdminPasswordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAdminAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAdminAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAdminAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAdminAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAdminAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAdminAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDefaultFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDefaultFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDefaultFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDefaultFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultFriendAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDefaultGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDefaultGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDefaultGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDefaultGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInvitationCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInvitationCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserIPLimitLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitUserLoginIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserIPLimitLoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIPLimitLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserIPLimitLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserIPLimitLoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserIPLimitLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserIPLimitLoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPForbidden); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPForbiddenAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIPForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIPForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIPForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIPForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelIPForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelIPForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRegisterForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRegisterForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginForbiddenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginForbiddenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancellationUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancellationUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBlockUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBlockUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserBlockInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserBlockInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAppletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAppletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClientConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClientConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelClientConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelClientConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMenuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMenuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMenuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMenuResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMenuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableMenuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMenuResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMenuResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMenuResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openchat_admin_admin_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableMenuResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openchat_admin_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   122,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openchat_admin_admin_proto_goTypes,
		DependencyIndexes: file_openchat_admin_admin_proto_depIdxs,
		MessageInfos:      file_openchat_admin_admin_proto_msgTypes,
	}.Build()
	File_openchat_admin_admin_proto = out.File
	file_openchat_admin_admin_proto_rawDesc = nil
	file_openchat_admin_admin_proto_goTypes = nil
	file_openchat_admin_admin_proto_depIdxs = nil
}
