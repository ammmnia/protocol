// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openchat/admin/admin.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminAccount

	// no validation rules for AdminToken

	// no validation rules for Nickname

	// no validation rules for FaceURL

	// no validation rules for Level

	// no validation rules for AdminUserID

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRespMultiError, or
// nil if none found.
func (m *LogoutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRespMultiError(errors)
	}

	return nil
}

// LogoutRespMultiError is an error wrapping multiple validation errors
// returned by LogoutResp.ValidateAll() if the designated constraints aren't met.
type LogoutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRespMultiError) AllErrors() []error { return m }

// LogoutRespValidationError is the validation error returned by
// LogoutResp.Validate if the designated constraints aren't met.
type LogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRespValidationError) ErrorName() string { return "LogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRespValidationError{}

// Validate checks the field values on AddAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAdminAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAdminAccountReqMultiError, or nil if none found.
func (m *AddAdminAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAdminAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Nickname

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	if len(errors) > 0 {
		return AddAdminAccountReqMultiError(errors)
	}

	return nil
}

// AddAdminAccountReqMultiError is an error wrapping multiple validation errors
// returned by AddAdminAccountReq.ValidateAll() if the designated constraints
// aren't met.
type AddAdminAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAdminAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAdminAccountReqMultiError) AllErrors() []error { return m }

// AddAdminAccountReqValidationError is the validation error returned by
// AddAdminAccountReq.Validate if the designated constraints aren't met.
type AddAdminAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAdminAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAdminAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAdminAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAdminAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAdminAccountReqValidationError) ErrorName() string {
	return "AddAdminAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddAdminAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAdminAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAdminAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAdminAccountReqValidationError{}

// Validate checks the field values on AddAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAdminAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAdminAccountRespMultiError, or nil if none found.
func (m *AddAdminAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAdminAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAdminAccountRespMultiError(errors)
	}

	return nil
}

// AddAdminAccountRespMultiError is an error wrapping multiple validation
// errors returned by AddAdminAccountResp.ValidateAll() if the designated
// constraints aren't met.
type AddAdminAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAdminAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAdminAccountRespMultiError) AllErrors() []error { return m }

// AddAdminAccountRespValidationError is the validation error returned by
// AddAdminAccountResp.Validate if the designated constraints aren't met.
type AddAdminAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAdminAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAdminAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAdminAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAdminAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAdminAccountRespValidationError) ErrorName() string {
	return "AddAdminAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddAdminAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAdminAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAdminAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAdminAccountRespValidationError{}

// Validate checks the field values on AdminUpdateInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateInfoReqMultiError, or nil if none found.
func (m *AdminUpdateInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Nickname

	// no validation rules for Status

	// no validation rules for RoleCode

	// no validation rules for Desc

	if len(errors) > 0 {
		return AdminUpdateInfoReqMultiError(errors)
	}

	return nil
}

// AdminUpdateInfoReqMultiError is an error wrapping multiple validation errors
// returned by AdminUpdateInfoReq.ValidateAll() if the designated constraints
// aren't met.
type AdminUpdateInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateInfoReqMultiError) AllErrors() []error { return m }

// AdminUpdateInfoReqValidationError is the validation error returned by
// AdminUpdateInfoReq.Validate if the designated constraints aren't met.
type AdminUpdateInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateInfoReqValidationError) ErrorName() string {
	return "AdminUpdateInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateInfoReqValidationError{}

// Validate checks the field values on AdminUpdateInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateInfoRespMultiError, or nil if none found.
func (m *AdminUpdateInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Account

	// no validation rules for Nickname

	// no validation rules for FaceURL

	if len(errors) > 0 {
		return AdminUpdateInfoRespMultiError(errors)
	}

	return nil
}

// AdminUpdateInfoRespMultiError is an error wrapping multiple validation
// errors returned by AdminUpdateInfoResp.ValidateAll() if the designated
// constraints aren't met.
type AdminUpdateInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateInfoRespMultiError) AllErrors() []error { return m }

// AdminUpdateInfoRespValidationError is the validation error returned by
// AdminUpdateInfoResp.Validate if the designated constraints aren't met.
type AdminUpdateInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateInfoRespValidationError) ErrorName() string {
	return "AdminUpdateInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateInfoRespValidationError{}

// Validate checks the field values on ChangePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordReqMultiError, or nil if none found.
func (m *ChangePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	if len(errors) > 0 {
		return ChangePasswordReqMultiError(errors)
	}

	return nil
}

// ChangePasswordReqMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordReqMultiError) AllErrors() []error { return m }

// ChangePasswordReqValidationError is the validation error returned by
// ChangePasswordReq.Validate if the designated constraints aren't met.
type ChangePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordReqValidationError) ErrorName() string {
	return "ChangePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordReqValidationError{}

// Validate checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRespMultiError, or nil if none found.
func (m *ChangePasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePasswordRespMultiError(errors)
	}

	return nil
}

// ChangePasswordRespMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordResp.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRespMultiError) AllErrors() []error { return m }

// ChangePasswordRespValidationError is the validation error returned by
// ChangePasswordResp.Validate if the designated constraints aren't met.
type ChangePasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRespValidationError) ErrorName() string {
	return "ChangePasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRespValidationError{}

// Validate checks the field values on GetAdminInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminInfoReqMultiError, or nil if none found.
func (m *GetAdminInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetAdminInfoReqMultiError(errors)
	}

	return nil
}

// GetAdminInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetAdminInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetAdminInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminInfoReqMultiError) AllErrors() []error { return m }

// GetAdminInfoReqValidationError is the validation error returned by
// GetAdminInfoReq.Validate if the designated constraints aren't met.
type GetAdminInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminInfoReqValidationError) ErrorName() string { return "GetAdminInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminInfoReqValidationError{}

// Validate checks the field values on ChangeAdminPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAdminPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAdminPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAdminPasswordReqMultiError, or nil if none found.
func (m *ChangeAdminPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAdminPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for CurrentPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return ChangeAdminPasswordReqMultiError(errors)
	}

	return nil
}

// ChangeAdminPasswordReqMultiError is an error wrapping multiple validation
// errors returned by ChangeAdminPasswordReq.ValidateAll() if the designated
// constraints aren't met.
type ChangeAdminPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAdminPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAdminPasswordReqMultiError) AllErrors() []error { return m }

// ChangeAdminPasswordReqValidationError is the validation error returned by
// ChangeAdminPasswordReq.Validate if the designated constraints aren't met.
type ChangeAdminPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAdminPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAdminPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAdminPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAdminPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAdminPasswordReqValidationError) ErrorName() string {
	return "ChangeAdminPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAdminPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAdminPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAdminPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAdminPasswordReqValidationError{}

// Validate checks the field values on ChangeAdminPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAdminPasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAdminPasswordResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAdminPasswordRespMultiError, or nil if none found.
func (m *ChangeAdminPasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAdminPasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeAdminPasswordRespMultiError(errors)
	}

	return nil
}

// ChangeAdminPasswordRespMultiError is an error wrapping multiple validation
// errors returned by ChangeAdminPasswordResp.ValidateAll() if the designated
// constraints aren't met.
type ChangeAdminPasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAdminPasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAdminPasswordRespMultiError) AllErrors() []error { return m }

// ChangeAdminPasswordRespValidationError is the validation error returned by
// ChangeAdminPasswordResp.Validate if the designated constraints aren't met.
type ChangeAdminPasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAdminPasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAdminPasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAdminPasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAdminPasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAdminPasswordRespValidationError) ErrorName() string {
	return "ChangeAdminPasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAdminPasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAdminPasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAdminPasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAdminPasswordRespValidationError{}

// Validate checks the field values on DelAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelAdminAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelAdminAccountReqMultiError, or nil if none found.
func (m *DelAdminAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelAdminAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelAdminAccountReqMultiError(errors)
	}

	return nil
}

// DelAdminAccountReqMultiError is an error wrapping multiple validation errors
// returned by DelAdminAccountReq.ValidateAll() if the designated constraints
// aren't met.
type DelAdminAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelAdminAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelAdminAccountReqMultiError) AllErrors() []error { return m }

// DelAdminAccountReqValidationError is the validation error returned by
// DelAdminAccountReq.Validate if the designated constraints aren't met.
type DelAdminAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelAdminAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelAdminAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelAdminAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelAdminAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelAdminAccountReqValidationError) ErrorName() string {
	return "DelAdminAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelAdminAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelAdminAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelAdminAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelAdminAccountReqValidationError{}

// Validate checks the field values on DelAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelAdminAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelAdminAccountRespMultiError, or nil if none found.
func (m *DelAdminAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelAdminAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelAdminAccountRespMultiError(errors)
	}

	return nil
}

// DelAdminAccountRespMultiError is an error wrapping multiple validation
// errors returned by DelAdminAccountResp.ValidateAll() if the designated
// constraints aren't met.
type DelAdminAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelAdminAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelAdminAccountRespMultiError) AllErrors() []error { return m }

// DelAdminAccountRespValidationError is the validation error returned by
// DelAdminAccountResp.Validate if the designated constraints aren't met.
type DelAdminAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelAdminAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelAdminAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelAdminAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelAdminAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelAdminAccountRespValidationError) ErrorName() string {
	return "DelAdminAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelAdminAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelAdminAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelAdminAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelAdminAccountRespValidationError{}

// Validate checks the field values on SearchAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAdminAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAdminAccountReqMultiError, or nil if none found.
func (m *SearchAdminAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAdminAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchAdminAccountReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchAdminAccountReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchAdminAccountReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Nickname

	// no validation rules for RoleId

	// no validation rules for OpUserName

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return SearchAdminAccountReqMultiError(errors)
	}

	return nil
}

// SearchAdminAccountReqMultiError is an error wrapping multiple validation
// errors returned by SearchAdminAccountReq.ValidateAll() if the designated
// constraints aren't met.
type SearchAdminAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAdminAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAdminAccountReqMultiError) AllErrors() []error { return m }

// SearchAdminAccountReqValidationError is the validation error returned by
// SearchAdminAccountReq.Validate if the designated constraints aren't met.
type SearchAdminAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAdminAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAdminAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAdminAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAdminAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAdminAccountReqValidationError) ErrorName() string {
	return "SearchAdminAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAdminAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAdminAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAdminAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAdminAccountReqValidationError{}

// Validate checks the field values on SearchAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAdminAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAdminAccountRespMultiError, or nil if none found.
func (m *SearchAdminAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAdminAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Pages

	for idx, item := range m.GetAdminAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAdminAccountRespValidationError{
						field:  fmt.Sprintf("AdminAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAdminAccountRespValidationError{
						field:  fmt.Sprintf("AdminAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAdminAccountRespValidationError{
					field:  fmt.Sprintf("AdminAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchAdminAccountRespMultiError(errors)
	}

	return nil
}

// SearchAdminAccountRespMultiError is an error wrapping multiple validation
// errors returned by SearchAdminAccountResp.ValidateAll() if the designated
// constraints aren't met.
type SearchAdminAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAdminAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAdminAccountRespMultiError) AllErrors() []error { return m }

// SearchAdminAccountRespValidationError is the validation error returned by
// SearchAdminAccountResp.Validate if the designated constraints aren't met.
type SearchAdminAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAdminAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAdminAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAdminAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAdminAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAdminAccountRespValidationError) ErrorName() string {
	return "SearchAdminAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAdminAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAdminAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAdminAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAdminAccountRespValidationError{}

// Validate checks the field values on GetAdminInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminInfoRespMultiError, or nil if none found.
func (m *GetAdminInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for FaceURL

	// no validation rules for Nickname

	// no validation rules for UserID

	// no validation rules for Desc

	// no validation rules for RoleCode

	// no validation rules for RoleName

	// no validation rules for Status

	// no validation rules for UpdateBy

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return GetAdminInfoRespMultiError(errors)
	}

	return nil
}

// GetAdminInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetAdminInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetAdminInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminInfoRespMultiError) AllErrors() []error { return m }

// GetAdminInfoRespValidationError is the validation error returned by
// GetAdminInfoResp.Validate if the designated constraints aren't met.
type GetAdminInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminInfoRespValidationError) ErrorName() string { return "GetAdminInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminInfoRespValidationError{}

// Validate checks the field values on DisableAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableAdminAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableAdminAccountReqMultiError, or nil if none found.
func (m *DisableAdminAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableAdminAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Status

	if len(errors) > 0 {
		return DisableAdminAccountReqMultiError(errors)
	}

	return nil
}

// DisableAdminAccountReqMultiError is an error wrapping multiple validation
// errors returned by DisableAdminAccountReq.ValidateAll() if the designated
// constraints aren't met.
type DisableAdminAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableAdminAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableAdminAccountReqMultiError) AllErrors() []error { return m }

// DisableAdminAccountReqValidationError is the validation error returned by
// DisableAdminAccountReq.Validate if the designated constraints aren't met.
type DisableAdminAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableAdminAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableAdminAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableAdminAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableAdminAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableAdminAccountReqValidationError) ErrorName() string {
	return "DisableAdminAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e DisableAdminAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableAdminAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableAdminAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableAdminAccountReqValidationError{}

// Validate checks the field values on DisableAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableAdminAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableAdminAccountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableAdminAccountRespMultiError, or nil if none found.
func (m *DisableAdminAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableAdminAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableAdminAccountRespMultiError(errors)
	}

	return nil
}

// DisableAdminAccountRespMultiError is an error wrapping multiple validation
// errors returned by DisableAdminAccountResp.ValidateAll() if the designated
// constraints aren't met.
type DisableAdminAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableAdminAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableAdminAccountRespMultiError) AllErrors() []error { return m }

// DisableAdminAccountRespValidationError is the validation error returned by
// DisableAdminAccountResp.Validate if the designated constraints aren't met.
type DisableAdminAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableAdminAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableAdminAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableAdminAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableAdminAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableAdminAccountRespValidationError) ErrorName() string {
	return "DisableAdminAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e DisableAdminAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableAdminAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableAdminAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableAdminAccountRespValidationError{}

// Validate checks the field values on CreateTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateTokenReqMultiError,
// or nil if none found.
func (m *CreateTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Account

	// no validation rules for UserType

	if len(errors) > 0 {
		return CreateTokenReqMultiError(errors)
	}

	return nil
}

// CreateTokenReqMultiError is an error wrapping multiple validation errors
// returned by CreateTokenReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenReqMultiError) AllErrors() []error { return m }

// CreateTokenReqValidationError is the validation error returned by
// CreateTokenReq.Validate if the designated constraints aren't met.
type CreateTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenReqValidationError) ErrorName() string { return "CreateTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenReqValidationError{}

// Validate checks the field values on CreateTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTokenRespMultiError, or nil if none found.
func (m *CreateTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return CreateTokenRespMultiError(errors)
	}

	return nil
}

// CreateTokenRespMultiError is an error wrapping multiple validation errors
// returned by CreateTokenResp.ValidateAll() if the designated constraints
// aren't met.
type CreateTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenRespMultiError) AllErrors() []error { return m }

// CreateTokenRespValidationError is the validation error returned by
// CreateTokenResp.Validate if the designated constraints aren't met.
type CreateTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenRespValidationError) ErrorName() string { return "CreateTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenRespValidationError{}

// Validate checks the field values on ParseTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseTokenReqMultiError, or
// nil if none found.
func (m *ParseTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ParseTokenReqMultiError(errors)
	}

	return nil
}

// ParseTokenReqMultiError is an error wrapping multiple validation errors
// returned by ParseTokenReq.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenReqMultiError) AllErrors() []error { return m }

// ParseTokenReqValidationError is the validation error returned by
// ParseTokenReq.Validate if the designated constraints aren't met.
type ParseTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenReqValidationError) ErrorName() string { return "ParseTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenReqValidationError{}

// Validate checks the field values on ParseTokenResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseTokenRespMultiError,
// or nil if none found.
func (m *ParseTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Account

	// no validation rules for UserType

	// no validation rules for ExpireTimeSeconds

	if len(errors) > 0 {
		return ParseTokenRespMultiError(errors)
	}

	return nil
}

// ParseTokenRespMultiError is an error wrapping multiple validation errors
// returned by ParseTokenResp.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenRespMultiError) AllErrors() []error { return m }

// ParseTokenRespValidationError is the validation error returned by
// ParseTokenResp.Validate if the designated constraints aren't met.
type ParseTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenRespValidationError) ErrorName() string { return "ParseTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenRespValidationError{}

// Validate checks the field values on InvalidateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateTokenReqMultiError, or nil if none found.
func (m *InvalidateTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return InvalidateTokenReqMultiError(errors)
	}

	return nil
}

// InvalidateTokenReqMultiError is an error wrapping multiple validation errors
// returned by InvalidateTokenReq.ValidateAll() if the designated constraints
// aren't met.
type InvalidateTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateTokenReqMultiError) AllErrors() []error { return m }

// InvalidateTokenReqValidationError is the validation error returned by
// InvalidateTokenReq.Validate if the designated constraints aren't met.
type InvalidateTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateTokenReqValidationError) ErrorName() string {
	return "InvalidateTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateTokenReqValidationError{}

// Validate checks the field values on InvalidateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateTokenRespMultiError, or nil if none found.
func (m *InvalidateTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InvalidateTokenRespMultiError(errors)
	}

	return nil
}

// InvalidateTokenRespMultiError is an error wrapping multiple validation
// errors returned by InvalidateTokenResp.ValidateAll() if the designated
// constraints aren't met.
type InvalidateTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateTokenRespMultiError) AllErrors() []error { return m }

// InvalidateTokenRespValidationError is the validation error returned by
// InvalidateTokenResp.Validate if the designated constraints aren't met.
type InvalidateTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateTokenRespValidationError) ErrorName() string {
	return "InvalidateTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateTokenRespValidationError{}

// Validate checks the field values on GetUserTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenReqMultiError, or nil if none found.
func (m *GetUserTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserTokenReqMultiError(errors)
	}

	return nil
}

// GetUserTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetUserTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenReqMultiError) AllErrors() []error { return m }

// GetUserTokenReqValidationError is the validation error returned by
// GetUserTokenReq.Validate if the designated constraints aren't met.
type GetUserTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenReqValidationError) ErrorName() string { return "GetUserTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenReqValidationError{}

// Validate checks the field values on GetUserTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenRespMultiError, or nil if none found.
func (m *GetUserTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokensMap

	if len(errors) > 0 {
		return GetUserTokenRespMultiError(errors)
	}

	return nil
}

// GetUserTokenRespMultiError is an error wrapping multiple validation errors
// returned by GetUserTokenResp.ValidateAll() if the designated constraints
// aren't met.
type GetUserTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenRespMultiError) AllErrors() []error { return m }

// GetUserTokenRespValidationError is the validation error returned by
// GetUserTokenResp.Validate if the designated constraints aren't met.
type GetUserTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenRespValidationError) ErrorName() string { return "GetUserTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenRespValidationError{}

// Validate checks the field values on UpdateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateMenuReqMultiError, or
// nil if none found.
func (m *UpdateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for MenuType

	// no validation rules for MenuParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for IsCache

	// no validation rules for Status

	// no validation rules for MenuId

	if len(errors) > 0 {
		return UpdateMenuReqMultiError(errors)
	}

	return nil
}

// UpdateMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuReqMultiError) AllErrors() []error { return m }

// UpdateMenuReqValidationError is the validation error returned by
// UpdateMenuReq.Validate if the designated constraints aren't met.
type UpdateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReqValidationError) ErrorName() string { return "UpdateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReqValidationError{}

// Validate checks the field values on MenuInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuInfoReqMultiError, or
// nil if none found.
func (m *MenuInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	if len(errors) > 0 {
		return MenuInfoReqMultiError(errors)
	}

	return nil
}

// MenuInfoReqMultiError is an error wrapping multiple validation errors
// returned by MenuInfoReq.ValidateAll() if the designated constraints aren't met.
type MenuInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuInfoReqMultiError) AllErrors() []error { return m }

// MenuInfoReqValidationError is the validation error returned by
// MenuInfoReq.Validate if the designated constraints aren't met.
type MenuInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuInfoReqValidationError) ErrorName() string { return "MenuInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e MenuInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuInfoReqValidationError{}

// Validate checks the field values on AddMenuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddMenuReqMultiError, or
// nil if none found.
func (m *AddMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for MenuType

	// no validation rules for MenuParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for IsCache

	// no validation rules for Status

	// no validation rules for Desc

	if len(errors) > 0 {
		return AddMenuReqMultiError(errors)
	}

	return nil
}

// AddMenuReqMultiError is an error wrapping multiple validation errors
// returned by AddMenuReq.ValidateAll() if the designated constraints aren't met.
type AddMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMenuReqMultiError) AllErrors() []error { return m }

// AddMenuReqValidationError is the validation error returned by
// AddMenuReq.Validate if the designated constraints aren't met.
type AddMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMenuReqValidationError) ErrorName() string { return "AddMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e AddMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMenuReqValidationError{}

// Validate checks the field values on DelMenuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelMenuReqMultiError, or
// nil if none found.
func (m *DelMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	if len(errors) > 0 {
		return DelMenuReqMultiError(errors)
	}

	return nil
}

// DelMenuReqMultiError is an error wrapping multiple validation errors
// returned by DelMenuReq.ValidateAll() if the designated constraints aren't met.
type DelMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMenuReqMultiError) AllErrors() []error { return m }

// DelMenuReqValidationError is the validation error returned by
// DelMenuReq.Validate if the designated constraints aren't met.
type DelMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMenuReqValidationError) ErrorName() string { return "DelMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DelMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMenuReqValidationError{}

// Validate checks the field values on UpdateMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateMenuRespMultiError,
// or nil if none found.
func (m *UpdateMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMenuRespMultiError(errors)
	}

	return nil
}

// UpdateMenuRespMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuRespMultiError) AllErrors() []error { return m }

// UpdateMenuRespValidationError is the validation error returned by
// UpdateMenuResp.Validate if the designated constraints aren't met.
type UpdateMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuRespValidationError) ErrorName() string { return "UpdateMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuRespValidationError{}

// Validate checks the field values on SearchMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchMenuReqMultiError, or
// nil if none found.
func (m *SearchMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for MenuType

	// no validation rules for Path

	// no validation rules for Status

	// no validation rules for RoleCode

	// no validation rules for UpdateBy

	// no validation rules for StartTime

	// no validation rules for EndTime

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchMenuReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchMenuReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchMenuReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchMenuReqMultiError(errors)
	}

	return nil
}

// SearchMenuReqMultiError is an error wrapping multiple validation errors
// returned by SearchMenuReq.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuReqMultiError) AllErrors() []error { return m }

// SearchMenuReqValidationError is the validation error returned by
// SearchMenuReq.Validate if the designated constraints aren't met.
type SearchMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuReqValidationError) ErrorName() string { return "SearchMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuReqValidationError{}

// Validate checks the field values on DisableMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisableMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisableMenuReqMultiError,
// or nil if none found.
func (m *DisableMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	// no validation rules for Status

	if len(errors) > 0 {
		return DisableMenuReqMultiError(errors)
	}

	return nil
}

// DisableMenuReqMultiError is an error wrapping multiple validation errors
// returned by DisableMenuReq.ValidateAll() if the designated constraints
// aren't met.
type DisableMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableMenuReqMultiError) AllErrors() []error { return m }

// DisableMenuReqValidationError is the validation error returned by
// DisableMenuReq.Validate if the designated constraints aren't met.
type DisableMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableMenuReqValidationError) ErrorName() string { return "DisableMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DisableMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableMenuReqValidationError{}

// Validate checks the field values on SearchMenuTreeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchMenuTreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuTreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchMenuTreeReqMultiError, or nil if none found.
func (m *SearchMenuTreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuTreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SearchMenuTreeReqMultiError(errors)
	}

	return nil
}

// SearchMenuTreeReqMultiError is an error wrapping multiple validation errors
// returned by SearchMenuTreeReq.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuTreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuTreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuTreeReqMultiError) AllErrors() []error { return m }

// SearchMenuTreeReqValidationError is the validation error returned by
// SearchMenuTreeReq.Validate if the designated constraints aren't met.
type SearchMenuTreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuTreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuTreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuTreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuTreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuTreeReqValidationError) ErrorName() string {
	return "SearchMenuTreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchMenuTreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuTreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuTreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuTreeReqValidationError{}

// Validate checks the field values on SearchMenuTreeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchMenuTreeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuTreeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchMenuTreeRespMultiError, or nil if none found.
func (m *SearchMenuTreeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuTreeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuTreeMap

	if len(errors) > 0 {
		return SearchMenuTreeRespMultiError(errors)
	}

	return nil
}

// SearchMenuTreeRespMultiError is an error wrapping multiple validation errors
// returned by SearchMenuTreeResp.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuTreeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuTreeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuTreeRespMultiError) AllErrors() []error { return m }

// SearchMenuTreeRespValidationError is the validation error returned by
// SearchMenuTreeResp.Validate if the designated constraints aren't met.
type SearchMenuTreeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuTreeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuTreeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuTreeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuTreeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuTreeRespValidationError) ErrorName() string {
	return "SearchMenuTreeRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchMenuTreeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuTreeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuTreeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuTreeRespValidationError{}

// Validate checks the field values on MenuInfoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuInfoRespMultiError, or
// nil if none found.
func (m *MenuInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for MenuType

	// no validation rules for MenuParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for IsCache

	// no validation rules for Status

	// no validation rules for MenuId

	// no validation rules for UpdateBy

	// no validation rules for UpdateTime

	// no validation rules for RoleCode

	if len(errors) > 0 {
		return MenuInfoRespMultiError(errors)
	}

	return nil
}

// MenuInfoRespMultiError is an error wrapping multiple validation errors
// returned by MenuInfoResp.ValidateAll() if the designated constraints aren't met.
type MenuInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuInfoRespMultiError) AllErrors() []error { return m }

// MenuInfoRespValidationError is the validation error returned by
// MenuInfoResp.Validate if the designated constraints aren't met.
type MenuInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuInfoRespValidationError) ErrorName() string { return "MenuInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e MenuInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuInfoRespValidationError{}

// Validate checks the field values on AddMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddMenuRespMultiError, or
// nil if none found.
func (m *AddMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddMenuRespMultiError(errors)
	}

	return nil
}

// AddMenuRespMultiError is an error wrapping multiple validation errors
// returned by AddMenuResp.ValidateAll() if the designated constraints aren't met.
type AddMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMenuRespMultiError) AllErrors() []error { return m }

// AddMenuRespValidationError is the validation error returned by
// AddMenuResp.Validate if the designated constraints aren't met.
type AddMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMenuRespValidationError) ErrorName() string { return "AddMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e AddMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMenuRespValidationError{}

// Validate checks the field values on DelMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelMenuRespMultiError, or
// nil if none found.
func (m *DelMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelMenuRespMultiError(errors)
	}

	return nil
}

// DelMenuRespMultiError is an error wrapping multiple validation errors
// returned by DelMenuResp.ValidateAll() if the designated constraints aren't met.
type DelMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMenuRespMultiError) AllErrors() []error { return m }

// DelMenuRespValidationError is the validation error returned by
// DelMenuResp.Validate if the designated constraints aren't met.
type DelMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMenuRespValidationError) ErrorName() string { return "DelMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e DelMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMenuRespValidationError{}

// Validate checks the field values on SearchMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchMenuRespMultiError,
// or nil if none found.
func (m *SearchMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenuInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchMenuRespValidationError{
						field:  fmt.Sprintf("MenuInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchMenuRespValidationError{
						field:  fmt.Sprintf("MenuInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchMenuRespValidationError{
					field:  fmt.Sprintf("MenuInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Pages

	if len(errors) > 0 {
		return SearchMenuRespMultiError(errors)
	}

	return nil
}

// SearchMenuRespMultiError is an error wrapping multiple validation errors
// returned by SearchMenuResp.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuRespMultiError) AllErrors() []error { return m }

// SearchMenuRespValidationError is the validation error returned by
// SearchMenuResp.Validate if the designated constraints aren't met.
type SearchMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuRespValidationError) ErrorName() string { return "SearchMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e SearchMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuRespValidationError{}

// Validate checks the field values on DisableMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DisableMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableMenuRespMultiError, or nil if none found.
func (m *DisableMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableMenuRespMultiError(errors)
	}

	return nil
}

// DisableMenuRespMultiError is an error wrapping multiple validation errors
// returned by DisableMenuResp.ValidateAll() if the designated constraints
// aren't met.
type DisableMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableMenuRespMultiError) AllErrors() []error { return m }

// DisableMenuRespValidationError is the validation error returned by
// DisableMenuResp.Validate if the designated constraints aren't met.
type DisableMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableMenuRespValidationError) ErrorName() string { return "DisableMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e DisableMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableMenuRespValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleReqMultiError, or
// nil if none found.
func (m *UpdateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateRoleReqMultiError(errors)
	}

	return nil
}

// UpdateRoleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReqMultiError) AllErrors() []error { return m }

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on UpdateRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleRespMultiError,
// or nil if none found.
func (m *UpdateRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleRespMultiError(errors)
	}

	return nil
}

// UpdateRoleRespMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRespMultiError) AllErrors() []error { return m }

// UpdateRoleRespValidationError is the validation error returned by
// UpdateRoleResp.Validate if the designated constraints aren't met.
type UpdateRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRespValidationError) ErrorName() string { return "UpdateRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRespValidationError{}

// Validate checks the field values on RoleInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleInfoReqMultiError, or
// nil if none found.
func (m *RoleInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleInfoReqMultiError(errors)
	}

	return nil
}

// RoleInfoReqMultiError is an error wrapping multiple validation errors
// returned by RoleInfoReq.ValidateAll() if the designated constraints aren't met.
type RoleInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleInfoReqMultiError) AllErrors() []error { return m }

// RoleInfoReqValidationError is the validation error returned by
// RoleInfoReq.Validate if the designated constraints aren't met.
type RoleInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleInfoReqValidationError) ErrorName() string { return "RoleInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleInfoReqValidationError{}

// Validate checks the field values on RoleInfoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleInfoRespMultiError, or
// nil if none found.
func (m *RoleInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for UpdateBy

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return RoleInfoRespMultiError(errors)
	}

	return nil
}

// RoleInfoRespMultiError is an error wrapping multiple validation errors
// returned by RoleInfoResp.ValidateAll() if the designated constraints aren't met.
type RoleInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleInfoRespMultiError) AllErrors() []error { return m }

// RoleInfoRespValidationError is the validation error returned by
// RoleInfoResp.Validate if the designated constraints aren't met.
type RoleInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleInfoRespValidationError) ErrorName() string { return "RoleInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleInfoRespValidationError{}

// Validate checks the field values on AddRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRoleReqMultiError, or
// nil if none found.
func (m *AddRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleName

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	if len(errors) > 0 {
		return AddRoleReqMultiError(errors)
	}

	return nil
}

// AddRoleReqMultiError is an error wrapping multiple validation errors
// returned by AddRoleReq.ValidateAll() if the designated constraints aren't met.
type AddRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleReqMultiError) AllErrors() []error { return m }

// AddRoleReqValidationError is the validation error returned by
// AddRoleReq.Validate if the designated constraints aren't met.
type AddRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleReqValidationError) ErrorName() string { return "AddRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleReqValidationError{}

// Validate checks the field values on AddRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRoleRespMultiError, or
// nil if none found.
func (m *AddRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRoleRespMultiError(errors)
	}

	return nil
}

// AddRoleRespMultiError is an error wrapping multiple validation errors
// returned by AddRoleResp.ValidateAll() if the designated constraints aren't met.
type AddRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleRespMultiError) AllErrors() []error { return m }

// AddRoleRespValidationError is the validation error returned by
// AddRoleResp.Validate if the designated constraints aren't met.
type AddRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleRespValidationError) ErrorName() string { return "AddRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleRespValidationError{}

// Validate checks the field values on DelRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRoleReqMultiError, or
// nil if none found.
func (m *DelRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return DelRoleReqMultiError(errors)
	}

	return nil
}

// DelRoleReqMultiError is an error wrapping multiple validation errors
// returned by DelRoleReq.ValidateAll() if the designated constraints aren't met.
type DelRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleReqMultiError) AllErrors() []error { return m }

// DelRoleReqValidationError is the validation error returned by
// DelRoleReq.Validate if the designated constraints aren't met.
type DelRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleReqValidationError) ErrorName() string { return "DelRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleReqValidationError{}

// Validate checks the field values on DelRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRoleRespMultiError, or
// nil if none found.
func (m *DelRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelRoleRespMultiError(errors)
	}

	return nil
}

// DelRoleRespMultiError is an error wrapping multiple validation errors
// returned by DelRoleResp.ValidateAll() if the designated constraints aren't met.
type DelRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleRespMultiError) AllErrors() []error { return m }

// DelRoleRespValidationError is the validation error returned by
// DelRoleResp.Validate if the designated constraints aren't met.
type DelRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleRespValidationError) ErrorName() string { return "DelRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleRespValidationError{}

// Validate checks the field values on SearchRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRoleReqMultiError, or
// nil if none found.
func (m *SearchRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleName

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for UpdateBy

	// no validation rules for StartTime

	// no validation rules for EndTime

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchRoleReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchRoleReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchRoleReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchRoleReqMultiError(errors)
	}

	return nil
}

// SearchRoleReqMultiError is an error wrapping multiple validation errors
// returned by SearchRoleReq.ValidateAll() if the designated constraints
// aren't met.
type SearchRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRoleReqMultiError) AllErrors() []error { return m }

// SearchRoleReqValidationError is the validation error returned by
// SearchRoleReq.Validate if the designated constraints aren't met.
type SearchRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRoleReqValidationError) ErrorName() string { return "SearchRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRoleReqValidationError{}

// Validate checks the field values on SearchRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRoleRespMultiError,
// or nil if none found.
func (m *SearchRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoleInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchRoleRespValidationError{
						field:  fmt.Sprintf("RoleInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchRoleRespValidationError{
						field:  fmt.Sprintf("RoleInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchRoleRespValidationError{
					field:  fmt.Sprintf("RoleInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Pages

	if len(errors) > 0 {
		return SearchRoleRespMultiError(errors)
	}

	return nil
}

// SearchRoleRespMultiError is an error wrapping multiple validation errors
// returned by SearchRoleResp.ValidateAll() if the designated constraints
// aren't met.
type SearchRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRoleRespMultiError) AllErrors() []error { return m }

// SearchRoleRespValidationError is the validation error returned by
// SearchRoleResp.Validate if the designated constraints aren't met.
type SearchRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRoleRespValidationError) ErrorName() string { return "SearchRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e SearchRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRoleRespValidationError{}

// Validate checks the field values on DisableRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisableRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisableRoleReqMultiError,
// or nil if none found.
func (m *DisableRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Status

	if len(errors) > 0 {
		return DisableRoleReqMultiError(errors)
	}

	return nil
}

// DisableRoleReqMultiError is an error wrapping multiple validation errors
// returned by DisableRoleReq.ValidateAll() if the designated constraints
// aren't met.
type DisableRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableRoleReqMultiError) AllErrors() []error { return m }

// DisableRoleReqValidationError is the validation error returned by
// DisableRoleReq.Validate if the designated constraints aren't met.
type DisableRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableRoleReqValidationError) ErrorName() string { return "DisableRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DisableRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableRoleReqValidationError{}

// Validate checks the field values on DisableRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DisableRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableRoleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableRoleRespMultiError, or nil if none found.
func (m *DisableRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableRoleRespMultiError(errors)
	}

	return nil
}

// DisableRoleRespMultiError is an error wrapping multiple validation errors
// returned by DisableRoleResp.ValidateAll() if the designated constraints
// aren't met.
type DisableRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableRoleRespMultiError) AllErrors() []error { return m }

// DisableRoleRespValidationError is the validation error returned by
// DisableRoleResp.Validate if the designated constraints aren't met.
type DisableRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableRoleRespValidationError) ErrorName() string { return "DisableRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e DisableRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableRoleRespValidationError{}

// Validate checks the field values on UpdateRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuReqMultiError, or nil if none found.
func (m *UpdateRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return UpdateRoleMenuReqMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuReqMultiError) AllErrors() []error { return m }

// UpdateRoleMenuReqValidationError is the validation error returned by
// UpdateRoleMenuReq.Validate if the designated constraints aren't met.
type UpdateRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuReqValidationError) ErrorName() string {
	return "UpdateRoleMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuReqValidationError{}

// Validate checks the field values on UpdateRoleMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuRespMultiError, or nil if none found.
func (m *UpdateRoleMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleMenuRespMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuRespMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleMenuResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuRespMultiError) AllErrors() []error { return m }

// UpdateRoleMenuRespValidationError is the validation error returned by
// UpdateRoleMenuResp.Validate if the designated constraints aren't met.
type UpdateRoleMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuRespValidationError) ErrorName() string {
	return "UpdateRoleMenuRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuRespValidationError{}

// Validate checks the field values on RoleMenuInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleMenuInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleMenuInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleMenuInfoReqMultiError, or nil if none found.
func (m *RoleMenuInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleMenuInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleMenuInfoReqMultiError(errors)
	}

	return nil
}

// RoleMenuInfoReqMultiError is an error wrapping multiple validation errors
// returned by RoleMenuInfoReq.ValidateAll() if the designated constraints
// aren't met.
type RoleMenuInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMenuInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMenuInfoReqMultiError) AllErrors() []error { return m }

// RoleMenuInfoReqValidationError is the validation error returned by
// RoleMenuInfoReq.Validate if the designated constraints aren't met.
type RoleMenuInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleMenuInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleMenuInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleMenuInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleMenuInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleMenuInfoReqValidationError) ErrorName() string { return "RoleMenuInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleMenuInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleMenuInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleMenuInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleMenuInfoReqValidationError{}

// Validate checks the field values on RoleMenuInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleMenuInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleMenuInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleMenuInfoRespMultiError, or nil if none found.
func (m *RoleMenuInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleMenuInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleMenuInfoRespMultiError(errors)
	}

	return nil
}

// RoleMenuInfoRespMultiError is an error wrapping multiple validation errors
// returned by RoleMenuInfoResp.ValidateAll() if the designated constraints
// aren't met.
type RoleMenuInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMenuInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMenuInfoRespMultiError) AllErrors() []error { return m }

// RoleMenuInfoRespValidationError is the validation error returned by
// RoleMenuInfoResp.Validate if the designated constraints aren't met.
type RoleMenuInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleMenuInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleMenuInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleMenuInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleMenuInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleMenuInfoRespValidationError) ErrorName() string { return "RoleMenuInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleMenuInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleMenuInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleMenuInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleMenuInfoRespValidationError{}

// Validate checks the field values on AddRoleMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRoleMenuReqMultiError,
// or nil if none found.
func (m *AddRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return AddRoleMenuReqMultiError(errors)
	}

	return nil
}

// AddRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by AddRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type AddRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleMenuReqMultiError) AllErrors() []error { return m }

// AddRoleMenuReqValidationError is the validation error returned by
// AddRoleMenuReq.Validate if the designated constraints aren't met.
type AddRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleMenuReqValidationError) ErrorName() string { return "AddRoleMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleMenuReqValidationError{}

// Validate checks the field values on AddRoleMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddRoleMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRoleMenuRespMultiError, or nil if none found.
func (m *AddRoleMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRoleMenuRespMultiError(errors)
	}

	return nil
}

// AddRoleMenuRespMultiError is an error wrapping multiple validation errors
// returned by AddRoleMenuResp.ValidateAll() if the designated constraints
// aren't met.
type AddRoleMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleMenuRespMultiError) AllErrors() []error { return m }

// AddRoleMenuRespValidationError is the validation error returned by
// AddRoleMenuResp.Validate if the designated constraints aren't met.
type AddRoleMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleMenuRespValidationError) ErrorName() string { return "AddRoleMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleMenuRespValidationError{}

// Validate checks the field values on DelRoleMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRoleMenuReqMultiError,
// or nil if none found.
func (m *DelRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return DelRoleMenuReqMultiError(errors)
	}

	return nil
}

// DelRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by DelRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type DelRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleMenuReqMultiError) AllErrors() []error { return m }

// DelRoleMenuReqValidationError is the validation error returned by
// DelRoleMenuReq.Validate if the designated constraints aren't met.
type DelRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleMenuReqValidationError) ErrorName() string { return "DelRoleMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleMenuReqValidationError{}

// Validate checks the field values on DelRoleMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelRoleMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelRoleMenuRespMultiError, or nil if none found.
func (m *DelRoleMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelRoleMenuRespMultiError(errors)
	}

	return nil
}

// DelRoleMenuRespMultiError is an error wrapping multiple validation errors
// returned by DelRoleMenuResp.ValidateAll() if the designated constraints
// aren't met.
type DelRoleMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleMenuRespMultiError) AllErrors() []error { return m }

// DelRoleMenuRespValidationError is the validation error returned by
// DelRoleMenuResp.Validate if the designated constraints aren't met.
type DelRoleMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleMenuRespValidationError) ErrorName() string { return "DelRoleMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleMenuRespValidationError{}
