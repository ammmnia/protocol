// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openchat/admin/admin.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminAccount

	// no validation rules for AdminToken

	// no validation rules for Nickname

	// no validation rules for FaceURL

	// no validation rules for Level

	// no validation rules for AdminUserID

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRespMultiError, or
// nil if none found.
func (m *LogoutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRespMultiError(errors)
	}

	return nil
}

// LogoutRespMultiError is an error wrapping multiple validation errors
// returned by LogoutResp.ValidateAll() if the designated constraints aren't met.
type LogoutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRespMultiError) AllErrors() []error { return m }

// LogoutRespValidationError is the validation error returned by
// LogoutResp.Validate if the designated constraints aren't met.
type LogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRespValidationError) ErrorName() string { return "LogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRespValidationError{}

// Validate checks the field values on AddAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAdminAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAdminAccountReqMultiError, or nil if none found.
func (m *AddAdminAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAdminAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Username

	// no validation rules for RoleId

	// no validation rules for Desc

	// no validation rules for Status

	if len(errors) > 0 {
		return AddAdminAccountReqMultiError(errors)
	}

	return nil
}

// AddAdminAccountReqMultiError is an error wrapping multiple validation errors
// returned by AddAdminAccountReq.ValidateAll() if the designated constraints
// aren't met.
type AddAdminAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAdminAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAdminAccountReqMultiError) AllErrors() []error { return m }

// AddAdminAccountReqValidationError is the validation error returned by
// AddAdminAccountReq.Validate if the designated constraints aren't met.
type AddAdminAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAdminAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAdminAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAdminAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAdminAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAdminAccountReqValidationError) ErrorName() string {
	return "AddAdminAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddAdminAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAdminAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAdminAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAdminAccountReqValidationError{}

// Validate checks the field values on AddAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAdminAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAdminAccountRespMultiError, or nil if none found.
func (m *AddAdminAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAdminAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAdminAccountRespMultiError(errors)
	}

	return nil
}

// AddAdminAccountRespMultiError is an error wrapping multiple validation
// errors returned by AddAdminAccountResp.ValidateAll() if the designated
// constraints aren't met.
type AddAdminAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAdminAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAdminAccountRespMultiError) AllErrors() []error { return m }

// AddAdminAccountRespValidationError is the validation error returned by
// AddAdminAccountResp.Validate if the designated constraints aren't met.
type AddAdminAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAdminAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAdminAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAdminAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAdminAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAdminAccountRespValidationError) ErrorName() string {
	return "AddAdminAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddAdminAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAdminAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAdminAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAdminAccountRespValidationError{}

// Validate checks the field values on AdminUpdateInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateInfoReqMultiError, or nil if none found.
func (m *AdminUpdateInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateInfoReqValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateInfoReqValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateInfoReqValidationError{
				field:  "Password",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsername()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Username",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Username",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsername()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateInfoReqValidationError{
				field:  "Username",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateInfoReqValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRoleId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "RoleId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "RoleId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateInfoReqValidationError{
				field:  "RoleId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDesc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Desc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateInfoReqValidationError{
					field:  "Desc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateInfoReqValidationError{
				field:  "Desc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminUpdateInfoReqMultiError(errors)
	}

	return nil
}

// AdminUpdateInfoReqMultiError is an error wrapping multiple validation errors
// returned by AdminUpdateInfoReq.ValidateAll() if the designated constraints
// aren't met.
type AdminUpdateInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateInfoReqMultiError) AllErrors() []error { return m }

// AdminUpdateInfoReqValidationError is the validation error returned by
// AdminUpdateInfoReq.Validate if the designated constraints aren't met.
type AdminUpdateInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateInfoReqValidationError) ErrorName() string {
	return "AdminUpdateInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateInfoReqValidationError{}

// Validate checks the field values on AdminUpdateInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateInfoRespMultiError, or nil if none found.
func (m *AdminUpdateInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Account

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for FaceURL

	if len(errors) > 0 {
		return AdminUpdateInfoRespMultiError(errors)
	}

	return nil
}

// AdminUpdateInfoRespMultiError is an error wrapping multiple validation
// errors returned by AdminUpdateInfoResp.ValidateAll() if the designated
// constraints aren't met.
type AdminUpdateInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateInfoRespMultiError) AllErrors() []error { return m }

// AdminUpdateInfoRespValidationError is the validation error returned by
// AdminUpdateInfoResp.Validate if the designated constraints aren't met.
type AdminUpdateInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateInfoRespValidationError) ErrorName() string {
	return "AdminUpdateInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateInfoRespValidationError{}

// Validate checks the field values on ChangePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordReqMultiError, or nil if none found.
func (m *ChangePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	if len(errors) > 0 {
		return ChangePasswordReqMultiError(errors)
	}

	return nil
}

// ChangePasswordReqMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordReqMultiError) AllErrors() []error { return m }

// ChangePasswordReqValidationError is the validation error returned by
// ChangePasswordReq.Validate if the designated constraints aren't met.
type ChangePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordReqValidationError) ErrorName() string {
	return "ChangePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordReqValidationError{}

// Validate checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRespMultiError, or nil if none found.
func (m *ChangePasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePasswordRespMultiError(errors)
	}

	return nil
}

// ChangePasswordRespMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordResp.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRespMultiError) AllErrors() []error { return m }

// ChangePasswordRespValidationError is the validation error returned by
// ChangePasswordResp.Validate if the designated constraints aren't met.
type ChangePasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRespValidationError) ErrorName() string {
	return "ChangePasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRespValidationError{}

// Validate checks the field values on GetAdminInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminInfoReqMultiError, or nil if none found.
func (m *GetAdminInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetAdminInfoReqMultiError(errors)
	}

	return nil
}

// GetAdminInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetAdminInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetAdminInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminInfoReqMultiError) AllErrors() []error { return m }

// GetAdminInfoReqValidationError is the validation error returned by
// GetAdminInfoReq.Validate if the designated constraints aren't met.
type GetAdminInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminInfoReqValidationError) ErrorName() string { return "GetAdminInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminInfoReqValidationError{}

// Validate checks the field values on ChangeAdminPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAdminPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAdminPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAdminPasswordReqMultiError, or nil if none found.
func (m *ChangeAdminPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAdminPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for CurrentPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return ChangeAdminPasswordReqMultiError(errors)
	}

	return nil
}

// ChangeAdminPasswordReqMultiError is an error wrapping multiple validation
// errors returned by ChangeAdminPasswordReq.ValidateAll() if the designated
// constraints aren't met.
type ChangeAdminPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAdminPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAdminPasswordReqMultiError) AllErrors() []error { return m }

// ChangeAdminPasswordReqValidationError is the validation error returned by
// ChangeAdminPasswordReq.Validate if the designated constraints aren't met.
type ChangeAdminPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAdminPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAdminPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAdminPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAdminPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAdminPasswordReqValidationError) ErrorName() string {
	return "ChangeAdminPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAdminPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAdminPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAdminPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAdminPasswordReqValidationError{}

// Validate checks the field values on ChangeAdminPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAdminPasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAdminPasswordResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAdminPasswordRespMultiError, or nil if none found.
func (m *ChangeAdminPasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAdminPasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeAdminPasswordRespMultiError(errors)
	}

	return nil
}

// ChangeAdminPasswordRespMultiError is an error wrapping multiple validation
// errors returned by ChangeAdminPasswordResp.ValidateAll() if the designated
// constraints aren't met.
type ChangeAdminPasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAdminPasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAdminPasswordRespMultiError) AllErrors() []error { return m }

// ChangeAdminPasswordRespValidationError is the validation error returned by
// ChangeAdminPasswordResp.Validate if the designated constraints aren't met.
type ChangeAdminPasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAdminPasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAdminPasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAdminPasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAdminPasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAdminPasswordRespValidationError) ErrorName() string {
	return "ChangeAdminPasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAdminPasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAdminPasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAdminPasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAdminPasswordRespValidationError{}

// Validate checks the field values on DelAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelAdminAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelAdminAccountReqMultiError, or nil if none found.
func (m *DelAdminAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelAdminAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelAdminAccountReqMultiError(errors)
	}

	return nil
}

// DelAdminAccountReqMultiError is an error wrapping multiple validation errors
// returned by DelAdminAccountReq.ValidateAll() if the designated constraints
// aren't met.
type DelAdminAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelAdminAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelAdminAccountReqMultiError) AllErrors() []error { return m }

// DelAdminAccountReqValidationError is the validation error returned by
// DelAdminAccountReq.Validate if the designated constraints aren't met.
type DelAdminAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelAdminAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelAdminAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelAdminAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelAdminAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelAdminAccountReqValidationError) ErrorName() string {
	return "DelAdminAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelAdminAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelAdminAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelAdminAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelAdminAccountReqValidationError{}

// Validate checks the field values on DelAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelAdminAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelAdminAccountRespMultiError, or nil if none found.
func (m *DelAdminAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelAdminAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelAdminAccountRespMultiError(errors)
	}

	return nil
}

// DelAdminAccountRespMultiError is an error wrapping multiple validation
// errors returned by DelAdminAccountResp.ValidateAll() if the designated
// constraints aren't met.
type DelAdminAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelAdminAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelAdminAccountRespMultiError) AllErrors() []error { return m }

// DelAdminAccountRespValidationError is the validation error returned by
// DelAdminAccountResp.Validate if the designated constraints aren't met.
type DelAdminAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelAdminAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelAdminAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelAdminAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelAdminAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelAdminAccountRespValidationError) ErrorName() string {
	return "DelAdminAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelAdminAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelAdminAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelAdminAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelAdminAccountRespValidationError{}

// Validate checks the field values on SearchAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAdminAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAdminAccountReqMultiError, or nil if none found.
func (m *SearchAdminAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAdminAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchAdminAccountReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchAdminAccountReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchAdminAccountReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserName

	// no validation rules for RoleId

	// no validation rules for OpUserName

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return SearchAdminAccountReqMultiError(errors)
	}

	return nil
}

// SearchAdminAccountReqMultiError is an error wrapping multiple validation
// errors returned by SearchAdminAccountReq.ValidateAll() if the designated
// constraints aren't met.
type SearchAdminAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAdminAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAdminAccountReqMultiError) AllErrors() []error { return m }

// SearchAdminAccountReqValidationError is the validation error returned by
// SearchAdminAccountReq.Validate if the designated constraints aren't met.
type SearchAdminAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAdminAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAdminAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAdminAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAdminAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAdminAccountReqValidationError) ErrorName() string {
	return "SearchAdminAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAdminAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAdminAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAdminAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAdminAccountReqValidationError{}

// Validate checks the field values on SearchAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAdminAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAdminAccountRespMultiError, or nil if none found.
func (m *SearchAdminAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAdminAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Pages

	for idx, item := range m.GetAdminAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAdminAccountRespValidationError{
						field:  fmt.Sprintf("AdminAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAdminAccountRespValidationError{
						field:  fmt.Sprintf("AdminAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAdminAccountRespValidationError{
					field:  fmt.Sprintf("AdminAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchAdminAccountRespMultiError(errors)
	}

	return nil
}

// SearchAdminAccountRespMultiError is an error wrapping multiple validation
// errors returned by SearchAdminAccountResp.ValidateAll() if the designated
// constraints aren't met.
type SearchAdminAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAdminAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAdminAccountRespMultiError) AllErrors() []error { return m }

// SearchAdminAccountRespValidationError is the validation error returned by
// SearchAdminAccountResp.Validate if the designated constraints aren't met.
type SearchAdminAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAdminAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAdminAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAdminAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAdminAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAdminAccountRespValidationError) ErrorName() string {
	return "SearchAdminAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAdminAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAdminAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAdminAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAdminAccountRespValidationError{}

// Validate checks the field values on GetAdminInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminInfoRespMultiError, or nil if none found.
func (m *GetAdminInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for UserName

	// no validation rules for FaceURL

	// no validation rules for Nickname

	// no validation rules for UserID

	// no validation rules for Desc

	// no validation rules for CreateTime

	// no validation rules for RoleId

	// no validation rules for Status

	// no validation rules for OpUserName

	// no validation rules for OpTime

	if len(errors) > 0 {
		return GetAdminInfoRespMultiError(errors)
	}

	return nil
}

// GetAdminInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetAdminInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetAdminInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminInfoRespMultiError) AllErrors() []error { return m }

// GetAdminInfoRespValidationError is the validation error returned by
// GetAdminInfoResp.Validate if the designated constraints aren't met.
type GetAdminInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminInfoRespValidationError) ErrorName() string { return "GetAdminInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminInfoRespValidationError{}

// Validate checks the field values on DisableAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableAdminAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableAdminAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableAdminAccountReqMultiError, or nil if none found.
func (m *DisableAdminAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableAdminAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Status

	if len(errors) > 0 {
		return DisableAdminAccountReqMultiError(errors)
	}

	return nil
}

// DisableAdminAccountReqMultiError is an error wrapping multiple validation
// errors returned by DisableAdminAccountReq.ValidateAll() if the designated
// constraints aren't met.
type DisableAdminAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableAdminAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableAdminAccountReqMultiError) AllErrors() []error { return m }

// DisableAdminAccountReqValidationError is the validation error returned by
// DisableAdminAccountReq.Validate if the designated constraints aren't met.
type DisableAdminAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableAdminAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableAdminAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableAdminAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableAdminAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableAdminAccountReqValidationError) ErrorName() string {
	return "DisableAdminAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e DisableAdminAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableAdminAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableAdminAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableAdminAccountReqValidationError{}

// Validate checks the field values on DisableAdminAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableAdminAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableAdminAccountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableAdminAccountRespMultiError, or nil if none found.
func (m *DisableAdminAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableAdminAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableAdminAccountRespMultiError(errors)
	}

	return nil
}

// DisableAdminAccountRespMultiError is an error wrapping multiple validation
// errors returned by DisableAdminAccountResp.ValidateAll() if the designated
// constraints aren't met.
type DisableAdminAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableAdminAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableAdminAccountRespMultiError) AllErrors() []error { return m }

// DisableAdminAccountRespValidationError is the validation error returned by
// DisableAdminAccountResp.Validate if the designated constraints aren't met.
type DisableAdminAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableAdminAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableAdminAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableAdminAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableAdminAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableAdminAccountRespValidationError) ErrorName() string {
	return "DisableAdminAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e DisableAdminAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableAdminAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableAdminAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableAdminAccountRespValidationError{}

// Validate checks the field values on AddDefaultFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDefaultFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDefaultFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDefaultFriendReqMultiError, or nil if none found.
func (m *AddDefaultFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDefaultFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddDefaultFriendReqMultiError(errors)
	}

	return nil
}

// AddDefaultFriendReqMultiError is an error wrapping multiple validation
// errors returned by AddDefaultFriendReq.ValidateAll() if the designated
// constraints aren't met.
type AddDefaultFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDefaultFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDefaultFriendReqMultiError) AllErrors() []error { return m }

// AddDefaultFriendReqValidationError is the validation error returned by
// AddDefaultFriendReq.Validate if the designated constraints aren't met.
type AddDefaultFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDefaultFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDefaultFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDefaultFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDefaultFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDefaultFriendReqValidationError) ErrorName() string {
	return "AddDefaultFriendReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddDefaultFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDefaultFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDefaultFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDefaultFriendReqValidationError{}

// Validate checks the field values on AddDefaultFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDefaultFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDefaultFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDefaultFriendRespMultiError, or nil if none found.
func (m *AddDefaultFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDefaultFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddDefaultFriendRespMultiError(errors)
	}

	return nil
}

// AddDefaultFriendRespMultiError is an error wrapping multiple validation
// errors returned by AddDefaultFriendResp.ValidateAll() if the designated
// constraints aren't met.
type AddDefaultFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDefaultFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDefaultFriendRespMultiError) AllErrors() []error { return m }

// AddDefaultFriendRespValidationError is the validation error returned by
// AddDefaultFriendResp.Validate if the designated constraints aren't met.
type AddDefaultFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDefaultFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDefaultFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDefaultFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDefaultFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDefaultFriendRespValidationError) ErrorName() string {
	return "AddDefaultFriendRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddDefaultFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDefaultFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDefaultFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDefaultFriendRespValidationError{}

// Validate checks the field values on DelDefaultFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelDefaultFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDefaultFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelDefaultFriendReqMultiError, or nil if none found.
func (m *DelDefaultFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDefaultFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelDefaultFriendReqMultiError(errors)
	}

	return nil
}

// DelDefaultFriendReqMultiError is an error wrapping multiple validation
// errors returned by DelDefaultFriendReq.ValidateAll() if the designated
// constraints aren't met.
type DelDefaultFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDefaultFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDefaultFriendReqMultiError) AllErrors() []error { return m }

// DelDefaultFriendReqValidationError is the validation error returned by
// DelDefaultFriendReq.Validate if the designated constraints aren't met.
type DelDefaultFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDefaultFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDefaultFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDefaultFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDefaultFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDefaultFriendReqValidationError) ErrorName() string {
	return "DelDefaultFriendReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelDefaultFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDefaultFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDefaultFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDefaultFriendReqValidationError{}

// Validate checks the field values on DelDefaultFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelDefaultFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDefaultFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelDefaultFriendRespMultiError, or nil if none found.
func (m *DelDefaultFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDefaultFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelDefaultFriendRespMultiError(errors)
	}

	return nil
}

// DelDefaultFriendRespMultiError is an error wrapping multiple validation
// errors returned by DelDefaultFriendResp.ValidateAll() if the designated
// constraints aren't met.
type DelDefaultFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDefaultFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDefaultFriendRespMultiError) AllErrors() []error { return m }

// DelDefaultFriendRespValidationError is the validation error returned by
// DelDefaultFriendResp.Validate if the designated constraints aren't met.
type DelDefaultFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDefaultFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDefaultFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDefaultFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDefaultFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDefaultFriendRespValidationError) ErrorName() string {
	return "DelDefaultFriendRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelDefaultFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDefaultFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDefaultFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDefaultFriendRespValidationError{}

// Validate checks the field values on FindDefaultFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindDefaultFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindDefaultFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindDefaultFriendReqMultiError, or nil if none found.
func (m *FindDefaultFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindDefaultFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindDefaultFriendReqMultiError(errors)
	}

	return nil
}

// FindDefaultFriendReqMultiError is an error wrapping multiple validation
// errors returned by FindDefaultFriendReq.ValidateAll() if the designated
// constraints aren't met.
type FindDefaultFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindDefaultFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindDefaultFriendReqMultiError) AllErrors() []error { return m }

// FindDefaultFriendReqValidationError is the validation error returned by
// FindDefaultFriendReq.Validate if the designated constraints aren't met.
type FindDefaultFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindDefaultFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindDefaultFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindDefaultFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindDefaultFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindDefaultFriendReqValidationError) ErrorName() string {
	return "FindDefaultFriendReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindDefaultFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindDefaultFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindDefaultFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindDefaultFriendReqValidationError{}

// Validate checks the field values on FindDefaultFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindDefaultFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindDefaultFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindDefaultFriendRespMultiError, or nil if none found.
func (m *FindDefaultFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindDefaultFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindDefaultFriendRespMultiError(errors)
	}

	return nil
}

// FindDefaultFriendRespMultiError is an error wrapping multiple validation
// errors returned by FindDefaultFriendResp.ValidateAll() if the designated
// constraints aren't met.
type FindDefaultFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindDefaultFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindDefaultFriendRespMultiError) AllErrors() []error { return m }

// FindDefaultFriendRespValidationError is the validation error returned by
// FindDefaultFriendResp.Validate if the designated constraints aren't met.
type FindDefaultFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindDefaultFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindDefaultFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindDefaultFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindDefaultFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindDefaultFriendRespValidationError) ErrorName() string {
	return "FindDefaultFriendRespValidationError"
}

// Error satisfies the builtin error interface
func (e FindDefaultFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindDefaultFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindDefaultFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindDefaultFriendRespValidationError{}

// Validate checks the field values on SearchDefaultFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchDefaultFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDefaultFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchDefaultFriendReqMultiError, or nil if none found.
func (m *SearchDefaultFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDefaultFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchDefaultFriendReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchDefaultFriendReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchDefaultFriendReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchDefaultFriendReqMultiError(errors)
	}

	return nil
}

// SearchDefaultFriendReqMultiError is an error wrapping multiple validation
// errors returned by SearchDefaultFriendReq.ValidateAll() if the designated
// constraints aren't met.
type SearchDefaultFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDefaultFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDefaultFriendReqMultiError) AllErrors() []error { return m }

// SearchDefaultFriendReqValidationError is the validation error returned by
// SearchDefaultFriendReq.Validate if the designated constraints aren't met.
type SearchDefaultFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDefaultFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDefaultFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDefaultFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDefaultFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDefaultFriendReqValidationError) ErrorName() string {
	return "SearchDefaultFriendReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDefaultFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDefaultFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDefaultFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDefaultFriendReqValidationError{}

// Validate checks the field values on DefaultFriendAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DefaultFriendAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DefaultFriendAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DefaultFriendAttributeMultiError, or nil if none found.
func (m *DefaultFriendAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *DefaultFriendAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for CreateTime

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DefaultFriendAttributeValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DefaultFriendAttributeValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DefaultFriendAttributeValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DefaultFriendAttributeMultiError(errors)
	}

	return nil
}

// DefaultFriendAttributeMultiError is an error wrapping multiple validation
// errors returned by DefaultFriendAttribute.ValidateAll() if the designated
// constraints aren't met.
type DefaultFriendAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultFriendAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultFriendAttributeMultiError) AllErrors() []error { return m }

// DefaultFriendAttributeValidationError is the validation error returned by
// DefaultFriendAttribute.Validate if the designated constraints aren't met.
type DefaultFriendAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultFriendAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultFriendAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultFriendAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultFriendAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultFriendAttributeValidationError) ErrorName() string {
	return "DefaultFriendAttributeValidationError"
}

// Error satisfies the builtin error interface
func (e DefaultFriendAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultFriendAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultFriendAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultFriendAttributeValidationError{}

// Validate checks the field values on SearchDefaultFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchDefaultFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDefaultFriendResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchDefaultFriendRespMultiError, or nil if none found.
func (m *SearchDefaultFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDefaultFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchDefaultFriendRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchDefaultFriendRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchDefaultFriendRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchDefaultFriendRespMultiError(errors)
	}

	return nil
}

// SearchDefaultFriendRespMultiError is an error wrapping multiple validation
// errors returned by SearchDefaultFriendResp.ValidateAll() if the designated
// constraints aren't met.
type SearchDefaultFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDefaultFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDefaultFriendRespMultiError) AllErrors() []error { return m }

// SearchDefaultFriendRespValidationError is the validation error returned by
// SearchDefaultFriendResp.Validate if the designated constraints aren't met.
type SearchDefaultFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDefaultFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDefaultFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDefaultFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDefaultFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDefaultFriendRespValidationError) ErrorName() string {
	return "SearchDefaultFriendRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDefaultFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDefaultFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDefaultFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDefaultFriendRespValidationError{}

// Validate checks the field values on AddDefaultGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDefaultGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDefaultGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDefaultGroupReqMultiError, or nil if none found.
func (m *AddDefaultGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDefaultGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddDefaultGroupReqMultiError(errors)
	}

	return nil
}

// AddDefaultGroupReqMultiError is an error wrapping multiple validation errors
// returned by AddDefaultGroupReq.ValidateAll() if the designated constraints
// aren't met.
type AddDefaultGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDefaultGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDefaultGroupReqMultiError) AllErrors() []error { return m }

// AddDefaultGroupReqValidationError is the validation error returned by
// AddDefaultGroupReq.Validate if the designated constraints aren't met.
type AddDefaultGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDefaultGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDefaultGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDefaultGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDefaultGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDefaultGroupReqValidationError) ErrorName() string {
	return "AddDefaultGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddDefaultGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDefaultGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDefaultGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDefaultGroupReqValidationError{}

// Validate checks the field values on AddDefaultGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDefaultGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDefaultGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDefaultGroupRespMultiError, or nil if none found.
func (m *AddDefaultGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDefaultGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddDefaultGroupRespMultiError(errors)
	}

	return nil
}

// AddDefaultGroupRespMultiError is an error wrapping multiple validation
// errors returned by AddDefaultGroupResp.ValidateAll() if the designated
// constraints aren't met.
type AddDefaultGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDefaultGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDefaultGroupRespMultiError) AllErrors() []error { return m }

// AddDefaultGroupRespValidationError is the validation error returned by
// AddDefaultGroupResp.Validate if the designated constraints aren't met.
type AddDefaultGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDefaultGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDefaultGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDefaultGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDefaultGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDefaultGroupRespValidationError) ErrorName() string {
	return "AddDefaultGroupRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddDefaultGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDefaultGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDefaultGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDefaultGroupRespValidationError{}

// Validate checks the field values on DelDefaultGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelDefaultGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDefaultGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelDefaultGroupReqMultiError, or nil if none found.
func (m *DelDefaultGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDefaultGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelDefaultGroupReqMultiError(errors)
	}

	return nil
}

// DelDefaultGroupReqMultiError is an error wrapping multiple validation errors
// returned by DelDefaultGroupReq.ValidateAll() if the designated constraints
// aren't met.
type DelDefaultGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDefaultGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDefaultGroupReqMultiError) AllErrors() []error { return m }

// DelDefaultGroupReqValidationError is the validation error returned by
// DelDefaultGroupReq.Validate if the designated constraints aren't met.
type DelDefaultGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDefaultGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDefaultGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDefaultGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDefaultGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDefaultGroupReqValidationError) ErrorName() string {
	return "DelDefaultGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelDefaultGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDefaultGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDefaultGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDefaultGroupReqValidationError{}

// Validate checks the field values on DelDefaultGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelDefaultGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDefaultGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelDefaultGroupRespMultiError, or nil if none found.
func (m *DelDefaultGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDefaultGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelDefaultGroupRespMultiError(errors)
	}

	return nil
}

// DelDefaultGroupRespMultiError is an error wrapping multiple validation
// errors returned by DelDefaultGroupResp.ValidateAll() if the designated
// constraints aren't met.
type DelDefaultGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDefaultGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDefaultGroupRespMultiError) AllErrors() []error { return m }

// DelDefaultGroupRespValidationError is the validation error returned by
// DelDefaultGroupResp.Validate if the designated constraints aren't met.
type DelDefaultGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDefaultGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDefaultGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDefaultGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDefaultGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDefaultGroupRespValidationError) ErrorName() string {
	return "DelDefaultGroupRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelDefaultGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDefaultGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDefaultGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDefaultGroupRespValidationError{}

// Validate checks the field values on FindDefaultGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindDefaultGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindDefaultGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindDefaultGroupReqMultiError, or nil if none found.
func (m *FindDefaultGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindDefaultGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindDefaultGroupReqMultiError(errors)
	}

	return nil
}

// FindDefaultGroupReqMultiError is an error wrapping multiple validation
// errors returned by FindDefaultGroupReq.ValidateAll() if the designated
// constraints aren't met.
type FindDefaultGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindDefaultGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindDefaultGroupReqMultiError) AllErrors() []error { return m }

// FindDefaultGroupReqValidationError is the validation error returned by
// FindDefaultGroupReq.Validate if the designated constraints aren't met.
type FindDefaultGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindDefaultGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindDefaultGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindDefaultGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindDefaultGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindDefaultGroupReqValidationError) ErrorName() string {
	return "FindDefaultGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindDefaultGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindDefaultGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindDefaultGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindDefaultGroupReqValidationError{}

// Validate checks the field values on FindDefaultGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindDefaultGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindDefaultGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindDefaultGroupRespMultiError, or nil if none found.
func (m *FindDefaultGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindDefaultGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindDefaultGroupRespMultiError(errors)
	}

	return nil
}

// FindDefaultGroupRespMultiError is an error wrapping multiple validation
// errors returned by FindDefaultGroupResp.ValidateAll() if the designated
// constraints aren't met.
type FindDefaultGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindDefaultGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindDefaultGroupRespMultiError) AllErrors() []error { return m }

// FindDefaultGroupRespValidationError is the validation error returned by
// FindDefaultGroupResp.Validate if the designated constraints aren't met.
type FindDefaultGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindDefaultGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindDefaultGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindDefaultGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindDefaultGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindDefaultGroupRespValidationError) ErrorName() string {
	return "FindDefaultGroupRespValidationError"
}

// Error satisfies the builtin error interface
func (e FindDefaultGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindDefaultGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindDefaultGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindDefaultGroupRespValidationError{}

// Validate checks the field values on SearchDefaultGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchDefaultGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDefaultGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchDefaultGroupReqMultiError, or nil if none found.
func (m *SearchDefaultGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDefaultGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchDefaultGroupReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchDefaultGroupReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchDefaultGroupReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchDefaultGroupReqMultiError(errors)
	}

	return nil
}

// SearchDefaultGroupReqMultiError is an error wrapping multiple validation
// errors returned by SearchDefaultGroupReq.ValidateAll() if the designated
// constraints aren't met.
type SearchDefaultGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDefaultGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDefaultGroupReqMultiError) AllErrors() []error { return m }

// SearchDefaultGroupReqValidationError is the validation error returned by
// SearchDefaultGroupReq.Validate if the designated constraints aren't met.
type SearchDefaultGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDefaultGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDefaultGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDefaultGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDefaultGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDefaultGroupReqValidationError) ErrorName() string {
	return "SearchDefaultGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDefaultGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDefaultGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDefaultGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDefaultGroupReqValidationError{}

// Validate checks the field values on GroupAttribute with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupAttributeMultiError,
// or nil if none found.
func (m *GroupAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupID

	// no validation rules for CreateTime

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupAttributeValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupAttributeValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupAttributeValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupAttributeMultiError(errors)
	}

	return nil
}

// GroupAttributeMultiError is an error wrapping multiple validation errors
// returned by GroupAttribute.ValidateAll() if the designated constraints
// aren't met.
type GroupAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupAttributeMultiError) AllErrors() []error { return m }

// GroupAttributeValidationError is the validation error returned by
// GroupAttribute.Validate if the designated constraints aren't met.
type GroupAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupAttributeValidationError) ErrorName() string { return "GroupAttributeValidationError" }

// Error satisfies the builtin error interface
func (e GroupAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupAttributeValidationError{}

// Validate checks the field values on SearchDefaultGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchDefaultGroupResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchDefaultGroupResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchDefaultGroupRespMultiError, or nil if none found.
func (m *SearchDefaultGroupResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchDefaultGroupResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return SearchDefaultGroupRespMultiError(errors)
	}

	return nil
}

// SearchDefaultGroupRespMultiError is an error wrapping multiple validation
// errors returned by SearchDefaultGroupResp.ValidateAll() if the designated
// constraints aren't met.
type SearchDefaultGroupRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchDefaultGroupRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchDefaultGroupRespMultiError) AllErrors() []error { return m }

// SearchDefaultGroupRespValidationError is the validation error returned by
// SearchDefaultGroupResp.Validate if the designated constraints aren't met.
type SearchDefaultGroupRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchDefaultGroupRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchDefaultGroupRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchDefaultGroupRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchDefaultGroupRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchDefaultGroupRespValidationError) ErrorName() string {
	return "SearchDefaultGroupRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchDefaultGroupRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchDefaultGroupResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchDefaultGroupRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchDefaultGroupRespValidationError{}

// Validate checks the field values on AddInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddInvitationCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddInvitationCodeReqMultiError, or nil if none found.
func (m *AddInvitationCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddInvitationCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddInvitationCodeReqMultiError(errors)
	}

	return nil
}

// AddInvitationCodeReqMultiError is an error wrapping multiple validation
// errors returned by AddInvitationCodeReq.ValidateAll() if the designated
// constraints aren't met.
type AddInvitationCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddInvitationCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddInvitationCodeReqMultiError) AllErrors() []error { return m }

// AddInvitationCodeReqValidationError is the validation error returned by
// AddInvitationCodeReq.Validate if the designated constraints aren't met.
type AddInvitationCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInvitationCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInvitationCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInvitationCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInvitationCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInvitationCodeReqValidationError) ErrorName() string {
	return "AddInvitationCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddInvitationCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInvitationCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInvitationCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInvitationCodeReqValidationError{}

// Validate checks the field values on AddInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddInvitationCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddInvitationCodeRespMultiError, or nil if none found.
func (m *AddInvitationCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddInvitationCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddInvitationCodeRespMultiError(errors)
	}

	return nil
}

// AddInvitationCodeRespMultiError is an error wrapping multiple validation
// errors returned by AddInvitationCodeResp.ValidateAll() if the designated
// constraints aren't met.
type AddInvitationCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddInvitationCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddInvitationCodeRespMultiError) AllErrors() []error { return m }

// AddInvitationCodeRespValidationError is the validation error returned by
// AddInvitationCodeResp.Validate if the designated constraints aren't met.
type AddInvitationCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInvitationCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInvitationCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInvitationCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInvitationCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInvitationCodeRespValidationError) ErrorName() string {
	return "AddInvitationCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddInvitationCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInvitationCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInvitationCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInvitationCodeRespValidationError{}

// Validate checks the field values on GenInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenInvitationCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenInvitationCodeReqMultiError, or nil if none found.
func (m *GenInvitationCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenInvitationCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Len

	// no validation rules for Num

	// no validation rules for Chars

	if len(errors) > 0 {
		return GenInvitationCodeReqMultiError(errors)
	}

	return nil
}

// GenInvitationCodeReqMultiError is an error wrapping multiple validation
// errors returned by GenInvitationCodeReq.ValidateAll() if the designated
// constraints aren't met.
type GenInvitationCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenInvitationCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenInvitationCodeReqMultiError) AllErrors() []error { return m }

// GenInvitationCodeReqValidationError is the validation error returned by
// GenInvitationCodeReq.Validate if the designated constraints aren't met.
type GenInvitationCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenInvitationCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenInvitationCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenInvitationCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenInvitationCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenInvitationCodeReqValidationError) ErrorName() string {
	return "GenInvitationCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GenInvitationCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenInvitationCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenInvitationCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenInvitationCodeReqValidationError{}

// Validate checks the field values on GenInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenInvitationCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenInvitationCodeRespMultiError, or nil if none found.
func (m *GenInvitationCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenInvitationCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenInvitationCodeRespMultiError(errors)
	}

	return nil
}

// GenInvitationCodeRespMultiError is an error wrapping multiple validation
// errors returned by GenInvitationCodeResp.ValidateAll() if the designated
// constraints aren't met.
type GenInvitationCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenInvitationCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenInvitationCodeRespMultiError) AllErrors() []error { return m }

// GenInvitationCodeRespValidationError is the validation error returned by
// GenInvitationCodeResp.Validate if the designated constraints aren't met.
type GenInvitationCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenInvitationCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenInvitationCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenInvitationCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenInvitationCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenInvitationCodeRespValidationError) ErrorName() string {
	return "GenInvitationCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e GenInvitationCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenInvitationCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenInvitationCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenInvitationCodeRespValidationError{}

// Validate checks the field values on FindInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindInvitationCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindInvitationCodeReqMultiError, or nil if none found.
func (m *FindInvitationCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindInvitationCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindInvitationCodeReqMultiError(errors)
	}

	return nil
}

// FindInvitationCodeReqMultiError is an error wrapping multiple validation
// errors returned by FindInvitationCodeReq.ValidateAll() if the designated
// constraints aren't met.
type FindInvitationCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindInvitationCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindInvitationCodeReqMultiError) AllErrors() []error { return m }

// FindInvitationCodeReqValidationError is the validation error returned by
// FindInvitationCodeReq.Validate if the designated constraints aren't met.
type FindInvitationCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindInvitationCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindInvitationCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindInvitationCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindInvitationCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindInvitationCodeReqValidationError) ErrorName() string {
	return "FindInvitationCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindInvitationCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindInvitationCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindInvitationCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindInvitationCodeReqValidationError{}

// Validate checks the field values on FindInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindInvitationCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindInvitationCodeRespMultiError, or nil if none found.
func (m *FindInvitationCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindInvitationCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindInvitationCodeRespValidationError{
						field:  fmt.Sprintf("Codes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindInvitationCodeRespValidationError{
						field:  fmt.Sprintf("Codes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindInvitationCodeRespValidationError{
					field:  fmt.Sprintf("Codes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindInvitationCodeRespMultiError(errors)
	}

	return nil
}

// FindInvitationCodeRespMultiError is an error wrapping multiple validation
// errors returned by FindInvitationCodeResp.ValidateAll() if the designated
// constraints aren't met.
type FindInvitationCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindInvitationCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindInvitationCodeRespMultiError) AllErrors() []error { return m }

// FindInvitationCodeRespValidationError is the validation error returned by
// FindInvitationCodeResp.Validate if the designated constraints aren't met.
type FindInvitationCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindInvitationCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindInvitationCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindInvitationCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindInvitationCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindInvitationCodeRespValidationError) ErrorName() string {
	return "FindInvitationCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e FindInvitationCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindInvitationCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindInvitationCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindInvitationCodeRespValidationError{}

// Validate checks the field values on UseInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UseInvitationCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UseInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UseInvitationCodeReqMultiError, or nil if none found.
func (m *UseInvitationCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UseInvitationCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for UserID

	if len(errors) > 0 {
		return UseInvitationCodeReqMultiError(errors)
	}

	return nil
}

// UseInvitationCodeReqMultiError is an error wrapping multiple validation
// errors returned by UseInvitationCodeReq.ValidateAll() if the designated
// constraints aren't met.
type UseInvitationCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UseInvitationCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UseInvitationCodeReqMultiError) AllErrors() []error { return m }

// UseInvitationCodeReqValidationError is the validation error returned by
// UseInvitationCodeReq.Validate if the designated constraints aren't met.
type UseInvitationCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseInvitationCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseInvitationCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseInvitationCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseInvitationCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseInvitationCodeReqValidationError) ErrorName() string {
	return "UseInvitationCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e UseInvitationCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseInvitationCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseInvitationCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseInvitationCodeReqValidationError{}

// Validate checks the field values on UseInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UseInvitationCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UseInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UseInvitationCodeRespMultiError, or nil if none found.
func (m *UseInvitationCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UseInvitationCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UseInvitationCodeRespMultiError(errors)
	}

	return nil
}

// UseInvitationCodeRespMultiError is an error wrapping multiple validation
// errors returned by UseInvitationCodeResp.ValidateAll() if the designated
// constraints aren't met.
type UseInvitationCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UseInvitationCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UseInvitationCodeRespMultiError) AllErrors() []error { return m }

// UseInvitationCodeRespValidationError is the validation error returned by
// UseInvitationCodeResp.Validate if the designated constraints aren't met.
type UseInvitationCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseInvitationCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseInvitationCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseInvitationCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseInvitationCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseInvitationCodeRespValidationError) ErrorName() string {
	return "UseInvitationCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e UseInvitationCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseInvitationCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseInvitationCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseInvitationCodeRespValidationError{}

// Validate checks the field values on DelInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelInvitationCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelInvitationCodeReqMultiError, or nil if none found.
func (m *DelInvitationCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelInvitationCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelInvitationCodeReqMultiError(errors)
	}

	return nil
}

// DelInvitationCodeReqMultiError is an error wrapping multiple validation
// errors returned by DelInvitationCodeReq.ValidateAll() if the designated
// constraints aren't met.
type DelInvitationCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelInvitationCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelInvitationCodeReqMultiError) AllErrors() []error { return m }

// DelInvitationCodeReqValidationError is the validation error returned by
// DelInvitationCodeReq.Validate if the designated constraints aren't met.
type DelInvitationCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelInvitationCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelInvitationCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelInvitationCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelInvitationCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelInvitationCodeReqValidationError) ErrorName() string {
	return "DelInvitationCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelInvitationCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelInvitationCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelInvitationCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelInvitationCodeReqValidationError{}

// Validate checks the field values on DelInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelInvitationCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelInvitationCodeRespMultiError, or nil if none found.
func (m *DelInvitationCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelInvitationCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelInvitationCodeRespMultiError(errors)
	}

	return nil
}

// DelInvitationCodeRespMultiError is an error wrapping multiple validation
// errors returned by DelInvitationCodeResp.ValidateAll() if the designated
// constraints aren't met.
type DelInvitationCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelInvitationCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelInvitationCodeRespMultiError) AllErrors() []error { return m }

// DelInvitationCodeRespValidationError is the validation error returned by
// DelInvitationCodeResp.Validate if the designated constraints aren't met.
type DelInvitationCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelInvitationCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelInvitationCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelInvitationCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelInvitationCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelInvitationCodeRespValidationError) ErrorName() string {
	return "DelInvitationCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelInvitationCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelInvitationCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelInvitationCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelInvitationCodeRespValidationError{}

// Validate checks the field values on InvitationRegister with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvitationRegister) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvitationRegister with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvitationRegisterMultiError, or nil if none found.
func (m *InvitationRegister) ValidateAll() error {
	return m.validate(true)
}

func (m *InvitationRegister) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvitationCode

	// no validation rules for CreateTime

	// no validation rules for UsedUserID

	if all {
		switch v := interface{}(m.GetUsedUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvitationRegisterValidationError{
					field:  "UsedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvitationRegisterValidationError{
					field:  "UsedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsedUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvitationRegisterValidationError{
				field:  "UsedUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InvitationRegisterMultiError(errors)
	}

	return nil
}

// InvitationRegisterMultiError is an error wrapping multiple validation errors
// returned by InvitationRegister.ValidateAll() if the designated constraints
// aren't met.
type InvitationRegisterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvitationRegisterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvitationRegisterMultiError) AllErrors() []error { return m }

// InvitationRegisterValidationError is the validation error returned by
// InvitationRegister.Validate if the designated constraints aren't met.
type InvitationRegisterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvitationRegisterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvitationRegisterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvitationRegisterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvitationRegisterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvitationRegisterValidationError) ErrorName() string {
	return "InvitationRegisterValidationError"
}

// Error satisfies the builtin error interface
func (e InvitationRegisterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvitationRegister.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvitationRegisterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvitationRegisterValidationError{}

// Validate checks the field values on SearchInvitationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchInvitationCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchInvitationCodeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchInvitationCodeReqMultiError, or nil if none found.
func (m *SearchInvitationCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchInvitationCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchInvitationCodeReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchInvitationCodeReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchInvitationCodeReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchInvitationCodeReqMultiError(errors)
	}

	return nil
}

// SearchInvitationCodeReqMultiError is an error wrapping multiple validation
// errors returned by SearchInvitationCodeReq.ValidateAll() if the designated
// constraints aren't met.
type SearchInvitationCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchInvitationCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchInvitationCodeReqMultiError) AllErrors() []error { return m }

// SearchInvitationCodeReqValidationError is the validation error returned by
// SearchInvitationCodeReq.Validate if the designated constraints aren't met.
type SearchInvitationCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchInvitationCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchInvitationCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchInvitationCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchInvitationCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchInvitationCodeReqValidationError) ErrorName() string {
	return "SearchInvitationCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchInvitationCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchInvitationCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchInvitationCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchInvitationCodeReqValidationError{}

// Validate checks the field values on SearchInvitationCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchInvitationCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchInvitationCodeResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchInvitationCodeRespMultiError, or nil if none found.
func (m *SearchInvitationCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchInvitationCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchInvitationCodeRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchInvitationCodeRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchInvitationCodeRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchInvitationCodeRespMultiError(errors)
	}

	return nil
}

// SearchInvitationCodeRespMultiError is an error wrapping multiple validation
// errors returned by SearchInvitationCodeResp.ValidateAll() if the designated
// constraints aren't met.
type SearchInvitationCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchInvitationCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchInvitationCodeRespMultiError) AllErrors() []error { return m }

// SearchInvitationCodeRespValidationError is the validation error returned by
// SearchInvitationCodeResp.Validate if the designated constraints aren't met.
type SearchInvitationCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchInvitationCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchInvitationCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchInvitationCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchInvitationCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchInvitationCodeRespValidationError) ErrorName() string {
	return "SearchInvitationCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchInvitationCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchInvitationCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchInvitationCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchInvitationCodeRespValidationError{}

// Validate checks the field values on SearchUserIPLimitLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserIPLimitLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserIPLimitLoginReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserIPLimitLoginReqMultiError, or nil if none found.
func (m *SearchUserIPLimitLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserIPLimitLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserIPLimitLoginReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserIPLimitLoginReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserIPLimitLoginReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchUserIPLimitLoginReqMultiError(errors)
	}

	return nil
}

// SearchUserIPLimitLoginReqMultiError is an error wrapping multiple validation
// errors returned by SearchUserIPLimitLoginReq.ValidateAll() if the
// designated constraints aren't met.
type SearchUserIPLimitLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserIPLimitLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserIPLimitLoginReqMultiError) AllErrors() []error { return m }

// SearchUserIPLimitLoginReqValidationError is the validation error returned by
// SearchUserIPLimitLoginReq.Validate if the designated constraints aren't met.
type SearchUserIPLimitLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserIPLimitLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserIPLimitLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserIPLimitLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserIPLimitLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserIPLimitLoginReqValidationError) ErrorName() string {
	return "SearchUserIPLimitLoginReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserIPLimitLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserIPLimitLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserIPLimitLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserIPLimitLoginReqValidationError{}

// Validate checks the field values on LimitUserLoginIP with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LimitUserLoginIP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LimitUserLoginIP with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LimitUserLoginIPMultiError, or nil if none found.
func (m *LimitUserLoginIP) ValidateAll() error {
	return m.validate(true)
}

func (m *LimitUserLoginIP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Ip

	// no validation rules for CreateTime

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LimitUserLoginIPValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LimitUserLoginIPValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LimitUserLoginIPValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LimitUserLoginIPMultiError(errors)
	}

	return nil
}

// LimitUserLoginIPMultiError is an error wrapping multiple validation errors
// returned by LimitUserLoginIP.ValidateAll() if the designated constraints
// aren't met.
type LimitUserLoginIPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LimitUserLoginIPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LimitUserLoginIPMultiError) AllErrors() []error { return m }

// LimitUserLoginIPValidationError is the validation error returned by
// LimitUserLoginIP.Validate if the designated constraints aren't met.
type LimitUserLoginIPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LimitUserLoginIPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LimitUserLoginIPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LimitUserLoginIPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LimitUserLoginIPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LimitUserLoginIPValidationError) ErrorName() string { return "LimitUserLoginIPValidationError" }

// Error satisfies the builtin error interface
func (e LimitUserLoginIPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLimitUserLoginIP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LimitUserLoginIPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LimitUserLoginIPValidationError{}

// Validate checks the field values on SearchUserIPLimitLoginResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserIPLimitLoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserIPLimitLoginResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserIPLimitLoginRespMultiError, or nil if none found.
func (m *SearchUserIPLimitLoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserIPLimitLoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserIPLimitLoginRespValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserIPLimitLoginRespValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserIPLimitLoginRespValidationError{
					field:  fmt.Sprintf("Limits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchUserIPLimitLoginRespMultiError(errors)
	}

	return nil
}

// SearchUserIPLimitLoginRespMultiError is an error wrapping multiple
// validation errors returned by SearchUserIPLimitLoginResp.ValidateAll() if
// the designated constraints aren't met.
type SearchUserIPLimitLoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserIPLimitLoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserIPLimitLoginRespMultiError) AllErrors() []error { return m }

// SearchUserIPLimitLoginRespValidationError is the validation error returned
// by SearchUserIPLimitLoginResp.Validate if the designated constraints aren't met.
type SearchUserIPLimitLoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserIPLimitLoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserIPLimitLoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserIPLimitLoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserIPLimitLoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserIPLimitLoginRespValidationError) ErrorName() string {
	return "SearchUserIPLimitLoginRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserIPLimitLoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserIPLimitLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserIPLimitLoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserIPLimitLoginRespValidationError{}

// Validate checks the field values on UserIPLimitLogin with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserIPLimitLogin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIPLimitLogin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserIPLimitLoginMultiError, or nil if none found.
func (m *UserIPLimitLogin) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIPLimitLogin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Ip

	if len(errors) > 0 {
		return UserIPLimitLoginMultiError(errors)
	}

	return nil
}

// UserIPLimitLoginMultiError is an error wrapping multiple validation errors
// returned by UserIPLimitLogin.ValidateAll() if the designated constraints
// aren't met.
type UserIPLimitLoginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIPLimitLoginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIPLimitLoginMultiError) AllErrors() []error { return m }

// UserIPLimitLoginValidationError is the validation error returned by
// UserIPLimitLogin.Validate if the designated constraints aren't met.
type UserIPLimitLoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIPLimitLoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIPLimitLoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIPLimitLoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIPLimitLoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIPLimitLoginValidationError) ErrorName() string { return "UserIPLimitLoginValidationError" }

// Error satisfies the builtin error interface
func (e UserIPLimitLoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIPLimitLogin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIPLimitLoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIPLimitLoginValidationError{}

// Validate checks the field values on AddUserIPLimitLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserIPLimitLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserIPLimitLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserIPLimitLoginReqMultiError, or nil if none found.
func (m *AddUserIPLimitLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserIPLimitLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddUserIPLimitLoginReqValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddUserIPLimitLoginReqValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddUserIPLimitLoginReqValidationError{
					field:  fmt.Sprintf("Limits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddUserIPLimitLoginReqMultiError(errors)
	}

	return nil
}

// AddUserIPLimitLoginReqMultiError is an error wrapping multiple validation
// errors returned by AddUserIPLimitLoginReq.ValidateAll() if the designated
// constraints aren't met.
type AddUserIPLimitLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserIPLimitLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserIPLimitLoginReqMultiError) AllErrors() []error { return m }

// AddUserIPLimitLoginReqValidationError is the validation error returned by
// AddUserIPLimitLoginReq.Validate if the designated constraints aren't met.
type AddUserIPLimitLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserIPLimitLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserIPLimitLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserIPLimitLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserIPLimitLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserIPLimitLoginReqValidationError) ErrorName() string {
	return "AddUserIPLimitLoginReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserIPLimitLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserIPLimitLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserIPLimitLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserIPLimitLoginReqValidationError{}

// Validate checks the field values on AddUserIPLimitLoginResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserIPLimitLoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserIPLimitLoginResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserIPLimitLoginRespMultiError, or nil if none found.
func (m *AddUserIPLimitLoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserIPLimitLoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserIPLimitLoginRespMultiError(errors)
	}

	return nil
}

// AddUserIPLimitLoginRespMultiError is an error wrapping multiple validation
// errors returned by AddUserIPLimitLoginResp.ValidateAll() if the designated
// constraints aren't met.
type AddUserIPLimitLoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserIPLimitLoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserIPLimitLoginRespMultiError) AllErrors() []error { return m }

// AddUserIPLimitLoginRespValidationError is the validation error returned by
// AddUserIPLimitLoginResp.Validate if the designated constraints aren't met.
type AddUserIPLimitLoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserIPLimitLoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserIPLimitLoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserIPLimitLoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserIPLimitLoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserIPLimitLoginRespValidationError) ErrorName() string {
	return "AddUserIPLimitLoginRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserIPLimitLoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserIPLimitLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserIPLimitLoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserIPLimitLoginRespValidationError{}

// Validate checks the field values on DelUserIPLimitLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelUserIPLimitLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelUserIPLimitLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelUserIPLimitLoginReqMultiError, or nil if none found.
func (m *DelUserIPLimitLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelUserIPLimitLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DelUserIPLimitLoginReqValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DelUserIPLimitLoginReqValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DelUserIPLimitLoginReqValidationError{
					field:  fmt.Sprintf("Limits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DelUserIPLimitLoginReqMultiError(errors)
	}

	return nil
}

// DelUserIPLimitLoginReqMultiError is an error wrapping multiple validation
// errors returned by DelUserIPLimitLoginReq.ValidateAll() if the designated
// constraints aren't met.
type DelUserIPLimitLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelUserIPLimitLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelUserIPLimitLoginReqMultiError) AllErrors() []error { return m }

// DelUserIPLimitLoginReqValidationError is the validation error returned by
// DelUserIPLimitLoginReq.Validate if the designated constraints aren't met.
type DelUserIPLimitLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserIPLimitLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserIPLimitLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserIPLimitLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserIPLimitLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserIPLimitLoginReqValidationError) ErrorName() string {
	return "DelUserIPLimitLoginReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelUserIPLimitLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserIPLimitLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserIPLimitLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserIPLimitLoginReqValidationError{}

// Validate checks the field values on DelUserIPLimitLoginResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelUserIPLimitLoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelUserIPLimitLoginResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelUserIPLimitLoginRespMultiError, or nil if none found.
func (m *DelUserIPLimitLoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelUserIPLimitLoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelUserIPLimitLoginRespMultiError(errors)
	}

	return nil
}

// DelUserIPLimitLoginRespMultiError is an error wrapping multiple validation
// errors returned by DelUserIPLimitLoginResp.ValidateAll() if the designated
// constraints aren't met.
type DelUserIPLimitLoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelUserIPLimitLoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelUserIPLimitLoginRespMultiError) AllErrors() []error { return m }

// DelUserIPLimitLoginRespValidationError is the validation error returned by
// DelUserIPLimitLoginResp.Validate if the designated constraints aren't met.
type DelUserIPLimitLoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserIPLimitLoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserIPLimitLoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserIPLimitLoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserIPLimitLoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserIPLimitLoginRespValidationError) ErrorName() string {
	return "DelUserIPLimitLoginRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelUserIPLimitLoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserIPLimitLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserIPLimitLoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserIPLimitLoginRespValidationError{}

// Validate checks the field values on IPForbidden with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IPForbidden) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPForbidden with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IPForbiddenMultiError, or
// nil if none found.
func (m *IPForbidden) ValidateAll() error {
	return m.validate(true)
}

func (m *IPForbidden) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for LimitRegister

	// no validation rules for LimitLogin

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return IPForbiddenMultiError(errors)
	}

	return nil
}

// IPForbiddenMultiError is an error wrapping multiple validation errors
// returned by IPForbidden.ValidateAll() if the designated constraints aren't met.
type IPForbiddenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPForbiddenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPForbiddenMultiError) AllErrors() []error { return m }

// IPForbiddenValidationError is the validation error returned by
// IPForbidden.Validate if the designated constraints aren't met.
type IPForbiddenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPForbiddenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPForbiddenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPForbiddenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPForbiddenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPForbiddenValidationError) ErrorName() string { return "IPForbiddenValidationError" }

// Error satisfies the builtin error interface
func (e IPForbiddenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPForbidden.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPForbiddenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPForbiddenValidationError{}

// Validate checks the field values on IPForbiddenAdd with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IPForbiddenAdd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPForbiddenAdd with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IPForbiddenAddMultiError,
// or nil if none found.
func (m *IPForbiddenAdd) ValidateAll() error {
	return m.validate(true)
}

func (m *IPForbiddenAdd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for LimitRegister

	// no validation rules for LimitLogin

	if len(errors) > 0 {
		return IPForbiddenAddMultiError(errors)
	}

	return nil
}

// IPForbiddenAddMultiError is an error wrapping multiple validation errors
// returned by IPForbiddenAdd.ValidateAll() if the designated constraints
// aren't met.
type IPForbiddenAddMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPForbiddenAddMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPForbiddenAddMultiError) AllErrors() []error { return m }

// IPForbiddenAddValidationError is the validation error returned by
// IPForbiddenAdd.Validate if the designated constraints aren't met.
type IPForbiddenAddValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPForbiddenAddValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPForbiddenAddValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPForbiddenAddValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPForbiddenAddValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPForbiddenAddValidationError) ErrorName() string { return "IPForbiddenAddValidationError" }

// Error satisfies the builtin error interface
func (e IPForbiddenAddValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPForbiddenAdd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPForbiddenAddValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPForbiddenAddValidationError{}

// Validate checks the field values on SearchIPForbiddenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchIPForbiddenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchIPForbiddenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchIPForbiddenReqMultiError, or nil if none found.
func (m *SearchIPForbiddenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchIPForbiddenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchIPForbiddenReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchIPForbiddenReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchIPForbiddenReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchIPForbiddenReqMultiError(errors)
	}

	return nil
}

// SearchIPForbiddenReqMultiError is an error wrapping multiple validation
// errors returned by SearchIPForbiddenReq.ValidateAll() if the designated
// constraints aren't met.
type SearchIPForbiddenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchIPForbiddenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchIPForbiddenReqMultiError) AllErrors() []error { return m }

// SearchIPForbiddenReqValidationError is the validation error returned by
// SearchIPForbiddenReq.Validate if the designated constraints aren't met.
type SearchIPForbiddenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchIPForbiddenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchIPForbiddenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchIPForbiddenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchIPForbiddenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchIPForbiddenReqValidationError) ErrorName() string {
	return "SearchIPForbiddenReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchIPForbiddenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchIPForbiddenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchIPForbiddenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchIPForbiddenReqValidationError{}

// Validate checks the field values on SearchIPForbiddenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchIPForbiddenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchIPForbiddenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchIPForbiddenRespMultiError, or nil if none found.
func (m *SearchIPForbiddenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchIPForbiddenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetForbiddens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchIPForbiddenRespValidationError{
						field:  fmt.Sprintf("Forbiddens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchIPForbiddenRespValidationError{
						field:  fmt.Sprintf("Forbiddens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchIPForbiddenRespValidationError{
					field:  fmt.Sprintf("Forbiddens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchIPForbiddenRespMultiError(errors)
	}

	return nil
}

// SearchIPForbiddenRespMultiError is an error wrapping multiple validation
// errors returned by SearchIPForbiddenResp.ValidateAll() if the designated
// constraints aren't met.
type SearchIPForbiddenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchIPForbiddenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchIPForbiddenRespMultiError) AllErrors() []error { return m }

// SearchIPForbiddenRespValidationError is the validation error returned by
// SearchIPForbiddenResp.Validate if the designated constraints aren't met.
type SearchIPForbiddenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchIPForbiddenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchIPForbiddenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchIPForbiddenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchIPForbiddenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchIPForbiddenRespValidationError) ErrorName() string {
	return "SearchIPForbiddenRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchIPForbiddenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchIPForbiddenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchIPForbiddenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchIPForbiddenRespValidationError{}

// Validate checks the field values on AddIPForbiddenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddIPForbiddenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIPForbiddenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIPForbiddenReqMultiError, or nil if none found.
func (m *AddIPForbiddenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIPForbiddenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetForbiddens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddIPForbiddenReqValidationError{
						field:  fmt.Sprintf("Forbiddens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddIPForbiddenReqValidationError{
						field:  fmt.Sprintf("Forbiddens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddIPForbiddenReqValidationError{
					field:  fmt.Sprintf("Forbiddens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddIPForbiddenReqMultiError(errors)
	}

	return nil
}

// AddIPForbiddenReqMultiError is an error wrapping multiple validation errors
// returned by AddIPForbiddenReq.ValidateAll() if the designated constraints
// aren't met.
type AddIPForbiddenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIPForbiddenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIPForbiddenReqMultiError) AllErrors() []error { return m }

// AddIPForbiddenReqValidationError is the validation error returned by
// AddIPForbiddenReq.Validate if the designated constraints aren't met.
type AddIPForbiddenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIPForbiddenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIPForbiddenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIPForbiddenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIPForbiddenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIPForbiddenReqValidationError) ErrorName() string {
	return "AddIPForbiddenReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddIPForbiddenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIPForbiddenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIPForbiddenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIPForbiddenReqValidationError{}

// Validate checks the field values on AddIPForbiddenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddIPForbiddenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIPForbiddenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIPForbiddenRespMultiError, or nil if none found.
func (m *AddIPForbiddenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIPForbiddenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddIPForbiddenRespMultiError(errors)
	}

	return nil
}

// AddIPForbiddenRespMultiError is an error wrapping multiple validation errors
// returned by AddIPForbiddenResp.ValidateAll() if the designated constraints
// aren't met.
type AddIPForbiddenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIPForbiddenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIPForbiddenRespMultiError) AllErrors() []error { return m }

// AddIPForbiddenRespValidationError is the validation error returned by
// AddIPForbiddenResp.Validate if the designated constraints aren't met.
type AddIPForbiddenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIPForbiddenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIPForbiddenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIPForbiddenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIPForbiddenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIPForbiddenRespValidationError) ErrorName() string {
	return "AddIPForbiddenRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddIPForbiddenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIPForbiddenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIPForbiddenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIPForbiddenRespValidationError{}

// Validate checks the field values on DelIPForbiddenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelIPForbiddenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelIPForbiddenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelIPForbiddenReqMultiError, or nil if none found.
func (m *DelIPForbiddenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelIPForbiddenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelIPForbiddenReqMultiError(errors)
	}

	return nil
}

// DelIPForbiddenReqMultiError is an error wrapping multiple validation errors
// returned by DelIPForbiddenReq.ValidateAll() if the designated constraints
// aren't met.
type DelIPForbiddenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelIPForbiddenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelIPForbiddenReqMultiError) AllErrors() []error { return m }

// DelIPForbiddenReqValidationError is the validation error returned by
// DelIPForbiddenReq.Validate if the designated constraints aren't met.
type DelIPForbiddenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelIPForbiddenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelIPForbiddenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelIPForbiddenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelIPForbiddenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelIPForbiddenReqValidationError) ErrorName() string {
	return "DelIPForbiddenReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelIPForbiddenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelIPForbiddenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelIPForbiddenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelIPForbiddenReqValidationError{}

// Validate checks the field values on DelIPForbiddenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelIPForbiddenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelIPForbiddenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelIPForbiddenRespMultiError, or nil if none found.
func (m *DelIPForbiddenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelIPForbiddenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelIPForbiddenRespMultiError(errors)
	}

	return nil
}

// DelIPForbiddenRespMultiError is an error wrapping multiple validation errors
// returned by DelIPForbiddenResp.ValidateAll() if the designated constraints
// aren't met.
type DelIPForbiddenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelIPForbiddenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelIPForbiddenRespMultiError) AllErrors() []error { return m }

// DelIPForbiddenRespValidationError is the validation error returned by
// DelIPForbiddenResp.Validate if the designated constraints aren't met.
type DelIPForbiddenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelIPForbiddenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelIPForbiddenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelIPForbiddenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelIPForbiddenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelIPForbiddenRespValidationError) ErrorName() string {
	return "DelIPForbiddenRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelIPForbiddenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelIPForbiddenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelIPForbiddenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelIPForbiddenRespValidationError{}

// Validate checks the field values on CheckRegisterForbiddenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckRegisterForbiddenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRegisterForbiddenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckRegisterForbiddenReqMultiError, or nil if none found.
func (m *CheckRegisterForbiddenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRegisterForbiddenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	if len(errors) > 0 {
		return CheckRegisterForbiddenReqMultiError(errors)
	}

	return nil
}

// CheckRegisterForbiddenReqMultiError is an error wrapping multiple validation
// errors returned by CheckRegisterForbiddenReq.ValidateAll() if the
// designated constraints aren't met.
type CheckRegisterForbiddenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRegisterForbiddenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRegisterForbiddenReqMultiError) AllErrors() []error { return m }

// CheckRegisterForbiddenReqValidationError is the validation error returned by
// CheckRegisterForbiddenReq.Validate if the designated constraints aren't met.
type CheckRegisterForbiddenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRegisterForbiddenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRegisterForbiddenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRegisterForbiddenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRegisterForbiddenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRegisterForbiddenReqValidationError) ErrorName() string {
	return "CheckRegisterForbiddenReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckRegisterForbiddenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRegisterForbiddenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRegisterForbiddenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRegisterForbiddenReqValidationError{}

// Validate checks the field values on CheckRegisterForbiddenResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckRegisterForbiddenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRegisterForbiddenResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckRegisterForbiddenRespMultiError, or nil if none found.
func (m *CheckRegisterForbiddenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRegisterForbiddenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckRegisterForbiddenRespMultiError(errors)
	}

	return nil
}

// CheckRegisterForbiddenRespMultiError is an error wrapping multiple
// validation errors returned by CheckRegisterForbiddenResp.ValidateAll() if
// the designated constraints aren't met.
type CheckRegisterForbiddenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRegisterForbiddenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRegisterForbiddenRespMultiError) AllErrors() []error { return m }

// CheckRegisterForbiddenRespValidationError is the validation error returned
// by CheckRegisterForbiddenResp.Validate if the designated constraints aren't met.
type CheckRegisterForbiddenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRegisterForbiddenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRegisterForbiddenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRegisterForbiddenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRegisterForbiddenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRegisterForbiddenRespValidationError) ErrorName() string {
	return "CheckRegisterForbiddenRespValidationError"
}

// Error satisfies the builtin error interface
func (e CheckRegisterForbiddenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRegisterForbiddenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRegisterForbiddenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRegisterForbiddenRespValidationError{}

// Validate checks the field values on CheckLoginForbiddenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckLoginForbiddenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckLoginForbiddenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckLoginForbiddenReqMultiError, or nil if none found.
func (m *CheckLoginForbiddenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckLoginForbiddenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for UserID

	if len(errors) > 0 {
		return CheckLoginForbiddenReqMultiError(errors)
	}

	return nil
}

// CheckLoginForbiddenReqMultiError is an error wrapping multiple validation
// errors returned by CheckLoginForbiddenReq.ValidateAll() if the designated
// constraints aren't met.
type CheckLoginForbiddenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckLoginForbiddenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckLoginForbiddenReqMultiError) AllErrors() []error { return m }

// CheckLoginForbiddenReqValidationError is the validation error returned by
// CheckLoginForbiddenReq.Validate if the designated constraints aren't met.
type CheckLoginForbiddenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckLoginForbiddenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckLoginForbiddenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckLoginForbiddenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckLoginForbiddenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckLoginForbiddenReqValidationError) ErrorName() string {
	return "CheckLoginForbiddenReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckLoginForbiddenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckLoginForbiddenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckLoginForbiddenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckLoginForbiddenReqValidationError{}

// Validate checks the field values on CheckLoginForbiddenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckLoginForbiddenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckLoginForbiddenResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckLoginForbiddenRespMultiError, or nil if none found.
func (m *CheckLoginForbiddenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckLoginForbiddenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckLoginForbiddenRespMultiError(errors)
	}

	return nil
}

// CheckLoginForbiddenRespMultiError is an error wrapping multiple validation
// errors returned by CheckLoginForbiddenResp.ValidateAll() if the designated
// constraints aren't met.
type CheckLoginForbiddenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckLoginForbiddenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckLoginForbiddenRespMultiError) AllErrors() []error { return m }

// CheckLoginForbiddenRespValidationError is the validation error returned by
// CheckLoginForbiddenResp.Validate if the designated constraints aren't met.
type CheckLoginForbiddenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckLoginForbiddenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckLoginForbiddenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckLoginForbiddenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckLoginForbiddenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckLoginForbiddenRespValidationError) ErrorName() string {
	return "CheckLoginForbiddenRespValidationError"
}

// Error satisfies the builtin error interface
func (e CheckLoginForbiddenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckLoginForbiddenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckLoginForbiddenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckLoginForbiddenRespValidationError{}

// Validate checks the field values on CancellationUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancellationUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancellationUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancellationUserReqMultiError, or nil if none found.
func (m *CancellationUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancellationUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Reason

	if len(errors) > 0 {
		return CancellationUserReqMultiError(errors)
	}

	return nil
}

// CancellationUserReqMultiError is an error wrapping multiple validation
// errors returned by CancellationUserReq.ValidateAll() if the designated
// constraints aren't met.
type CancellationUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancellationUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancellationUserReqMultiError) AllErrors() []error { return m }

// CancellationUserReqValidationError is the validation error returned by
// CancellationUserReq.Validate if the designated constraints aren't met.
type CancellationUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancellationUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancellationUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancellationUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancellationUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancellationUserReqValidationError) ErrorName() string {
	return "CancellationUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancellationUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancellationUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancellationUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancellationUserReqValidationError{}

// Validate checks the field values on CancellationUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancellationUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancellationUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancellationUserRespMultiError, or nil if none found.
func (m *CancellationUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CancellationUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancellationUserRespMultiError(errors)
	}

	return nil
}

// CancellationUserRespMultiError is an error wrapping multiple validation
// errors returned by CancellationUserResp.ValidateAll() if the designated
// constraints aren't met.
type CancellationUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancellationUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancellationUserRespMultiError) AllErrors() []error { return m }

// CancellationUserRespValidationError is the validation error returned by
// CancellationUserResp.Validate if the designated constraints aren't met.
type CancellationUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancellationUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancellationUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancellationUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancellationUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancellationUserRespValidationError) ErrorName() string {
	return "CancellationUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e CancellationUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancellationUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancellationUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancellationUserRespValidationError{}

// Validate checks the field values on BlockUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUserReqMultiError, or
// nil if none found.
func (m *BlockUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Reason

	if len(errors) > 0 {
		return BlockUserReqMultiError(errors)
	}

	return nil
}

// BlockUserReqMultiError is an error wrapping multiple validation errors
// returned by BlockUserReq.ValidateAll() if the designated constraints aren't met.
type BlockUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserReqMultiError) AllErrors() []error { return m }

// BlockUserReqValidationError is the validation error returned by
// BlockUserReq.Validate if the designated constraints aren't met.
type BlockUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserReqValidationError) ErrorName() string { return "BlockUserReqValidationError" }

// Error satisfies the builtin error interface
func (e BlockUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserReqValidationError{}

// Validate checks the field values on BlockUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUserRespMultiError, or
// nil if none found.
func (m *BlockUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BlockUserRespMultiError(errors)
	}

	return nil
}

// BlockUserRespMultiError is an error wrapping multiple validation errors
// returned by BlockUserResp.ValidateAll() if the designated constraints
// aren't met.
type BlockUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserRespMultiError) AllErrors() []error { return m }

// BlockUserRespValidationError is the validation error returned by
// BlockUserResp.Validate if the designated constraints aren't met.
type BlockUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserRespValidationError) ErrorName() string { return "BlockUserRespValidationError" }

// Error satisfies the builtin error interface
func (e BlockUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserRespValidationError{}

// Validate checks the field values on UnblockUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnblockUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnblockUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnblockUserReqMultiError,
// or nil if none found.
func (m *UnblockUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnblockUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnblockUserReqMultiError(errors)
	}

	return nil
}

// UnblockUserReqMultiError is an error wrapping multiple validation errors
// returned by UnblockUserReq.ValidateAll() if the designated constraints
// aren't met.
type UnblockUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnblockUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnblockUserReqMultiError) AllErrors() []error { return m }

// UnblockUserReqValidationError is the validation error returned by
// UnblockUserReq.Validate if the designated constraints aren't met.
type UnblockUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnblockUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnblockUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnblockUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnblockUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnblockUserReqValidationError) ErrorName() string { return "UnblockUserReqValidationError" }

// Error satisfies the builtin error interface
func (e UnblockUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnblockUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnblockUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnblockUserReqValidationError{}

// Validate checks the field values on UnblockUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnblockUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnblockUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnblockUserRespMultiError, or nil if none found.
func (m *UnblockUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UnblockUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnblockUserRespMultiError(errors)
	}

	return nil
}

// UnblockUserRespMultiError is an error wrapping multiple validation errors
// returned by UnblockUserResp.ValidateAll() if the designated constraints
// aren't met.
type UnblockUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnblockUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnblockUserRespMultiError) AllErrors() []error { return m }

// UnblockUserRespValidationError is the validation error returned by
// UnblockUserResp.Validate if the designated constraints aren't met.
type UnblockUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnblockUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnblockUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnblockUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnblockUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnblockUserRespValidationError) ErrorName() string { return "UnblockUserRespValidationError" }

// Error satisfies the builtin error interface
func (e UnblockUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnblockUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnblockUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnblockUserRespValidationError{}

// Validate checks the field values on SearchBlockUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchBlockUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchBlockUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchBlockUserReqMultiError, or nil if none found.
func (m *SearchBlockUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchBlockUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchBlockUserReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchBlockUserReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchBlockUserReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchBlockUserReqMultiError(errors)
	}

	return nil
}

// SearchBlockUserReqMultiError is an error wrapping multiple validation errors
// returned by SearchBlockUserReq.ValidateAll() if the designated constraints
// aren't met.
type SearchBlockUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchBlockUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchBlockUserReqMultiError) AllErrors() []error { return m }

// SearchBlockUserReqValidationError is the validation error returned by
// SearchBlockUserReq.Validate if the designated constraints aren't met.
type SearchBlockUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchBlockUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchBlockUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchBlockUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchBlockUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchBlockUserReqValidationError) ErrorName() string {
	return "SearchBlockUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchBlockUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchBlockUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchBlockUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchBlockUserReqValidationError{}

// Validate checks the field values on BlockUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockUserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockUserInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockUserInfoMultiError, or
// nil if none found.
func (m *BlockUserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockUserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Account

	// no validation rules for PhoneNumber

	// no validation rules for AreaCode

	// no validation rules for Email

	// no validation rules for Nickname

	// no validation rules for FaceURL

	// no validation rules for Gender

	// no validation rules for Reason

	// no validation rules for OpUserID

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return BlockUserInfoMultiError(errors)
	}

	return nil
}

// BlockUserInfoMultiError is an error wrapping multiple validation errors
// returned by BlockUserInfo.ValidateAll() if the designated constraints
// aren't met.
type BlockUserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockUserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockUserInfoMultiError) AllErrors() []error { return m }

// BlockUserInfoValidationError is the validation error returned by
// BlockUserInfo.Validate if the designated constraints aren't met.
type BlockUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockUserInfoValidationError) ErrorName() string { return "BlockUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e BlockUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockUserInfoValidationError{}

// Validate checks the field values on SearchBlockUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchBlockUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchBlockUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchBlockUserRespMultiError, or nil if none found.
func (m *SearchBlockUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchBlockUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchBlockUserRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchBlockUserRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchBlockUserRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchBlockUserRespMultiError(errors)
	}

	return nil
}

// SearchBlockUserRespMultiError is an error wrapping multiple validation
// errors returned by SearchBlockUserResp.ValidateAll() if the designated
// constraints aren't met.
type SearchBlockUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchBlockUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchBlockUserRespMultiError) AllErrors() []error { return m }

// SearchBlockUserRespValidationError is the validation error returned by
// SearchBlockUserResp.Validate if the designated constraints aren't met.
type SearchBlockUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchBlockUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchBlockUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchBlockUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchBlockUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchBlockUserRespValidationError) ErrorName() string {
	return "SearchBlockUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchBlockUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchBlockUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchBlockUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchBlockUserRespValidationError{}

// Validate checks the field values on FindUserBlockInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserBlockInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserBlockInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserBlockInfoReqMultiError, or nil if none found.
func (m *FindUserBlockInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserBlockInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindUserBlockInfoReqMultiError(errors)
	}

	return nil
}

// FindUserBlockInfoReqMultiError is an error wrapping multiple validation
// errors returned by FindUserBlockInfoReq.ValidateAll() if the designated
// constraints aren't met.
type FindUserBlockInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserBlockInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserBlockInfoReqMultiError) AllErrors() []error { return m }

// FindUserBlockInfoReqValidationError is the validation error returned by
// FindUserBlockInfoReq.Validate if the designated constraints aren't met.
type FindUserBlockInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserBlockInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserBlockInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserBlockInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserBlockInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserBlockInfoReqValidationError) ErrorName() string {
	return "FindUserBlockInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserBlockInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserBlockInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserBlockInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserBlockInfoReqValidationError{}

// Validate checks the field values on BlockInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlockInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockInfoMultiError, or nil
// if none found.
func (m *BlockInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Reason

	// no validation rules for OpUserID

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return BlockInfoMultiError(errors)
	}

	return nil
}

// BlockInfoMultiError is an error wrapping multiple validation errors returned
// by BlockInfo.ValidateAll() if the designated constraints aren't met.
type BlockInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockInfoMultiError) AllErrors() []error { return m }

// BlockInfoValidationError is the validation error returned by
// BlockInfo.Validate if the designated constraints aren't met.
type BlockInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockInfoValidationError) ErrorName() string { return "BlockInfoValidationError" }

// Error satisfies the builtin error interface
func (e BlockInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockInfoValidationError{}

// Validate checks the field values on FindUserBlockInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserBlockInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserBlockInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserBlockInfoRespMultiError, or nil if none found.
func (m *FindUserBlockInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserBlockInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindUserBlockInfoRespValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindUserBlockInfoRespValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindUserBlockInfoRespValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindUserBlockInfoRespMultiError(errors)
	}

	return nil
}

// FindUserBlockInfoRespMultiError is an error wrapping multiple validation
// errors returned by FindUserBlockInfoResp.ValidateAll() if the designated
// constraints aren't met.
type FindUserBlockInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserBlockInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserBlockInfoRespMultiError) AllErrors() []error { return m }

// FindUserBlockInfoRespValidationError is the validation error returned by
// FindUserBlockInfoResp.Validate if the designated constraints aren't met.
type FindUserBlockInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserBlockInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserBlockInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserBlockInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserBlockInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserBlockInfoRespValidationError) ErrorName() string {
	return "FindUserBlockInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserBlockInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserBlockInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserBlockInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserBlockInfoRespValidationError{}

// Validate checks the field values on CreateTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateTokenReqMultiError,
// or nil if none found.
func (m *CreateTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for UserType

	if len(errors) > 0 {
		return CreateTokenReqMultiError(errors)
	}

	return nil
}

// CreateTokenReqMultiError is an error wrapping multiple validation errors
// returned by CreateTokenReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenReqMultiError) AllErrors() []error { return m }

// CreateTokenReqValidationError is the validation error returned by
// CreateTokenReq.Validate if the designated constraints aren't met.
type CreateTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenReqValidationError) ErrorName() string { return "CreateTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenReqValidationError{}

// Validate checks the field values on CreateTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTokenRespMultiError, or nil if none found.
func (m *CreateTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return CreateTokenRespMultiError(errors)
	}

	return nil
}

// CreateTokenRespMultiError is an error wrapping multiple validation errors
// returned by CreateTokenResp.ValidateAll() if the designated constraints
// aren't met.
type CreateTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenRespMultiError) AllErrors() []error { return m }

// CreateTokenRespValidationError is the validation error returned by
// CreateTokenResp.Validate if the designated constraints aren't met.
type CreateTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenRespValidationError) ErrorName() string { return "CreateTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenRespValidationError{}

// Validate checks the field values on ParseTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseTokenReqMultiError, or
// nil if none found.
func (m *ParseTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ParseTokenReqMultiError(errors)
	}

	return nil
}

// ParseTokenReqMultiError is an error wrapping multiple validation errors
// returned by ParseTokenReq.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenReqMultiError) AllErrors() []error { return m }

// ParseTokenReqValidationError is the validation error returned by
// ParseTokenReq.Validate if the designated constraints aren't met.
type ParseTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenReqValidationError) ErrorName() string { return "ParseTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenReqValidationError{}

// Validate checks the field values on ParseTokenResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseTokenRespMultiError,
// or nil if none found.
func (m *ParseTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for UserType

	// no validation rules for ExpireTimeSeconds

	if len(errors) > 0 {
		return ParseTokenRespMultiError(errors)
	}

	return nil
}

// ParseTokenRespMultiError is an error wrapping multiple validation errors
// returned by ParseTokenResp.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenRespMultiError) AllErrors() []error { return m }

// ParseTokenRespValidationError is the validation error returned by
// ParseTokenResp.Validate if the designated constraints aren't met.
type ParseTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenRespValidationError) ErrorName() string { return "ParseTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenRespValidationError{}

// Validate checks the field values on InvalidateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateTokenReqMultiError, or nil if none found.
func (m *InvalidateTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return InvalidateTokenReqMultiError(errors)
	}

	return nil
}

// InvalidateTokenReqMultiError is an error wrapping multiple validation errors
// returned by InvalidateTokenReq.ValidateAll() if the designated constraints
// aren't met.
type InvalidateTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateTokenReqMultiError) AllErrors() []error { return m }

// InvalidateTokenReqValidationError is the validation error returned by
// InvalidateTokenReq.Validate if the designated constraints aren't met.
type InvalidateTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateTokenReqValidationError) ErrorName() string {
	return "InvalidateTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateTokenReqValidationError{}

// Validate checks the field values on InvalidateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateTokenRespMultiError, or nil if none found.
func (m *InvalidateTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InvalidateTokenRespMultiError(errors)
	}

	return nil
}

// InvalidateTokenRespMultiError is an error wrapping multiple validation
// errors returned by InvalidateTokenResp.ValidateAll() if the designated
// constraints aren't met.
type InvalidateTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateTokenRespMultiError) AllErrors() []error { return m }

// InvalidateTokenRespValidationError is the validation error returned by
// InvalidateTokenResp.Validate if the designated constraints aren't met.
type InvalidateTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateTokenRespValidationError) ErrorName() string {
	return "InvalidateTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateTokenRespValidationError{}

// Validate checks the field values on AddAppletReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddAppletReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppletReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddAppletReqMultiError, or
// nil if none found.
func (m *AddAppletReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppletReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AppID

	// no validation rules for Icon

	// no validation rules for Url

	// no validation rules for Md5

	// no validation rules for Size

	// no validation rules for Version

	// no validation rules for Priority

	// no validation rules for Status

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return AddAppletReqMultiError(errors)
	}

	return nil
}

// AddAppletReqMultiError is an error wrapping multiple validation errors
// returned by AddAppletReq.ValidateAll() if the designated constraints aren't met.
type AddAppletReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppletReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppletReqMultiError) AllErrors() []error { return m }

// AddAppletReqValidationError is the validation error returned by
// AddAppletReq.Validate if the designated constraints aren't met.
type AddAppletReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppletReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppletReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppletReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppletReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppletReqValidationError) ErrorName() string { return "AddAppletReqValidationError" }

// Error satisfies the builtin error interface
func (e AddAppletReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppletReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppletReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppletReqValidationError{}

// Validate checks the field values on AddAppletResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddAppletResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppletResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddAppletRespMultiError, or
// nil if none found.
func (m *AddAppletResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppletResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAppletRespMultiError(errors)
	}

	return nil
}

// AddAppletRespMultiError is an error wrapping multiple validation errors
// returned by AddAppletResp.ValidateAll() if the designated constraints
// aren't met.
type AddAppletRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppletRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppletRespMultiError) AllErrors() []error { return m }

// AddAppletRespValidationError is the validation error returned by
// AddAppletResp.Validate if the designated constraints aren't met.
type AddAppletRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppletRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppletRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppletRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppletRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppletRespValidationError) ErrorName() string { return "AddAppletRespValidationError" }

// Error satisfies the builtin error interface
func (e AddAppletRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppletResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppletRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppletRespValidationError{}

// Validate checks the field values on DelAppletReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelAppletReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelAppletReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelAppletReqMultiError, or
// nil if none found.
func (m *DelAppletReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelAppletReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelAppletReqMultiError(errors)
	}

	return nil
}

// DelAppletReqMultiError is an error wrapping multiple validation errors
// returned by DelAppletReq.ValidateAll() if the designated constraints aren't met.
type DelAppletReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelAppletReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelAppletReqMultiError) AllErrors() []error { return m }

// DelAppletReqValidationError is the validation error returned by
// DelAppletReq.Validate if the designated constraints aren't met.
type DelAppletReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelAppletReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelAppletReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelAppletReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelAppletReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelAppletReqValidationError) ErrorName() string { return "DelAppletReqValidationError" }

// Error satisfies the builtin error interface
func (e DelAppletReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelAppletReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelAppletReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelAppletReqValidationError{}

// Validate checks the field values on DelAppletResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelAppletResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelAppletResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelAppletRespMultiError, or
// nil if none found.
func (m *DelAppletResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelAppletResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelAppletRespMultiError(errors)
	}

	return nil
}

// DelAppletRespMultiError is an error wrapping multiple validation errors
// returned by DelAppletResp.ValidateAll() if the designated constraints
// aren't met.
type DelAppletRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelAppletRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelAppletRespMultiError) AllErrors() []error { return m }

// DelAppletRespValidationError is the validation error returned by
// DelAppletResp.Validate if the designated constraints aren't met.
type DelAppletRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelAppletRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelAppletRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelAppletRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelAppletRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelAppletRespValidationError) ErrorName() string { return "DelAppletRespValidationError" }

// Error satisfies the builtin error interface
func (e DelAppletRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelAppletResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelAppletRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelAppletRespValidationError{}

// Validate checks the field values on UpdateAppletReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppletReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppletReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppletReqMultiError, or nil if none found.
func (m *UpdateAppletReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppletReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAppID()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "AppID",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "AppID",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppID()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "AppID",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIcon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIcon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "Icon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Url",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Url",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "Url",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMd5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Md5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Md5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMd5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "Md5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Size",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Size",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "Size",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPriority()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Priority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Priority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPriority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "Priority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppletReqValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppletReqValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAppletReqMultiError(errors)
	}

	return nil
}

// UpdateAppletReqMultiError is an error wrapping multiple validation errors
// returned by UpdateAppletReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppletReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppletReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppletReqMultiError) AllErrors() []error { return m }

// UpdateAppletReqValidationError is the validation error returned by
// UpdateAppletReq.Validate if the designated constraints aren't met.
type UpdateAppletReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppletReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppletReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppletReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppletReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppletReqValidationError) ErrorName() string { return "UpdateAppletReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppletReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppletReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppletReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppletReqValidationError{}

// Validate checks the field values on UpdateAppletResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppletResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppletResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppletRespMultiError, or nil if none found.
func (m *UpdateAppletResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppletResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppletRespMultiError(errors)
	}

	return nil
}

// UpdateAppletRespMultiError is an error wrapping multiple validation errors
// returned by UpdateAppletResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppletRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppletRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppletRespMultiError) AllErrors() []error { return m }

// UpdateAppletRespValidationError is the validation error returned by
// UpdateAppletResp.Validate if the designated constraints aren't met.
type UpdateAppletRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppletRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppletRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppletRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppletRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppletRespValidationError) ErrorName() string { return "UpdateAppletRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppletRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppletResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppletRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppletRespValidationError{}

// Validate checks the field values on FindAppletReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindAppletReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAppletReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindAppletReqMultiError, or
// nil if none found.
func (m *FindAppletReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAppletReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindAppletReqMultiError(errors)
	}

	return nil
}

// FindAppletReqMultiError is an error wrapping multiple validation errors
// returned by FindAppletReq.ValidateAll() if the designated constraints
// aren't met.
type FindAppletReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAppletReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAppletReqMultiError) AllErrors() []error { return m }

// FindAppletReqValidationError is the validation error returned by
// FindAppletReq.Validate if the designated constraints aren't met.
type FindAppletReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAppletReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAppletReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAppletReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAppletReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAppletReqValidationError) ErrorName() string { return "FindAppletReqValidationError" }

// Error satisfies the builtin error interface
func (e FindAppletReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAppletReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAppletReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAppletReqValidationError{}

// Validate checks the field values on FindAppletResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindAppletResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAppletResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindAppletRespMultiError,
// or nil if none found.
func (m *FindAppletResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAppletResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindAppletRespValidationError{
						field:  fmt.Sprintf("Applets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindAppletRespValidationError{
						field:  fmt.Sprintf("Applets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindAppletRespValidationError{
					field:  fmt.Sprintf("Applets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindAppletRespMultiError(errors)
	}

	return nil
}

// FindAppletRespMultiError is an error wrapping multiple validation errors
// returned by FindAppletResp.ValidateAll() if the designated constraints
// aren't met.
type FindAppletRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAppletRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAppletRespMultiError) AllErrors() []error { return m }

// FindAppletRespValidationError is the validation error returned by
// FindAppletResp.Validate if the designated constraints aren't met.
type FindAppletRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAppletRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAppletRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAppletRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAppletRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAppletRespValidationError) ErrorName() string { return "FindAppletRespValidationError" }

// Error satisfies the builtin error interface
func (e FindAppletRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAppletResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAppletRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAppletRespValidationError{}

// Validate checks the field values on SearchAppletReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchAppletReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAppletReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAppletReqMultiError, or nil if none found.
func (m *SearchAppletReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAppletReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchAppletReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchAppletReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchAppletReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchAppletReqMultiError(errors)
	}

	return nil
}

// SearchAppletReqMultiError is an error wrapping multiple validation errors
// returned by SearchAppletReq.ValidateAll() if the designated constraints
// aren't met.
type SearchAppletReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAppletReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAppletReqMultiError) AllErrors() []error { return m }

// SearchAppletReqValidationError is the validation error returned by
// SearchAppletReq.Validate if the designated constraints aren't met.
type SearchAppletReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAppletReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAppletReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAppletReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAppletReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAppletReqValidationError) ErrorName() string { return "SearchAppletReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchAppletReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAppletReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAppletReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAppletReqValidationError{}

// Validate checks the field values on SearchAppletResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchAppletResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAppletResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAppletRespMultiError, or nil if none found.
func (m *SearchAppletResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAppletResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetApplets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAppletRespValidationError{
						field:  fmt.Sprintf("Applets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAppletRespValidationError{
						field:  fmt.Sprintf("Applets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAppletRespValidationError{
					field:  fmt.Sprintf("Applets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchAppletRespMultiError(errors)
	}

	return nil
}

// SearchAppletRespMultiError is an error wrapping multiple validation errors
// returned by SearchAppletResp.ValidateAll() if the designated constraints
// aren't met.
type SearchAppletRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAppletRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAppletRespMultiError) AllErrors() []error { return m }

// SearchAppletRespValidationError is the validation error returned by
// SearchAppletResp.Validate if the designated constraints aren't met.
type SearchAppletRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAppletRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAppletRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAppletRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAppletRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAppletRespValidationError) ErrorName() string { return "SearchAppletRespValidationError" }

// Error satisfies the builtin error interface
func (e SearchAppletRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAppletResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAppletRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAppletRespValidationError{}

// Validate checks the field values on SetClientConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetClientConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetClientConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetClientConfigReqMultiError, or nil if none found.
func (m *SetClientConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetClientConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	if len(errors) > 0 {
		return SetClientConfigReqMultiError(errors)
	}

	return nil
}

// SetClientConfigReqMultiError is an error wrapping multiple validation errors
// returned by SetClientConfigReq.ValidateAll() if the designated constraints
// aren't met.
type SetClientConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetClientConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetClientConfigReqMultiError) AllErrors() []error { return m }

// SetClientConfigReqValidationError is the validation error returned by
// SetClientConfigReq.Validate if the designated constraints aren't met.
type SetClientConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetClientConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetClientConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetClientConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetClientConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetClientConfigReqValidationError) ErrorName() string {
	return "SetClientConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetClientConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetClientConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetClientConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetClientConfigReqValidationError{}

// Validate checks the field values on SetClientConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetClientConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetClientConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetClientConfigRespMultiError, or nil if none found.
func (m *SetClientConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetClientConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetClientConfigRespMultiError(errors)
	}

	return nil
}

// SetClientConfigRespMultiError is an error wrapping multiple validation
// errors returned by SetClientConfigResp.ValidateAll() if the designated
// constraints aren't met.
type SetClientConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetClientConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetClientConfigRespMultiError) AllErrors() []error { return m }

// SetClientConfigRespValidationError is the validation error returned by
// SetClientConfigResp.Validate if the designated constraints aren't met.
type SetClientConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetClientConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetClientConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetClientConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetClientConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetClientConfigRespValidationError) ErrorName() string {
	return "SetClientConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetClientConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetClientConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetClientConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetClientConfigRespValidationError{}

// Validate checks the field values on DelClientConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelClientConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelClientConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelClientConfigReqMultiError, or nil if none found.
func (m *DelClientConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelClientConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelClientConfigReqMultiError(errors)
	}

	return nil
}

// DelClientConfigReqMultiError is an error wrapping multiple validation errors
// returned by DelClientConfigReq.ValidateAll() if the designated constraints
// aren't met.
type DelClientConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelClientConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelClientConfigReqMultiError) AllErrors() []error { return m }

// DelClientConfigReqValidationError is the validation error returned by
// DelClientConfigReq.Validate if the designated constraints aren't met.
type DelClientConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelClientConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelClientConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelClientConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelClientConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelClientConfigReqValidationError) ErrorName() string {
	return "DelClientConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelClientConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelClientConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelClientConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelClientConfigReqValidationError{}

// Validate checks the field values on DelClientConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelClientConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelClientConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelClientConfigRespMultiError, or nil if none found.
func (m *DelClientConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelClientConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelClientConfigRespMultiError(errors)
	}

	return nil
}

// DelClientConfigRespMultiError is an error wrapping multiple validation
// errors returned by DelClientConfigResp.ValidateAll() if the designated
// constraints aren't met.
type DelClientConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelClientConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelClientConfigRespMultiError) AllErrors() []error { return m }

// DelClientConfigRespValidationError is the validation error returned by
// DelClientConfigResp.Validate if the designated constraints aren't met.
type DelClientConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelClientConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelClientConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelClientConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelClientConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelClientConfigRespValidationError) ErrorName() string {
	return "DelClientConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelClientConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelClientConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelClientConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelClientConfigRespValidationError{}

// Validate checks the field values on GetClientConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientConfigReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientConfigReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientConfigReqMultiError, or nil if none found.
func (m *GetClientConfigReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientConfigReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClientConfigReqMultiError(errors)
	}

	return nil
}

// GetClientConfigReqMultiError is an error wrapping multiple validation errors
// returned by GetClientConfigReq.ValidateAll() if the designated constraints
// aren't met.
type GetClientConfigReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientConfigReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientConfigReqMultiError) AllErrors() []error { return m }

// GetClientConfigReqValidationError is the validation error returned by
// GetClientConfigReq.Validate if the designated constraints aren't met.
type GetClientConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientConfigReqValidationError) ErrorName() string {
	return "GetClientConfigReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientConfigReqValidationError{}

// Validate checks the field values on GetClientConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientConfigResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientConfigResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientConfigRespMultiError, or nil if none found.
func (m *GetClientConfigResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientConfigResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	if len(errors) > 0 {
		return GetClientConfigRespMultiError(errors)
	}

	return nil
}

// GetClientConfigRespMultiError is an error wrapping multiple validation
// errors returned by GetClientConfigResp.ValidateAll() if the designated
// constraints aren't met.
type GetClientConfigRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientConfigRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientConfigRespMultiError) AllErrors() []error { return m }

// GetClientConfigRespValidationError is the validation error returned by
// GetClientConfigResp.Validate if the designated constraints aren't met.
type GetClientConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientConfigRespValidationError) ErrorName() string {
	return "GetClientConfigRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientConfigRespValidationError{}

// Validate checks the field values on GetUserTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenReqMultiError, or nil if none found.
func (m *GetUserTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserTokenReqMultiError(errors)
	}

	return nil
}

// GetUserTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetUserTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenReqMultiError) AllErrors() []error { return m }

// GetUserTokenReqValidationError is the validation error returned by
// GetUserTokenReq.Validate if the designated constraints aren't met.
type GetUserTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenReqValidationError) ErrorName() string { return "GetUserTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenReqValidationError{}

// Validate checks the field values on GetUserTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenRespMultiError, or nil if none found.
func (m *GetUserTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokensMap

	if len(errors) > 0 {
		return GetUserTokenRespMultiError(errors)
	}

	return nil
}

// GetUserTokenRespMultiError is an error wrapping multiple validation errors
// returned by GetUserTokenResp.ValidateAll() if the designated constraints
// aren't met.
type GetUserTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenRespMultiError) AllErrors() []error { return m }

// GetUserTokenRespValidationError is the validation error returned by
// GetUserTokenResp.Validate if the designated constraints aren't met.
type GetUserTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenRespValidationError) ErrorName() string { return "GetUserTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenRespValidationError{}

// Validate checks the field values on UpdateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateMenuReqMultiError, or
// nil if none found.
func (m *UpdateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for MenuType

	// no validation rules for MenuParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for IsCache

	// no validation rules for Status

	// no validation rules for MenuId

	if len(errors) > 0 {
		return UpdateMenuReqMultiError(errors)
	}

	return nil
}

// UpdateMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuReqMultiError) AllErrors() []error { return m }

// UpdateMenuReqValidationError is the validation error returned by
// UpdateMenuReq.Validate if the designated constraints aren't met.
type UpdateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReqValidationError) ErrorName() string { return "UpdateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReqValidationError{}

// Validate checks the field values on MenuInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuInfoReqMultiError, or
// nil if none found.
func (m *MenuInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	if len(errors) > 0 {
		return MenuInfoReqMultiError(errors)
	}

	return nil
}

// MenuInfoReqMultiError is an error wrapping multiple validation errors
// returned by MenuInfoReq.ValidateAll() if the designated constraints aren't met.
type MenuInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuInfoReqMultiError) AllErrors() []error { return m }

// MenuInfoReqValidationError is the validation error returned by
// MenuInfoReq.Validate if the designated constraints aren't met.
type MenuInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuInfoReqValidationError) ErrorName() string { return "MenuInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e MenuInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuInfoReqValidationError{}

// Validate checks the field values on AddMenuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddMenuReqMultiError, or
// nil if none found.
func (m *AddMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for MenuType

	// no validation rules for MenuParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for IsCache

	// no validation rules for Status

	// no validation rules for Desc

	if len(errors) > 0 {
		return AddMenuReqMultiError(errors)
	}

	return nil
}

// AddMenuReqMultiError is an error wrapping multiple validation errors
// returned by AddMenuReq.ValidateAll() if the designated constraints aren't met.
type AddMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMenuReqMultiError) AllErrors() []error { return m }

// AddMenuReqValidationError is the validation error returned by
// AddMenuReq.Validate if the designated constraints aren't met.
type AddMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMenuReqValidationError) ErrorName() string { return "AddMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e AddMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMenuReqValidationError{}

// Validate checks the field values on DelMenuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelMenuReqMultiError, or
// nil if none found.
func (m *DelMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	if len(errors) > 0 {
		return DelMenuReqMultiError(errors)
	}

	return nil
}

// DelMenuReqMultiError is an error wrapping multiple validation errors
// returned by DelMenuReq.ValidateAll() if the designated constraints aren't met.
type DelMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMenuReqMultiError) AllErrors() []error { return m }

// DelMenuReqValidationError is the validation error returned by
// DelMenuReq.Validate if the designated constraints aren't met.
type DelMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMenuReqValidationError) ErrorName() string { return "DelMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DelMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMenuReqValidationError{}

// Validate checks the field values on UpdateMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateMenuRespMultiError,
// or nil if none found.
func (m *UpdateMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMenuRespMultiError(errors)
	}

	return nil
}

// UpdateMenuRespMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuRespMultiError) AllErrors() []error { return m }

// UpdateMenuRespValidationError is the validation error returned by
// UpdateMenuResp.Validate if the designated constraints aren't met.
type UpdateMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuRespValidationError) ErrorName() string { return "UpdateMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuRespValidationError{}

// Validate checks the field values on SearchMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchMenuReqMultiError, or
// nil if none found.
func (m *SearchMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for MenuType

	// no validation rules for Path

	// no validation rules for Status

	// no validation rules for RoleId

	// no validation rules for CreateBy

	// no validation rules for StartTime

	// no validation rules for EndTime

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchMenuReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchMenuReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchMenuReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchMenuReqMultiError(errors)
	}

	return nil
}

// SearchMenuReqMultiError is an error wrapping multiple validation errors
// returned by SearchMenuReq.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuReqMultiError) AllErrors() []error { return m }

// SearchMenuReqValidationError is the validation error returned by
// SearchMenuReq.Validate if the designated constraints aren't met.
type SearchMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuReqValidationError) ErrorName() string { return "SearchMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuReqValidationError{}

// Validate checks the field values on DisableMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisableMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisableMenuReqMultiError,
// or nil if none found.
func (m *DisableMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	if len(errors) > 0 {
		return DisableMenuReqMultiError(errors)
	}

	return nil
}

// DisableMenuReqMultiError is an error wrapping multiple validation errors
// returned by DisableMenuReq.ValidateAll() if the designated constraints
// aren't met.
type DisableMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableMenuReqMultiError) AllErrors() []error { return m }

// DisableMenuReqValidationError is the validation error returned by
// DisableMenuReq.Validate if the designated constraints aren't met.
type DisableMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableMenuReqValidationError) ErrorName() string { return "DisableMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DisableMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableMenuReqValidationError{}

// Validate checks the field values on MenuInfoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuInfoRespMultiError, or
// nil if none found.
func (m *MenuInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuName

	// no validation rules for MenuType

	// no validation rules for MenuParentId

	// no validation rules for Sort

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for IsCache

	// no validation rules for Status

	// no validation rules for MenuId

	// no validation rules for CreateBy

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return MenuInfoRespMultiError(errors)
	}

	return nil
}

// MenuInfoRespMultiError is an error wrapping multiple validation errors
// returned by MenuInfoResp.ValidateAll() if the designated constraints aren't met.
type MenuInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuInfoRespMultiError) AllErrors() []error { return m }

// MenuInfoRespValidationError is the validation error returned by
// MenuInfoResp.Validate if the designated constraints aren't met.
type MenuInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuInfoRespValidationError) ErrorName() string { return "MenuInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e MenuInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuInfoRespValidationError{}

// Validate checks the field values on AddMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddMenuRespMultiError, or
// nil if none found.
func (m *AddMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddMenuRespMultiError(errors)
	}

	return nil
}

// AddMenuRespMultiError is an error wrapping multiple validation errors
// returned by AddMenuResp.ValidateAll() if the designated constraints aren't met.
type AddMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMenuRespMultiError) AllErrors() []error { return m }

// AddMenuRespValidationError is the validation error returned by
// AddMenuResp.Validate if the designated constraints aren't met.
type AddMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMenuRespValidationError) ErrorName() string { return "AddMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e AddMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMenuRespValidationError{}

// Validate checks the field values on DelMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelMenuRespMultiError, or
// nil if none found.
func (m *DelMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelMenuRespMultiError(errors)
	}

	return nil
}

// DelMenuRespMultiError is an error wrapping multiple validation errors
// returned by DelMenuResp.ValidateAll() if the designated constraints aren't met.
type DelMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMenuRespMultiError) AllErrors() []error { return m }

// DelMenuRespValidationError is the validation error returned by
// DelMenuResp.Validate if the designated constraints aren't met.
type DelMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMenuRespValidationError) ErrorName() string { return "DelMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e DelMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMenuRespValidationError{}

// Validate checks the field values on SearchMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchMenuRespMultiError,
// or nil if none found.
func (m *SearchMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenuInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchMenuRespValidationError{
						field:  fmt.Sprintf("MenuInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchMenuRespValidationError{
						field:  fmt.Sprintf("MenuInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchMenuRespValidationError{
					field:  fmt.Sprintf("MenuInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Pages

	if len(errors) > 0 {
		return SearchMenuRespMultiError(errors)
	}

	return nil
}

// SearchMenuRespMultiError is an error wrapping multiple validation errors
// returned by SearchMenuResp.ValidateAll() if the designated constraints
// aren't met.
type SearchMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMenuRespMultiError) AllErrors() []error { return m }

// SearchMenuRespValidationError is the validation error returned by
// SearchMenuResp.Validate if the designated constraints aren't met.
type SearchMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMenuRespValidationError) ErrorName() string { return "SearchMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e SearchMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMenuRespValidationError{}

// Validate checks the field values on DisableMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DisableMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableMenuRespMultiError, or nil if none found.
func (m *DisableMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableMenuRespMultiError(errors)
	}

	return nil
}

// DisableMenuRespMultiError is an error wrapping multiple validation errors
// returned by DisableMenuResp.ValidateAll() if the designated constraints
// aren't met.
type DisableMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableMenuRespMultiError) AllErrors() []error { return m }

// DisableMenuRespValidationError is the validation error returned by
// DisableMenuResp.Validate if the designated constraints aren't met.
type DisableMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableMenuRespValidationError) ErrorName() string { return "DisableMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e DisableMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableMenuRespValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleReqMultiError, or
// nil if none found.
func (m *UpdateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateRoleReqMultiError(errors)
	}

	return nil
}

// UpdateRoleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReqMultiError) AllErrors() []error { return m }

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on UpdateRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleRespMultiError,
// or nil if none found.
func (m *UpdateRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleRespMultiError(errors)
	}

	return nil
}

// UpdateRoleRespMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRespMultiError) AllErrors() []error { return m }

// UpdateRoleRespValidationError is the validation error returned by
// UpdateRoleResp.Validate if the designated constraints aren't met.
type UpdateRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRespValidationError) ErrorName() string { return "UpdateRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRespValidationError{}

// Validate checks the field values on RoleInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleInfoReqMultiError, or
// nil if none found.
func (m *RoleInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleInfoReqMultiError(errors)
	}

	return nil
}

// RoleInfoReqMultiError is an error wrapping multiple validation errors
// returned by RoleInfoReq.ValidateAll() if the designated constraints aren't met.
type RoleInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleInfoReqMultiError) AllErrors() []error { return m }

// RoleInfoReqValidationError is the validation error returned by
// RoleInfoReq.Validate if the designated constraints aren't met.
type RoleInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleInfoReqValidationError) ErrorName() string { return "RoleInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleInfoReqValidationError{}

// Validate checks the field values on RoleInfoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleInfoRespMultiError, or
// nil if none found.
func (m *RoleInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for CreateBy

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return RoleInfoRespMultiError(errors)
	}

	return nil
}

// RoleInfoRespMultiError is an error wrapping multiple validation errors
// returned by RoleInfoResp.ValidateAll() if the designated constraints aren't met.
type RoleInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleInfoRespMultiError) AllErrors() []error { return m }

// RoleInfoRespValidationError is the validation error returned by
// RoleInfoResp.Validate if the designated constraints aren't met.
type RoleInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleInfoRespValidationError) ErrorName() string { return "RoleInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleInfoRespValidationError{}

// Validate checks the field values on AddRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRoleReqMultiError, or
// nil if none found.
func (m *AddRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleName

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	if len(errors) > 0 {
		return AddRoleReqMultiError(errors)
	}

	return nil
}

// AddRoleReqMultiError is an error wrapping multiple validation errors
// returned by AddRoleReq.ValidateAll() if the designated constraints aren't met.
type AddRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleReqMultiError) AllErrors() []error { return m }

// AddRoleReqValidationError is the validation error returned by
// AddRoleReq.Validate if the designated constraints aren't met.
type AddRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleReqValidationError) ErrorName() string { return "AddRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleReqValidationError{}

// Validate checks the field values on AddRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRoleRespMultiError, or
// nil if none found.
func (m *AddRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRoleRespMultiError(errors)
	}

	return nil
}

// AddRoleRespMultiError is an error wrapping multiple validation errors
// returned by AddRoleResp.ValidateAll() if the designated constraints aren't met.
type AddRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleRespMultiError) AllErrors() []error { return m }

// AddRoleRespValidationError is the validation error returned by
// AddRoleResp.Validate if the designated constraints aren't met.
type AddRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleRespValidationError) ErrorName() string { return "AddRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleRespValidationError{}

// Validate checks the field values on DelRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRoleReqMultiError, or
// nil if none found.
func (m *DelRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return DelRoleReqMultiError(errors)
	}

	return nil
}

// DelRoleReqMultiError is an error wrapping multiple validation errors
// returned by DelRoleReq.ValidateAll() if the designated constraints aren't met.
type DelRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleReqMultiError) AllErrors() []error { return m }

// DelRoleReqValidationError is the validation error returned by
// DelRoleReq.Validate if the designated constraints aren't met.
type DelRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleReqValidationError) ErrorName() string { return "DelRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleReqValidationError{}

// Validate checks the field values on DelRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRoleRespMultiError, or
// nil if none found.
func (m *DelRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelRoleRespMultiError(errors)
	}

	return nil
}

// DelRoleRespMultiError is an error wrapping multiple validation errors
// returned by DelRoleResp.ValidateAll() if the designated constraints aren't met.
type DelRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleRespMultiError) AllErrors() []error { return m }

// DelRoleRespValidationError is the validation error returned by
// DelRoleResp.Validate if the designated constraints aren't met.
type DelRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleRespValidationError) ErrorName() string { return "DelRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleRespValidationError{}

// Validate checks the field values on SearchRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRoleReqMultiError, or
// nil if none found.
func (m *SearchRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleName

	// no validation rules for RoleCode

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for CreateBy

	// no validation rules for StartTime

	// no validation rules for EndTime

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchRoleReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchRoleReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchRoleReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchRoleReqMultiError(errors)
	}

	return nil
}

// SearchRoleReqMultiError is an error wrapping multiple validation errors
// returned by SearchRoleReq.ValidateAll() if the designated constraints
// aren't met.
type SearchRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRoleReqMultiError) AllErrors() []error { return m }

// SearchRoleReqValidationError is the validation error returned by
// SearchRoleReq.Validate if the designated constraints aren't met.
type SearchRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRoleReqValidationError) ErrorName() string { return "SearchRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRoleReqValidationError{}

// Validate checks the field values on SearchRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRoleRespMultiError,
// or nil if none found.
func (m *SearchRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoleInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchRoleRespValidationError{
						field:  fmt.Sprintf("RoleInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchRoleRespValidationError{
						field:  fmt.Sprintf("RoleInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchRoleRespValidationError{
					field:  fmt.Sprintf("RoleInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Pages

	if len(errors) > 0 {
		return SearchRoleRespMultiError(errors)
	}

	return nil
}

// SearchRoleRespMultiError is an error wrapping multiple validation errors
// returned by SearchRoleResp.ValidateAll() if the designated constraints
// aren't met.
type SearchRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRoleRespMultiError) AllErrors() []error { return m }

// SearchRoleRespValidationError is the validation error returned by
// SearchRoleResp.Validate if the designated constraints aren't met.
type SearchRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRoleRespValidationError) ErrorName() string { return "SearchRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e SearchRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRoleRespValidationError{}

// Validate checks the field values on DisableRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DisableRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DisableRoleReqMultiError,
// or nil if none found.
func (m *DisableRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return DisableRoleReqMultiError(errors)
	}

	return nil
}

// DisableRoleReqMultiError is an error wrapping multiple validation errors
// returned by DisableRoleReq.ValidateAll() if the designated constraints
// aren't met.
type DisableRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableRoleReqMultiError) AllErrors() []error { return m }

// DisableRoleReqValidationError is the validation error returned by
// DisableRoleReq.Validate if the designated constraints aren't met.
type DisableRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableRoleReqValidationError) ErrorName() string { return "DisableRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DisableRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableRoleReqValidationError{}

// Validate checks the field values on DisableRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DisableRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableRoleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableRoleRespMultiError, or nil if none found.
func (m *DisableRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableRoleRespMultiError(errors)
	}

	return nil
}

// DisableRoleRespMultiError is an error wrapping multiple validation errors
// returned by DisableRoleResp.ValidateAll() if the designated constraints
// aren't met.
type DisableRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableRoleRespMultiError) AllErrors() []error { return m }

// DisableRoleRespValidationError is the validation error returned by
// DisableRoleResp.Validate if the designated constraints aren't met.
type DisableRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableRoleRespValidationError) ErrorName() string { return "DisableRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e DisableRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableRoleRespValidationError{}

// Validate checks the field values on UpdateRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuReqMultiError, or nil if none found.
func (m *UpdateRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return UpdateRoleMenuReqMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuReqMultiError) AllErrors() []error { return m }

// UpdateRoleMenuReqValidationError is the validation error returned by
// UpdateRoleMenuReq.Validate if the designated constraints aren't met.
type UpdateRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuReqValidationError) ErrorName() string {
	return "UpdateRoleMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuReqValidationError{}

// Validate checks the field values on UpdateRoleMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuRespMultiError, or nil if none found.
func (m *UpdateRoleMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleMenuRespMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuRespMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleMenuResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuRespMultiError) AllErrors() []error { return m }

// UpdateRoleMenuRespValidationError is the validation error returned by
// UpdateRoleMenuResp.Validate if the designated constraints aren't met.
type UpdateRoleMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuRespValidationError) ErrorName() string {
	return "UpdateRoleMenuRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuRespValidationError{}

// Validate checks the field values on RoleMenuInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleMenuInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleMenuInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleMenuInfoReqMultiError, or nil if none found.
func (m *RoleMenuInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleMenuInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleMenuInfoReqMultiError(errors)
	}

	return nil
}

// RoleMenuInfoReqMultiError is an error wrapping multiple validation errors
// returned by RoleMenuInfoReq.ValidateAll() if the designated constraints
// aren't met.
type RoleMenuInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMenuInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMenuInfoReqMultiError) AllErrors() []error { return m }

// RoleMenuInfoReqValidationError is the validation error returned by
// RoleMenuInfoReq.Validate if the designated constraints aren't met.
type RoleMenuInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleMenuInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleMenuInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleMenuInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleMenuInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleMenuInfoReqValidationError) ErrorName() string { return "RoleMenuInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleMenuInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleMenuInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleMenuInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleMenuInfoReqValidationError{}

// Validate checks the field values on RoleMenuInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleMenuInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleMenuInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleMenuInfoRespMultiError, or nil if none found.
func (m *RoleMenuInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleMenuInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleMenuInfoRespMultiError(errors)
	}

	return nil
}

// RoleMenuInfoRespMultiError is an error wrapping multiple validation errors
// returned by RoleMenuInfoResp.ValidateAll() if the designated constraints
// aren't met.
type RoleMenuInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMenuInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMenuInfoRespMultiError) AllErrors() []error { return m }

// RoleMenuInfoRespValidationError is the validation error returned by
// RoleMenuInfoResp.Validate if the designated constraints aren't met.
type RoleMenuInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleMenuInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleMenuInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleMenuInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleMenuInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleMenuInfoRespValidationError) ErrorName() string { return "RoleMenuInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleMenuInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleMenuInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleMenuInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleMenuInfoRespValidationError{}

// Validate checks the field values on AddRoleMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRoleMenuReqMultiError,
// or nil if none found.
func (m *AddRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return AddRoleMenuReqMultiError(errors)
	}

	return nil
}

// AddRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by AddRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type AddRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleMenuReqMultiError) AllErrors() []error { return m }

// AddRoleMenuReqValidationError is the validation error returned by
// AddRoleMenuReq.Validate if the designated constraints aren't met.
type AddRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleMenuReqValidationError) ErrorName() string { return "AddRoleMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleMenuReqValidationError{}

// Validate checks the field values on AddRoleMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddRoleMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRoleMenuRespMultiError, or nil if none found.
func (m *AddRoleMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRoleMenuRespMultiError(errors)
	}

	return nil
}

// AddRoleMenuRespMultiError is an error wrapping multiple validation errors
// returned by AddRoleMenuResp.ValidateAll() if the designated constraints
// aren't met.
type AddRoleMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleMenuRespMultiError) AllErrors() []error { return m }

// AddRoleMenuRespValidationError is the validation error returned by
// AddRoleMenuResp.Validate if the designated constraints aren't met.
type AddRoleMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleMenuRespValidationError) ErrorName() string { return "AddRoleMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e AddRoleMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleMenuRespValidationError{}

// Validate checks the field values on DelRoleMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRoleMenuReqMultiError,
// or nil if none found.
func (m *DelRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return DelRoleMenuReqMultiError(errors)
	}

	return nil
}

// DelRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by DelRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type DelRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleMenuReqMultiError) AllErrors() []error { return m }

// DelRoleMenuReqValidationError is the validation error returned by
// DelRoleMenuReq.Validate if the designated constraints aren't met.
type DelRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleMenuReqValidationError) ErrorName() string { return "DelRoleMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleMenuReqValidationError{}

// Validate checks the field values on DelRoleMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelRoleMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRoleMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelRoleMenuRespMultiError, or nil if none found.
func (m *DelRoleMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRoleMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelRoleMenuRespMultiError(errors)
	}

	return nil
}

// DelRoleMenuRespMultiError is an error wrapping multiple validation errors
// returned by DelRoleMenuResp.ValidateAll() if the designated constraints
// aren't met.
type DelRoleMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRoleMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRoleMenuRespMultiError) AllErrors() []error { return m }

// DelRoleMenuRespValidationError is the validation error returned by
// DelRoleMenuResp.Validate if the designated constraints aren't met.
type DelRoleMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRoleMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRoleMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRoleMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRoleMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRoleMenuRespValidationError) ErrorName() string { return "DelRoleMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e DelRoleMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRoleMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRoleMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRoleMenuRespValidationError{}

// Validate checks the field values on UpdateVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVersionReqMultiError, or nil if none found.
func (m *UpdateVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductName

	// no validation rules for Platform

	// no validation rules for VersionCode

	// no validation rules for Desc

	// no validation rules for AndroidDownloadUrl

	// no validation rules for IosDownloadUrl

	// no validation rules for ShowForceUpgrade

	// no validation rules for ShowUpgradeTip

	// no validation rules for VersionId

	if len(errors) > 0 {
		return UpdateVersionReqMultiError(errors)
	}

	return nil
}

// UpdateVersionReqMultiError is an error wrapping multiple validation errors
// returned by UpdateVersionReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVersionReqMultiError) AllErrors() []error { return m }

// UpdateVersionReqValidationError is the validation error returned by
// UpdateVersionReq.Validate if the designated constraints aren't met.
type UpdateVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVersionReqValidationError) ErrorName() string { return "UpdateVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVersionReqValidationError{}

// Validate checks the field values on UpdateVersionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVersionRespMultiError, or nil if none found.
func (m *UpdateVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateVersionRespMultiError(errors)
	}

	return nil
}

// UpdateVersionRespMultiError is an error wrapping multiple validation errors
// returned by UpdateVersionResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVersionRespMultiError) AllErrors() []error { return m }

// UpdateVersionRespValidationError is the validation error returned by
// UpdateVersionResp.Validate if the designated constraints aren't met.
type UpdateVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVersionRespValidationError) ErrorName() string {
	return "UpdateVersionRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVersionRespValidationError{}

// Validate checks the field values on AddVersionReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddVersionReqMultiError, or
// nil if none found.
func (m *AddVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductName

	// no validation rules for Platform

	// no validation rules for VersionCode

	// no validation rules for Desc

	// no validation rules for AndroidDownloadUrl

	// no validation rules for IosDownloadUrl

	// no validation rules for ShowForceUpgrade

	// no validation rules for ShowUpgradeTip

	if len(errors) > 0 {
		return AddVersionReqMultiError(errors)
	}

	return nil
}

// AddVersionReqMultiError is an error wrapping multiple validation errors
// returned by AddVersionReq.ValidateAll() if the designated constraints
// aren't met.
type AddVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVersionReqMultiError) AllErrors() []error { return m }

// AddVersionReqValidationError is the validation error returned by
// AddVersionReq.Validate if the designated constraints aren't met.
type AddVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVersionReqValidationError) ErrorName() string { return "AddVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e AddVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVersionReqValidationError{}

// Validate checks the field values on AddVersionResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVersionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddVersionRespMultiError,
// or nil if none found.
func (m *AddVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddVersionRespMultiError(errors)
	}

	return nil
}

// AddVersionRespMultiError is an error wrapping multiple validation errors
// returned by AddVersionResp.ValidateAll() if the designated constraints
// aren't met.
type AddVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVersionRespMultiError) AllErrors() []error { return m }

// AddVersionRespValidationError is the validation error returned by
// AddVersionResp.Validate if the designated constraints aren't met.
type AddVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVersionRespValidationError) ErrorName() string { return "AddVersionRespValidationError" }

// Error satisfies the builtin error interface
func (e AddVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVersionRespValidationError{}

// Validate checks the field values on SearchVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchVersionReqMultiError, or nil if none found.
func (m *SearchVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductName

	// no validation rules for Platform

	// no validation rules for VersionCode

	// no validation rules for ForceUpgrade

	// no validation rules for CreateBy

	// no validation rules for StartTime

	// no validation rules for EndTime

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchVersionReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchVersionReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchVersionReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchVersionReqMultiError(errors)
	}

	return nil
}

// SearchVersionReqMultiError is an error wrapping multiple validation errors
// returned by SearchVersionReq.ValidateAll() if the designated constraints
// aren't met.
type SearchVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchVersionReqMultiError) AllErrors() []error { return m }

// SearchVersionReqValidationError is the validation error returned by
// SearchVersionReq.Validate if the designated constraints aren't met.
type SearchVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchVersionReqValidationError) ErrorName() string { return "SearchVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchVersionReqValidationError{}

// Validate checks the field values on SearchVersionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchVersionRespMultiError, or nil if none found.
func (m *SearchVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Pages

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchVersionRespValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchVersionRespValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchVersionRespValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchVersionRespMultiError(errors)
	}

	return nil
}

// SearchVersionRespMultiError is an error wrapping multiple validation errors
// returned by SearchVersionResp.ValidateAll() if the designated constraints
// aren't met.
type SearchVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchVersionRespMultiError) AllErrors() []error { return m }

// SearchVersionRespValidationError is the validation error returned by
// SearchVersionResp.Validate if the designated constraints aren't met.
type SearchVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchVersionRespValidationError) ErrorName() string {
	return "SearchVersionRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchVersionRespValidationError{}

// Validate checks the field values on VersionInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionInfoReqMultiError,
// or nil if none found.
func (m *VersionInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VersionId

	if len(errors) > 0 {
		return VersionInfoReqMultiError(errors)
	}

	return nil
}

// VersionInfoReqMultiError is an error wrapping multiple validation errors
// returned by VersionInfoReq.ValidateAll() if the designated constraints
// aren't met.
type VersionInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionInfoReqMultiError) AllErrors() []error { return m }

// VersionInfoReqValidationError is the validation error returned by
// VersionInfoReq.Validate if the designated constraints aren't met.
type VersionInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionInfoReqValidationError) ErrorName() string { return "VersionInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e VersionInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionInfoReqValidationError{}

// Validate checks the field values on VersionInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VersionInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VersionInfoRespMultiError, or nil if none found.
func (m *VersionInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductName

	// no validation rules for Platform

	// no validation rules for VersionCode

	// no validation rules for Desc

	// no validation rules for AndroidDownloadUrl

	// no validation rules for IosDownloadUrl

	// no validation rules for ShowForceUpgrade

	// no validation rules for ShowUpgradeTip

	// no validation rules for VersionId

	// no validation rules for CreatTime

	if len(errors) > 0 {
		return VersionInfoRespMultiError(errors)
	}

	return nil
}

// VersionInfoRespMultiError is an error wrapping multiple validation errors
// returned by VersionInfoResp.ValidateAll() if the designated constraints
// aren't met.
type VersionInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionInfoRespMultiError) AllErrors() []error { return m }

// VersionInfoRespValidationError is the validation error returned by
// VersionInfoResp.Validate if the designated constraints aren't met.
type VersionInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionInfoRespValidationError) ErrorName() string { return "VersionInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e VersionInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionInfoRespValidationError{}

// Validate checks the field values on DelVersionReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelVersionReqMultiError, or
// nil if none found.
func (m *DelVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VersionId

	if len(errors) > 0 {
		return DelVersionReqMultiError(errors)
	}

	return nil
}

// DelVersionReqMultiError is an error wrapping multiple validation errors
// returned by DelVersionReq.ValidateAll() if the designated constraints
// aren't met.
type DelVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelVersionReqMultiError) AllErrors() []error { return m }

// DelVersionReqValidationError is the validation error returned by
// DelVersionReq.Validate if the designated constraints aren't met.
type DelVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelVersionReqValidationError) ErrorName() string { return "DelVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e DelVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelVersionReqValidationError{}

// Validate checks the field values on DelVersionResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelVersionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelVersionRespMultiError,
// or nil if none found.
func (m *DelVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelVersionRespMultiError(errors)
	}

	return nil
}

// DelVersionRespMultiError is an error wrapping multiple validation errors
// returned by DelVersionResp.ValidateAll() if the designated constraints
// aren't met.
type DelVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelVersionRespMultiError) AllErrors() []error { return m }

// DelVersionRespValidationError is the validation error returned by
// DelVersionResp.Validate if the designated constraints aren't met.
type DelVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelVersionRespValidationError) ErrorName() string { return "DelVersionRespValidationError" }

// Error satisfies the builtin error interface
func (e DelVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelVersionRespValidationError{}

// Validate checks the field values on CheckVersionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckVersionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckVersionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckVersionReqMultiError, or nil if none found.
func (m *CheckVersionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckVersionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Platform

	if len(errors) > 0 {
		return CheckVersionReqMultiError(errors)
	}

	return nil
}

// CheckVersionReqMultiError is an error wrapping multiple validation errors
// returned by CheckVersionReq.ValidateAll() if the designated constraints
// aren't met.
type CheckVersionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckVersionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckVersionReqMultiError) AllErrors() []error { return m }

// CheckVersionReqValidationError is the validation error returned by
// CheckVersionReq.Validate if the designated constraints aren't met.
type CheckVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVersionReqValidationError) ErrorName() string { return "CheckVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVersionReqValidationError{}

// Validate checks the field values on CheckVersionResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckVersionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckVersionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckVersionRespMultiError, or nil if none found.
func (m *CheckVersionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckVersionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurVersion

	// no validation rules for DownloadUrl

	// no validation rules for Desc

	if len(errors) > 0 {
		return CheckVersionRespMultiError(errors)
	}

	return nil
}

// CheckVersionRespMultiError is an error wrapping multiple validation errors
// returned by CheckVersionResp.ValidateAll() if the designated constraints
// aren't met.
type CheckVersionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckVersionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckVersionRespMultiError) AllErrors() []error { return m }

// CheckVersionRespValidationError is the validation error returned by
// CheckVersionResp.Validate if the designated constraints aren't met.
type CheckVersionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVersionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVersionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVersionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVersionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVersionRespValidationError) ErrorName() string { return "CheckVersionRespValidationError" }

// Error satisfies the builtin error interface
func (e CheckVersionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVersionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVersionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVersionRespValidationError{}
