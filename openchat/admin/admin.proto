// Copyright © 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openim.openchat.admin;

import "sdkws/sdkws.proto";
import "wrapperspb/wrapperspb.proto";

option go_package = "github.com/ammmnia/protocol/openchat/admin";

// login
message LoginReq {
  string account = 1;
  string password = 2;
}

message LoginResp {
  string adminAccount = 1;
  string adminToken = 2;
  string nickname = 3;
  string faceURL = 4;
  int32 level = 5;
  string adminUserID = 6;
}

message LogoutReq {
  string account = 1;
}

message LogoutResp {
}

message AddAdminAccountReq {
  string account = 1; //用户名
  string password = 2;
  string nickname = 4;  //姓名
  uint64 roleId = 5;
  string desc = 6;
  uint32 status = 7; //状态 1:正常，2:禁用
}

message AddAdminAccountResp {}

message AdminUpdateInfoReq {
  string userId = 1;
  openim.protobuf.StringValue account = 2;
  openim.protobuf.StringValue password = 3;
  openim.protobuf.StringValue nickname = 4;
  openim.protobuf.UInt32Value status = 5;
  openim.protobuf.UInt64Value roleId = 6;
  openim.protobuf.StringValue desc = 7;
}

message AdminUpdateInfoResp {
  string userID = 1;
  string account = 2;
  string nickname = 4;
  string faceURL = 5;
}

message ChangePasswordReq {
  string password = 1;
}

message ChangePasswordResp {}

message GetAdminInfoReq {
  string userID = 1;
}

message ChangeAdminPasswordReq {
  string userID = 1;
  string currentPassword = 2;
  string newPassword = 3;
}

message ChangeAdminPasswordResp {}

//message DelAdminAccountReq {
//  repeated string userIDs = 1;
//}
//
//message DelAdminAccountResp {}

message SearchAdminAccountReq {
  openim.sdkws.RequestPagination pagination = 2;
  string nickname = 3;
  uint64 roleId = 4;
  string updateBy = 5;
  uint32 status = 6;
  string startTime = 7;
  string endTime = 8;
}

message SearchAdminAccountResp {
  uint64 total = 1;
  uint64 pages = 2;
  repeated GetAdminInfoResp adminAccounts = 3;
}

message GetAdminInfoResp {
  string account = 2;
  string faceURL = 4;
  string nickname = 5;
  string userID = 6;
  string desc = 7;
  string roleCode = 9;
  string roleName = 10;
  uint32 status = 11;
  string updateBy = 12;
  int64 updateTime = 13;
  int64 latestLoginTime = 14;
  uint64 roleId = 15;
}

message DisableAdminAccountReq {
  string userID = 1;
  uint32 status = 2;  //状态 1:正常，2:禁用
}

message DisableAdminAccountResp {
}

// ################### TOKEN ###################

message CreateTokenReq {
  string userID = 1;
  string account = 2;
  int32 userType = 32;
}

message CreateTokenResp {
  string token = 1;
}

message ParseTokenReq {
  string token = 1;
}

message ParseTokenResp {
  string userID = 1;
  string account = 2;
  int32 userType = 3;
  int64 expireTimeSeconds = 4;
}

message InvalidateTokenReq {
  string userID = 1;
}

message InvalidateTokenResp {}

message GetUserTokenReq {
  string userID = 1;
}

message GetUserTokenResp {
  map<string, int32> tokensMap = 1;
}

message UpdateMenuReq {
  string menuName = 1;
  uint32 menuType = 2;
  uint64 menuParentId = 3;
  uint64 sort = 4;
  string icon = 5;
  string path = 6;
  uint32 isCache = 7;
  uint32 status = 8;
  uint64 menuId = 9;
}

message MenuInfoReq {
  uint64 menuId = 1;
}

message AddMenuReq {
  string menuName = 1;
  uint32 menuType = 2;
  uint64 menuParentId = 3;
  uint64 sort = 4;
  string icon = 5;
  string path = 6;
  uint32 isCache = 7;
  uint32 status = 8;
  string desc = 9;
}

message DelMenuReq {
  uint64 menuId = 1;
}

message UpdateMenuResp{}

message SearchMenuReq {
  string menuName = 1;
  uint32 menuType = 2;
  string path = 6;
  uint32 status = 8;
  string roleCode = 9;
  string updateBy = 10;
  string startTime = 11;
  string endTime = 12;
  openim.sdkws.RequestPagination pagination = 13;
}

message DisableMenuReq {
  uint64 menuId = 1;
  uint32 status = 2;
}

message SearchMenuTreeReq {
  repeated uint64 menuId = 1; //如果为空，或者只有一个0，则是查询整个菜单树，否则查询指定菜单
}

message SearchMenuTreeResp {
  map<string, string> menuTreeMap = 1;
}

message MenuInfoResp {
  string menuName = 1;
  uint32 menuType = 2;
  uint64 menuParentId = 3;
  uint64 sort = 4;
  string icon = 5;
  string path = 6;
  uint32 isCache = 7;
  uint32 status = 8;
  uint64 menuId = 9;
  string updateBy = 10;
  int64 updateTime = 11;
  string roleCode = 12;
}

message AddMenuResp {
}

message DelMenuResp {
}

message SearchMenuResp {
  repeated MenuInfoResp menuInfo = 1;
  uint64 total = 2;
  uint64 pages = 3;
}

message DisableMenuResp {
}

message UpdateRoleReq {
  uint64 roleId = 1;
  string roleName = 2;
  string roleCode = 3;
  string desc = 4;
  uint32 status = 5;
}

message UpdateRoleResp {

}

message RoleInfoReq {
  uint64 roleId = 1;
}

message RoleInfoResp {
  uint64 roleId = 1;
  string roleName = 2;
  string roleCode = 3;
  string desc = 4;
  uint32 status = 5;
  string updateBy = 6;
  int64 updateTime = 7;
}

message AddRoleReq {
    string roleName = 1;
    string roleCode = 2;
    string desc = 3;
    uint32 status = 4;
}

message AddRoleResp {
  
}

message SearchAllRoleReq{

}

message SearchAllRoleResp {
  repeated RoleInfoResp roles = 1;
}

// 删除角色，会删除该角色绑定的所有菜单，但是绑定该角色的用户不会删除
// 没有角色的用户不会展示任何菜单
message DelRoleReq {
   uint64 roleId = 1;
}

message DelRoleResp {}

message SearchRoleReq {
  string roleName = 1;
  string roleCode = 2;
  uint32 status = 4;
  string updateBy = 5;
  string startTime = 6;
  string endTime = 7;
  openim.sdkws.RequestPagination pagination = 8;
}

message SearchRoleResp {
  repeated RoleInfoResp roleInfo = 1;
  uint64 total = 2;
  uint64 pages = 3;
}

message DisableRoleReq {
  uint64 roleId = 1;
  uint32 status = 2;
}

message DisableRoleResp {

}

message UpdateRoleMenuReq {
  uint64 roleId = 1;
  repeated uint64 menuIds = 2;
}

message UpdateRoleMenuResp {

}

message RoleMenuInfoReq {
  uint64 roleId = 1;
}

message RoleMenuInfoResp {
  uint64 roleId = 1;
  repeated uint64 menuIds = 2;
}

message AddRoleMenuReq {
  uint64 roleId = 1;
  repeated uint64 menuIds = 2;
}

message AddRoleMenuResp {

}

// 删除该角色绑定的所有菜单
message DelRoleMenuReq {
  uint64 roleId = 1;
}

message DelRoleMenuResp {}

message SearchAllMenuReq{}
message SearchAllMenuResp{
  repeated MenuInfoResp menuInfo = 1;
}

message UpdateDictReq {
  string dictName = 1;
  uint32 dictType = 2; //1:系统类，2:业务类
  uint32 status = 3; //1:正常， 2:禁用
  string desc = 4;
  uint64 dictId = 5;
  string dictCode = 6;
}

message UpdateDictResp{}

message DictInfoReq {
  uint64 dictId = 1;
}

message DictInfoResp {
  string dictName = 1;
  uint32 dictType = 2; //1:系统类，2:业务类
  uint32 status = 3; //1:正常， 2:禁用
  string desc = 4;
  uint64 dictId = 5;
  string dictCode = 6;
  string updateBy = 7;
  int64 updateTime = 8;
}

message AddDictReq {
  string dictName = 1;
  uint32 dictType = 2; //1:系统类，2:业务类
  uint32 status = 3; //1:正常， 2:禁用
  string desc = 4;
  string dictCode = 6;
}

message AddDictResp {}

message DelDictReq {
  uint64 dictId = 1;
}

message DelDictResp {}

message SearchDictReq {
  string dictName = 1;
  string dictCode = 2;
  uint32 status = 4;
  string updateBy = 5;
  string startTime = 6;
  string endTime = 7;
  openim.sdkws.RequestPagination pagination = 8;
}

message SearchDictResp {
  repeated DictInfoResp dictInfo = 1;
  uint64 total = 2;
  uint64 pages = 3;
}

message DisableDictReq {
  uint64 dictId = 1;
  uint32 status = 2;
}

message DisableDictResp{}

message UpdateDictDetailReq {
  string dictName = 1;
  string dictCode = 2;
  uint32 status = 4;
  string dictValue = 5;
  string desc = 6;
  uint64 sort = 7;
  uint64 dictDetailId = 8;
}

message UpdateDictDetailResp {}

message DictDetailInfoReq {
  uint64 dictDetailId = 1;
}

message DictDetailInfoResp {
  string dictName = 1;
  string dictCode = 2;
  uint32 status = 4;
  string dictValue = 5;
  string desc = 6;
  uint64 sort = 7;
  uint64 dictDetailId = 8;
}

message AddDictDetailReq {
  string dictName = 1;
  string dictCode = 2;
  uint32 status = 4;
  string dictValue = 5;
  string desc = 6;
  uint64 sort = 7;
  uint64 dictId = 8;
}

message AddDictDetailResp {}

message DelDictDetailReq {
  uint64 dictDetailId = 1;
}

message DelDictDetailResp {}

message DisableDictDetailReq{
  uint64 dictDetailId = 1;
  uint32 status = 2;
}

message DisableDictDetailResp {}

message SearchByDictIdReq {
  uint64 dictId = 1;
}

message SearchByDictIdResp {
  repeated DictDetailInfoResp dictDetailInfos = 1;
}

message CheckAuthorizeReq {
  string userId = 1;
  string url = 2;
}

message CheckAuthorizeResp {
  bool pass = 1;
}

message CheckIpReq {
  string ip = 1;
}

message CheckIpResp {
  bool pass = 1;
}
message UpdateIpReq {
  uint64 id = 1;
  string ip = 2;
  string desc = 3;
}

message UpdateIpResp {
}

message IpInfoReq {
  uint64 id = 1;
}

message IpInfoResp {
  uint64 id = 1;
  string ip = 2;
  string desc = 3;
  string updateBy = 4;
  int64 updateTime = 5;
}
message AddIpReq {
  string ip = 1;
  string desc = 2;
}
message AddIpResp {

}
message DelIpReq {
  uint64 id = 1;
}
message DelIpResp {
  string id = 1;
}
message SearchIpReq {
  string ip = 1;
  string updateBy = 5;
  string startTime = 6;
  string endTime = 7;
  openim.sdkws.RequestPagination pagination = 8;
}
message SearchIpResp {
  repeated IpInfoResp ipInfoList = 1;
  uint64 total = 2;
  uint64 pages = 3;
}

message LogInfoReq {
  uint64 id = 1;
}

message LogInfoResp {
  uint64 id = 1;
  string opUser = 2;
  string opModule = 3;
  string opTitle = 4;
  string opIp = 5;
  string opTime = 6;
  string reqPath = 7;
  string reqMethod = 8;
  string reqParams = 9;
  string browserInfo =10;
  string returnCode = 11;
  string returnMsg =12;
  string createBy = 13;
  string createTime = 14;
}
message AddLogReq {
  string opModule = 1;
  string opTitle = 2;
  string opIp = 3;
  string reqPath = 4;
  string reqMethod = 5;
  string reqParams = 6;
  string browserInfo =7;
  string returnCode = 8;
  string returnMsg =9;
}
message AddLogResp {
}
message DelLogReq {
  uint64 id = 1;
}
message DelLogResp {
  string id = 1;
}
message SearchLogReq {
  string opUser = 1;
  string opTitle = 2;
  string returnCode = 3;
  string startTime = 4;
  string endTime = 5;
  openim.sdkws.RequestPagination pagination = 6;
}
message SearchLogResp {
  repeated LogInfoResp logInfoList = 1;
  uint64 total = 2;
  uint64 pages = 3;
}
service admin {
  // Login
  rpc Login(LoginReq) returns (LoginResp);
  rpc Logout(LogoutReq) returns (LogoutResp);
  rpc ChangePassword(ChangePasswordReq) returns (ChangePasswordResp);
  rpc AdminUpdateInfo(AdminUpdateInfoReq) returns (AdminUpdateInfoResp);
  // Get administrator information
  rpc GetAdminInfo(GetAdminInfoReq) returns (GetAdminInfoResp);
  rpc AddAdminAccount(AddAdminAccountReq) returns (AddAdminAccountResp);
  rpc ChangeAdminPassword(ChangeAdminPasswordReq) returns (ChangeAdminPasswordResp);
//  rpc DelAdminAccount(DelAdminAccountReq) returns (DelAdminAccountResp);
  rpc SearchAdminAccount(SearchAdminAccountReq) returns (SearchAdminAccountResp);
  rpc DisableAdminAccount(DisableAdminAccountReq) returns (DisableAdminAccountResp);

  // create token
  rpc CreateToken(CreateTokenReq) returns (CreateTokenResp);
  // parse token
  rpc ParseToken(ParseTokenReq) returns (ParseTokenResp);
  // get user token
  rpc GetUserToken(GetUserTokenReq) returns (GetUserTokenResp);
  // invalidate token
  rpc InvalidateToken(InvalidateTokenReq) returns (InvalidateTokenResp);

  // menu
  rpc UpdateMenuInfo(UpdateMenuReq) returns (UpdateMenuResp);
  rpc MenuInfo(MenuInfoReq) returns (MenuInfoResp);
  rpc AddMenu(AddMenuReq) returns (AddMenuResp);
  rpc DelMenu(DelMenuReq) returns (DelMenuResp);
  rpc SearchMenu(SearchMenuReq) returns (SearchMenuResp);
  rpc DisableMenu(DisableMenuReq) returns (DisableMenuResp);
  rpc SearchMenuTree(SearchMenuTreeReq) returns (SearchMenuTreeResp);
  rpc SearchAllMenu(SearchAllMenuReq) returns (SearchAllMenuResp);

  // role
  rpc UpdateRoleInfo(UpdateRoleReq) returns (UpdateRoleResp);
  rpc RoleInfo(RoleInfoReq) returns (RoleInfoResp);
  rpc AddRole(AddRoleReq) returns (AddRoleResp);
  rpc DelRole(DelRoleReq) returns (DelRoleResp);
  rpc SearchRole(SearchRoleReq) returns (SearchRoleResp);
  rpc SearchAllRole(SearchAllRoleReq) returns (SearchAllRoleResp);
  rpc DisableRole(DisableRoleReq) returns (DisableRoleResp);

  // role_menu
  rpc UpdateRoleMenuInfo(UpdateRoleMenuReq) returns (UpdateRoleMenuResp);
  rpc RoleMenuInfo(RoleMenuInfoReq) returns (RoleMenuInfoResp);
  rpc AddRoleMenu(AddRoleMenuReq) returns (AddRoleMenuResp);
  rpc DelRoleMenu(DelRoleMenuReq) returns (DelRoleMenuResp);

  // dict
  rpc UpdateDictInfo(UpdateDictReq) returns (UpdateDictResp);
  rpc DictInfo(DictInfoReq) returns (DictInfoResp);
  rpc AddDict(AddDictReq) returns (AddDictResp);
  rpc DelDict(DelDictReq) returns (DelDictResp);
  rpc SearchDict(SearchDictReq) returns (SearchDictResp);
  rpc DisableDict(DisableDictReq) returns (DisableDictResp);

  // dict_detail
  rpc UpdateDictDetailInfo(UpdateDictDetailReq) returns (UpdateDictDetailResp);
  rpc DictDetailInfo(DictDetailInfoReq) returns (DictDetailInfoResp);
  rpc AddDictDetail(AddDictDetailReq) returns (AddDictDetailResp);
  rpc DelDictDetail(DelDictDetailReq) returns (DelDictDetailResp);
  rpc SearchByDictId(SearchByDictIdReq) returns (SearchByDictIdResp);
  rpc DisableDictDetail(DisableDictDetailReq) returns (DisableDictDetailResp);

  // admin接口鉴权
  rpc CheckAuthorize(CheckAuthorizeReq) returns (CheckAuthorizeResp);
  // ip白名单检查
  rpc CheckIp(CheckIpReq) returns (CheckIpResp);

  // ip
  rpc UpdateIpInfo(UpdateIpReq) returns (UpdateIpResp);
  rpc IpInfo(IpInfoReq) returns (IpInfoResp);
  rpc AddIp(AddIpReq) returns (AddIpResp);
  rpc DelIp(DelIpReq) returns (DelIpResp);
  rpc SearchIp(SearchIpReq) returns (SearchIpResp);

  //log
  rpc LogInfo(LogInfoReq) returns (LogInfoResp);
  rpc AddLog(AddLogReq) returns (AddLogResp);
  rpc DelLog(DelLogReq) returns (DelLogResp);
  rpc SearchLog(SearchLogReq) returns (SearchLogResp);
}