// Copyright Â© 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: openchat/admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_Login_FullMethodName                = "/openim.openchat.admin.admin/Login"
	Admin_Logout_FullMethodName               = "/openim.openchat.admin.admin/Logout"
	Admin_ChangePassword_FullMethodName       = "/openim.openchat.admin.admin/ChangePassword"
	Admin_AdminUpdateInfo_FullMethodName      = "/openim.openchat.admin.admin/AdminUpdateInfo"
	Admin_GetAdminInfo_FullMethodName         = "/openim.openchat.admin.admin/GetAdminInfo"
	Admin_AddAdminAccount_FullMethodName      = "/openim.openchat.admin.admin/AddAdminAccount"
	Admin_ChangeAdminPassword_FullMethodName  = "/openim.openchat.admin.admin/ChangeAdminPassword"
	Admin_SearchAdminAccount_FullMethodName   = "/openim.openchat.admin.admin/SearchAdminAccount"
	Admin_DisableAdminAccount_FullMethodName  = "/openim.openchat.admin.admin/DisableAdminAccount"
	Admin_CreateToken_FullMethodName          = "/openim.openchat.admin.admin/CreateToken"
	Admin_ParseToken_FullMethodName           = "/openim.openchat.admin.admin/ParseToken"
	Admin_GetUserToken_FullMethodName         = "/openim.openchat.admin.admin/GetUserToken"
	Admin_InvalidateToken_FullMethodName      = "/openim.openchat.admin.admin/InvalidateToken"
	Admin_UpdateMenuInfo_FullMethodName       = "/openim.openchat.admin.admin/UpdateMenuInfo"
	Admin_MenuInfo_FullMethodName             = "/openim.openchat.admin.admin/MenuInfo"
	Admin_AddMenu_FullMethodName              = "/openim.openchat.admin.admin/AddMenu"
	Admin_DelMenu_FullMethodName              = "/openim.openchat.admin.admin/DelMenu"
	Admin_SearchMenu_FullMethodName           = "/openim.openchat.admin.admin/SearchMenu"
	Admin_DisableMenu_FullMethodName          = "/openim.openchat.admin.admin/DisableMenu"
	Admin_SearchMenuTree_FullMethodName       = "/openim.openchat.admin.admin/SearchMenuTree"
	Admin_SearchAllMenu_FullMethodName        = "/openim.openchat.admin.admin/SearchAllMenu"
	Admin_UpdateRoleInfo_FullMethodName       = "/openim.openchat.admin.admin/UpdateRoleInfo"
	Admin_RoleInfo_FullMethodName             = "/openim.openchat.admin.admin/RoleInfo"
	Admin_AddRole_FullMethodName              = "/openim.openchat.admin.admin/AddRole"
	Admin_DelRole_FullMethodName              = "/openim.openchat.admin.admin/DelRole"
	Admin_SearchRole_FullMethodName           = "/openim.openchat.admin.admin/SearchRole"
	Admin_SearchAllRole_FullMethodName        = "/openim.openchat.admin.admin/SearchAllRole"
	Admin_DisableRole_FullMethodName          = "/openim.openchat.admin.admin/DisableRole"
	Admin_UpdateRoleMenuInfo_FullMethodName   = "/openim.openchat.admin.admin/UpdateRoleMenuInfo"
	Admin_RoleMenuInfo_FullMethodName         = "/openim.openchat.admin.admin/RoleMenuInfo"
	Admin_AddRoleMenu_FullMethodName          = "/openim.openchat.admin.admin/AddRoleMenu"
	Admin_DelRoleMenu_FullMethodName          = "/openim.openchat.admin.admin/DelRoleMenu"
	Admin_UpdateDictInfo_FullMethodName       = "/openim.openchat.admin.admin/UpdateDictInfo"
	Admin_DictInfo_FullMethodName             = "/openim.openchat.admin.admin/DictInfo"
	Admin_AddDict_FullMethodName              = "/openim.openchat.admin.admin/AddDict"
	Admin_DelDict_FullMethodName              = "/openim.openchat.admin.admin/DelDict"
	Admin_SearchDict_FullMethodName           = "/openim.openchat.admin.admin/SearchDict"
	Admin_DisableDict_FullMethodName          = "/openim.openchat.admin.admin/DisableDict"
	Admin_UpdateDictDetailInfo_FullMethodName = "/openim.openchat.admin.admin/UpdateDictDetailInfo"
	Admin_DictDetailInfo_FullMethodName       = "/openim.openchat.admin.admin/DictDetailInfo"
	Admin_AddDictDetail_FullMethodName        = "/openim.openchat.admin.admin/AddDictDetail"
	Admin_DelDictDetail_FullMethodName        = "/openim.openchat.admin.admin/DelDictDetail"
	Admin_SearchByDictId_FullMethodName       = "/openim.openchat.admin.admin/SearchByDictId"
	Admin_DisableDictDetail_FullMethodName    = "/openim.openchat.admin.admin/DisableDictDetail"
	Admin_CheckAuthorize_FullMethodName       = "/openim.openchat.admin.admin/CheckAuthorize"
	Admin_UpdateIpInfo_FullMethodName         = "/openim.openchat.admin.admin/UpdateIpInfo"
	Admin_IpInfo_FullMethodName               = "/openim.openchat.admin.admin/IpInfo"
	Admin_AddIp_FullMethodName                = "/openim.openchat.admin.admin/AddIp"
	Admin_DelIp_FullMethodName                = "/openim.openchat.admin.admin/DelIp"
	Admin_SearchIp_FullMethodName             = "/openim.openchat.admin.admin/SearchIp"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// Login
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	AdminUpdateInfo(ctx context.Context, in *AdminUpdateInfoReq, opts ...grpc.CallOption) (*AdminUpdateInfoResp, error)
	// Get administrator information
	GetAdminInfo(ctx context.Context, in *GetAdminInfoReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error)
	AddAdminAccount(ctx context.Context, in *AddAdminAccountReq, opts ...grpc.CallOption) (*AddAdminAccountResp, error)
	ChangeAdminPassword(ctx context.Context, in *ChangeAdminPasswordReq, opts ...grpc.CallOption) (*ChangeAdminPasswordResp, error)
	// rpc DelAdminAccount(DelAdminAccountReq) returns (DelAdminAccountResp);
	SearchAdminAccount(ctx context.Context, in *SearchAdminAccountReq, opts ...grpc.CallOption) (*SearchAdminAccountResp, error)
	DisableAdminAccount(ctx context.Context, in *DisableAdminAccountReq, opts ...grpc.CallOption) (*DisableAdminAccountResp, error)
	// create token
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error)
	// parse token
	ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error)
	// get user token
	GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error)
	// invalidate token
	InvalidateToken(ctx context.Context, in *InvalidateTokenReq, opts ...grpc.CallOption) (*InvalidateTokenResp, error)
	// menu
	UpdateMenuInfo(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error)
	MenuInfo(ctx context.Context, in *MenuInfoReq, opts ...grpc.CallOption) (*MenuInfoResp, error)
	AddMenu(ctx context.Context, in *AddMenuReq, opts ...grpc.CallOption) (*AddMenuResp, error)
	DelMenu(ctx context.Context, in *DelMenuReq, opts ...grpc.CallOption) (*DelMenuResp, error)
	SearchMenu(ctx context.Context, in *SearchMenuReq, opts ...grpc.CallOption) (*SearchMenuResp, error)
	DisableMenu(ctx context.Context, in *DisableMenuReq, opts ...grpc.CallOption) (*DisableMenuResp, error)
	SearchMenuTree(ctx context.Context, in *SearchMenuTreeReq, opts ...grpc.CallOption) (*SearchMenuTreeResp, error)
	SearchAllMenu(ctx context.Context, in *SearchAllMenuReq, opts ...grpc.CallOption) (*SearchAllMenuResp, error)
	// role
	UpdateRoleInfo(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
	RoleInfo(ctx context.Context, in *RoleInfoReq, opts ...grpc.CallOption) (*RoleInfoResp, error)
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error)
	DelRole(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*DelRoleResp, error)
	SearchRole(ctx context.Context, in *SearchRoleReq, opts ...grpc.CallOption) (*SearchRoleResp, error)
	SearchAllRole(ctx context.Context, in *SearchAllRoleReq, opts ...grpc.CallOption) (*SearchAllRoleResp, error)
	DisableRole(ctx context.Context, in *DisableRoleReq, opts ...grpc.CallOption) (*DisableRoleResp, error)
	// role_menu
	UpdateRoleMenuInfo(ctx context.Context, in *UpdateRoleMenuReq, opts ...grpc.CallOption) (*UpdateRoleMenuResp, error)
	RoleMenuInfo(ctx context.Context, in *RoleMenuInfoReq, opts ...grpc.CallOption) (*RoleMenuInfoResp, error)
	AddRoleMenu(ctx context.Context, in *AddRoleMenuReq, opts ...grpc.CallOption) (*AddRoleMenuResp, error)
	DelRoleMenu(ctx context.Context, in *DelRoleMenuReq, opts ...grpc.CallOption) (*DelRoleMenuResp, error)
	// dict
	UpdateDictInfo(ctx context.Context, in *UpdateDictReq, opts ...grpc.CallOption) (*UpdateDictResp, error)
	DictInfo(ctx context.Context, in *DictInfoReq, opts ...grpc.CallOption) (*DictInfoResp, error)
	AddDict(ctx context.Context, in *AddDictReq, opts ...grpc.CallOption) (*AddDictResp, error)
	DelDict(ctx context.Context, in *DelDictReq, opts ...grpc.CallOption) (*DelDictResp, error)
	SearchDict(ctx context.Context, in *SearchDictReq, opts ...grpc.CallOption) (*SearchDictResp, error)
	DisableDict(ctx context.Context, in *DisableDictReq, opts ...grpc.CallOption) (*DisableDictResp, error)
	// dict_detail
	UpdateDictDetailInfo(ctx context.Context, in *UpdateDictDetailReq, opts ...grpc.CallOption) (*UpdateDictDetailResp, error)
	DictDetailInfo(ctx context.Context, in *DictDetailInfoReq, opts ...grpc.CallOption) (*DictDetailInfoResp, error)
	AddDictDetail(ctx context.Context, in *AddDictDetailReq, opts ...grpc.CallOption) (*AddDictDetailResp, error)
	DelDictDetail(ctx context.Context, in *DelDictDetailReq, opts ...grpc.CallOption) (*DelDictDetailResp, error)
	SearchByDictId(ctx context.Context, in *SearchByDictIdReq, opts ...grpc.CallOption) (*SearchByDictIdResp, error)
	DisableDictDetail(ctx context.Context, in *DisableDictDetailReq, opts ...grpc.CallOption) (*DisableDictDetailResp, error)
	// adminæ¥å£é´æ
	CheckAuthorize(ctx context.Context, in *CheckAuthorizeReq, opts ...grpc.CallOption) (*CheckAuthorizeResp, error)
	// ip
	UpdateIpInfo(ctx context.Context, in *UpdateIpReq, opts ...grpc.CallOption) (*UpdateIpResp, error)
	IpInfo(ctx context.Context, in *IpInfoReq, opts ...grpc.CallOption) (*IpInfoResp, error)
	AddIp(ctx context.Context, in *AddIpReq, opts ...grpc.CallOption) (*AddIpResp, error)
	DelIp(ctx context.Context, in *DelIpReq, opts ...grpc.CallOption) (*DelIpResp, error)
	SearchIp(ctx context.Context, in *SearchIpReq, opts ...grpc.CallOption) (*SearchIpResp, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Admin_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, Admin_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, Admin_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AdminUpdateInfo(ctx context.Context, in *AdminUpdateInfoReq, opts ...grpc.CallOption) (*AdminUpdateInfoResp, error) {
	out := new(AdminUpdateInfoResp)
	err := c.cc.Invoke(ctx, Admin_AdminUpdateInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminInfo(ctx context.Context, in *GetAdminInfoReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error) {
	out := new(GetAdminInfoResp)
	err := c.cc.Invoke(ctx, Admin_GetAdminInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddAdminAccount(ctx context.Context, in *AddAdminAccountReq, opts ...grpc.CallOption) (*AddAdminAccountResp, error) {
	out := new(AddAdminAccountResp)
	err := c.cc.Invoke(ctx, Admin_AddAdminAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangeAdminPassword(ctx context.Context, in *ChangeAdminPasswordReq, opts ...grpc.CallOption) (*ChangeAdminPasswordResp, error) {
	out := new(ChangeAdminPasswordResp)
	err := c.cc.Invoke(ctx, Admin_ChangeAdminPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchAdminAccount(ctx context.Context, in *SearchAdminAccountReq, opts ...grpc.CallOption) (*SearchAdminAccountResp, error) {
	out := new(SearchAdminAccountResp)
	err := c.cc.Invoke(ctx, Admin_SearchAdminAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DisableAdminAccount(ctx context.Context, in *DisableAdminAccountReq, opts ...grpc.CallOption) (*DisableAdminAccountResp, error) {
	out := new(DisableAdminAccountResp)
	err := c.cc.Invoke(ctx, Admin_DisableAdminAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error) {
	out := new(CreateTokenResp)
	err := c.cc.Invoke(ctx, Admin_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error) {
	out := new(ParseTokenResp)
	err := c.cc.Invoke(ctx, Admin_ParseToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error) {
	out := new(GetUserTokenResp)
	err := c.cc.Invoke(ctx, Admin_GetUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InvalidateToken(ctx context.Context, in *InvalidateTokenReq, opts ...grpc.CallOption) (*InvalidateTokenResp, error) {
	out := new(InvalidateTokenResp)
	err := c.cc.Invoke(ctx, Admin_InvalidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMenuInfo(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error) {
	out := new(UpdateMenuResp)
	err := c.cc.Invoke(ctx, Admin_UpdateMenuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MenuInfo(ctx context.Context, in *MenuInfoReq, opts ...grpc.CallOption) (*MenuInfoResp, error) {
	out := new(MenuInfoResp)
	err := c.cc.Invoke(ctx, Admin_MenuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddMenu(ctx context.Context, in *AddMenuReq, opts ...grpc.CallOption) (*AddMenuResp, error) {
	out := new(AddMenuResp)
	err := c.cc.Invoke(ctx, Admin_AddMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelMenu(ctx context.Context, in *DelMenuReq, opts ...grpc.CallOption) (*DelMenuResp, error) {
	out := new(DelMenuResp)
	err := c.cc.Invoke(ctx, Admin_DelMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchMenu(ctx context.Context, in *SearchMenuReq, opts ...grpc.CallOption) (*SearchMenuResp, error) {
	out := new(SearchMenuResp)
	err := c.cc.Invoke(ctx, Admin_SearchMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DisableMenu(ctx context.Context, in *DisableMenuReq, opts ...grpc.CallOption) (*DisableMenuResp, error) {
	out := new(DisableMenuResp)
	err := c.cc.Invoke(ctx, Admin_DisableMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchMenuTree(ctx context.Context, in *SearchMenuTreeReq, opts ...grpc.CallOption) (*SearchMenuTreeResp, error) {
	out := new(SearchMenuTreeResp)
	err := c.cc.Invoke(ctx, Admin_SearchMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchAllMenu(ctx context.Context, in *SearchAllMenuReq, opts ...grpc.CallOption) (*SearchAllMenuResp, error) {
	out := new(SearchAllMenuResp)
	err := c.cc.Invoke(ctx, Admin_SearchAllMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateRoleInfo(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	out := new(UpdateRoleResp)
	err := c.cc.Invoke(ctx, Admin_UpdateRoleInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RoleInfo(ctx context.Context, in *RoleInfoReq, opts ...grpc.CallOption) (*RoleInfoResp, error) {
	out := new(RoleInfoResp)
	err := c.cc.Invoke(ctx, Admin_RoleInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error) {
	out := new(AddRoleResp)
	err := c.cc.Invoke(ctx, Admin_AddRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelRole(ctx context.Context, in *DelRoleReq, opts ...grpc.CallOption) (*DelRoleResp, error) {
	out := new(DelRoleResp)
	err := c.cc.Invoke(ctx, Admin_DelRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchRole(ctx context.Context, in *SearchRoleReq, opts ...grpc.CallOption) (*SearchRoleResp, error) {
	out := new(SearchRoleResp)
	err := c.cc.Invoke(ctx, Admin_SearchRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchAllRole(ctx context.Context, in *SearchAllRoleReq, opts ...grpc.CallOption) (*SearchAllRoleResp, error) {
	out := new(SearchAllRoleResp)
	err := c.cc.Invoke(ctx, Admin_SearchAllRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DisableRole(ctx context.Context, in *DisableRoleReq, opts ...grpc.CallOption) (*DisableRoleResp, error) {
	out := new(DisableRoleResp)
	err := c.cc.Invoke(ctx, Admin_DisableRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateRoleMenuInfo(ctx context.Context, in *UpdateRoleMenuReq, opts ...grpc.CallOption) (*UpdateRoleMenuResp, error) {
	out := new(UpdateRoleMenuResp)
	err := c.cc.Invoke(ctx, Admin_UpdateRoleMenuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RoleMenuInfo(ctx context.Context, in *RoleMenuInfoReq, opts ...grpc.CallOption) (*RoleMenuInfoResp, error) {
	out := new(RoleMenuInfoResp)
	err := c.cc.Invoke(ctx, Admin_RoleMenuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddRoleMenu(ctx context.Context, in *AddRoleMenuReq, opts ...grpc.CallOption) (*AddRoleMenuResp, error) {
	out := new(AddRoleMenuResp)
	err := c.cc.Invoke(ctx, Admin_AddRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelRoleMenu(ctx context.Context, in *DelRoleMenuReq, opts ...grpc.CallOption) (*DelRoleMenuResp, error) {
	out := new(DelRoleMenuResp)
	err := c.cc.Invoke(ctx, Admin_DelRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDictInfo(ctx context.Context, in *UpdateDictReq, opts ...grpc.CallOption) (*UpdateDictResp, error) {
	out := new(UpdateDictResp)
	err := c.cc.Invoke(ctx, Admin_UpdateDictInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DictInfo(ctx context.Context, in *DictInfoReq, opts ...grpc.CallOption) (*DictInfoResp, error) {
	out := new(DictInfoResp)
	err := c.cc.Invoke(ctx, Admin_DictInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddDict(ctx context.Context, in *AddDictReq, opts ...grpc.CallOption) (*AddDictResp, error) {
	out := new(AddDictResp)
	err := c.cc.Invoke(ctx, Admin_AddDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelDict(ctx context.Context, in *DelDictReq, opts ...grpc.CallOption) (*DelDictResp, error) {
	out := new(DelDictResp)
	err := c.cc.Invoke(ctx, Admin_DelDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchDict(ctx context.Context, in *SearchDictReq, opts ...grpc.CallOption) (*SearchDictResp, error) {
	out := new(SearchDictResp)
	err := c.cc.Invoke(ctx, Admin_SearchDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DisableDict(ctx context.Context, in *DisableDictReq, opts ...grpc.CallOption) (*DisableDictResp, error) {
	out := new(DisableDictResp)
	err := c.cc.Invoke(ctx, Admin_DisableDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDictDetailInfo(ctx context.Context, in *UpdateDictDetailReq, opts ...grpc.CallOption) (*UpdateDictDetailResp, error) {
	out := new(UpdateDictDetailResp)
	err := c.cc.Invoke(ctx, Admin_UpdateDictDetailInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DictDetailInfo(ctx context.Context, in *DictDetailInfoReq, opts ...grpc.CallOption) (*DictDetailInfoResp, error) {
	out := new(DictDetailInfoResp)
	err := c.cc.Invoke(ctx, Admin_DictDetailInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddDictDetail(ctx context.Context, in *AddDictDetailReq, opts ...grpc.CallOption) (*AddDictDetailResp, error) {
	out := new(AddDictDetailResp)
	err := c.cc.Invoke(ctx, Admin_AddDictDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelDictDetail(ctx context.Context, in *DelDictDetailReq, opts ...grpc.CallOption) (*DelDictDetailResp, error) {
	out := new(DelDictDetailResp)
	err := c.cc.Invoke(ctx, Admin_DelDictDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchByDictId(ctx context.Context, in *SearchByDictIdReq, opts ...grpc.CallOption) (*SearchByDictIdResp, error) {
	out := new(SearchByDictIdResp)
	err := c.cc.Invoke(ctx, Admin_SearchByDictId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DisableDictDetail(ctx context.Context, in *DisableDictDetailReq, opts ...grpc.CallOption) (*DisableDictDetailResp, error) {
	out := new(DisableDictDetailResp)
	err := c.cc.Invoke(ctx, Admin_DisableDictDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CheckAuthorize(ctx context.Context, in *CheckAuthorizeReq, opts ...grpc.CallOption) (*CheckAuthorizeResp, error) {
	out := new(CheckAuthorizeResp)
	err := c.cc.Invoke(ctx, Admin_CheckAuthorize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateIpInfo(ctx context.Context, in *UpdateIpReq, opts ...grpc.CallOption) (*UpdateIpResp, error) {
	out := new(UpdateIpResp)
	err := c.cc.Invoke(ctx, Admin_UpdateIpInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) IpInfo(ctx context.Context, in *IpInfoReq, opts ...grpc.CallOption) (*IpInfoResp, error) {
	out := new(IpInfoResp)
	err := c.cc.Invoke(ctx, Admin_IpInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddIp(ctx context.Context, in *AddIpReq, opts ...grpc.CallOption) (*AddIpResp, error) {
	out := new(AddIpResp)
	err := c.cc.Invoke(ctx, Admin_AddIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelIp(ctx context.Context, in *DelIpReq, opts ...grpc.CallOption) (*DelIpResp, error) {
	out := new(DelIpResp)
	err := c.cc.Invoke(ctx, Admin_DelIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchIp(ctx context.Context, in *SearchIpReq, opts ...grpc.CallOption) (*SearchIpResp, error) {
	out := new(SearchIpResp)
	err := c.cc.Invoke(ctx, Admin_SearchIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// Login
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	AdminUpdateInfo(context.Context, *AdminUpdateInfoReq) (*AdminUpdateInfoResp, error)
	// Get administrator information
	GetAdminInfo(context.Context, *GetAdminInfoReq) (*GetAdminInfoResp, error)
	AddAdminAccount(context.Context, *AddAdminAccountReq) (*AddAdminAccountResp, error)
	ChangeAdminPassword(context.Context, *ChangeAdminPasswordReq) (*ChangeAdminPasswordResp, error)
	// rpc DelAdminAccount(DelAdminAccountReq) returns (DelAdminAccountResp);
	SearchAdminAccount(context.Context, *SearchAdminAccountReq) (*SearchAdminAccountResp, error)
	DisableAdminAccount(context.Context, *DisableAdminAccountReq) (*DisableAdminAccountResp, error)
	// create token
	CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error)
	// parse token
	ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error)
	// get user token
	GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error)
	// invalidate token
	InvalidateToken(context.Context, *InvalidateTokenReq) (*InvalidateTokenResp, error)
	// menu
	UpdateMenuInfo(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error)
	MenuInfo(context.Context, *MenuInfoReq) (*MenuInfoResp, error)
	AddMenu(context.Context, *AddMenuReq) (*AddMenuResp, error)
	DelMenu(context.Context, *DelMenuReq) (*DelMenuResp, error)
	SearchMenu(context.Context, *SearchMenuReq) (*SearchMenuResp, error)
	DisableMenu(context.Context, *DisableMenuReq) (*DisableMenuResp, error)
	SearchMenuTree(context.Context, *SearchMenuTreeReq) (*SearchMenuTreeResp, error)
	SearchAllMenu(context.Context, *SearchAllMenuReq) (*SearchAllMenuResp, error)
	// role
	UpdateRoleInfo(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	RoleInfo(context.Context, *RoleInfoReq) (*RoleInfoResp, error)
	AddRole(context.Context, *AddRoleReq) (*AddRoleResp, error)
	DelRole(context.Context, *DelRoleReq) (*DelRoleResp, error)
	SearchRole(context.Context, *SearchRoleReq) (*SearchRoleResp, error)
	SearchAllRole(context.Context, *SearchAllRoleReq) (*SearchAllRoleResp, error)
	DisableRole(context.Context, *DisableRoleReq) (*DisableRoleResp, error)
	// role_menu
	UpdateRoleMenuInfo(context.Context, *UpdateRoleMenuReq) (*UpdateRoleMenuResp, error)
	RoleMenuInfo(context.Context, *RoleMenuInfoReq) (*RoleMenuInfoResp, error)
	AddRoleMenu(context.Context, *AddRoleMenuReq) (*AddRoleMenuResp, error)
	DelRoleMenu(context.Context, *DelRoleMenuReq) (*DelRoleMenuResp, error)
	// dict
	UpdateDictInfo(context.Context, *UpdateDictReq) (*UpdateDictResp, error)
	DictInfo(context.Context, *DictInfoReq) (*DictInfoResp, error)
	AddDict(context.Context, *AddDictReq) (*AddDictResp, error)
	DelDict(context.Context, *DelDictReq) (*DelDictResp, error)
	SearchDict(context.Context, *SearchDictReq) (*SearchDictResp, error)
	DisableDict(context.Context, *DisableDictReq) (*DisableDictResp, error)
	// dict_detail
	UpdateDictDetailInfo(context.Context, *UpdateDictDetailReq) (*UpdateDictDetailResp, error)
	DictDetailInfo(context.Context, *DictDetailInfoReq) (*DictDetailInfoResp, error)
	AddDictDetail(context.Context, *AddDictDetailReq) (*AddDictDetailResp, error)
	DelDictDetail(context.Context, *DelDictDetailReq) (*DelDictDetailResp, error)
	SearchByDictId(context.Context, *SearchByDictIdReq) (*SearchByDictIdResp, error)
	DisableDictDetail(context.Context, *DisableDictDetailReq) (*DisableDictDetailResp, error)
	// adminæ¥å£é´æ
	CheckAuthorize(context.Context, *CheckAuthorizeReq) (*CheckAuthorizeResp, error)
	// ip
	UpdateIpInfo(context.Context, *UpdateIpReq) (*UpdateIpResp, error)
	IpInfo(context.Context, *IpInfoReq) (*IpInfoResp, error)
	AddIp(context.Context, *AddIpReq) (*AddIpResp, error)
	DelIp(context.Context, *DelIpReq) (*DelIpResp, error)
	SearchIp(context.Context, *SearchIpReq) (*SearchIpResp, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAdminServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAdminServer) AdminUpdateInfo(context.Context, *AdminUpdateInfoReq) (*AdminUpdateInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateInfo not implemented")
}
func (UnimplementedAdminServer) GetAdminInfo(context.Context, *GetAdminInfoReq) (*GetAdminInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminInfo not implemented")
}
func (UnimplementedAdminServer) AddAdminAccount(context.Context, *AddAdminAccountReq) (*AddAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminAccount not implemented")
}
func (UnimplementedAdminServer) ChangeAdminPassword(context.Context, *ChangeAdminPasswordReq) (*ChangeAdminPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAdminPassword not implemented")
}
func (UnimplementedAdminServer) SearchAdminAccount(context.Context, *SearchAdminAccountReq) (*SearchAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAdminAccount not implemented")
}
func (UnimplementedAdminServer) DisableAdminAccount(context.Context, *DisableAdminAccountReq) (*DisableAdminAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAdminAccount not implemented")
}
func (UnimplementedAdminServer) CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedAdminServer) ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedAdminServer) GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedAdminServer) InvalidateToken(context.Context, *InvalidateTokenReq) (*InvalidateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateToken not implemented")
}
func (UnimplementedAdminServer) UpdateMenuInfo(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuInfo not implemented")
}
func (UnimplementedAdminServer) MenuInfo(context.Context, *MenuInfoReq) (*MenuInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuInfo not implemented")
}
func (UnimplementedAdminServer) AddMenu(context.Context, *AddMenuReq) (*AddMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenu not implemented")
}
func (UnimplementedAdminServer) DelMenu(context.Context, *DelMenuReq) (*DelMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMenu not implemented")
}
func (UnimplementedAdminServer) SearchMenu(context.Context, *SearchMenuReq) (*SearchMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMenu not implemented")
}
func (UnimplementedAdminServer) DisableMenu(context.Context, *DisableMenuReq) (*DisableMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMenu not implemented")
}
func (UnimplementedAdminServer) SearchMenuTree(context.Context, *SearchMenuTreeReq) (*SearchMenuTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMenuTree not implemented")
}
func (UnimplementedAdminServer) SearchAllMenu(context.Context, *SearchAllMenuReq) (*SearchAllMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAllMenu not implemented")
}
func (UnimplementedAdminServer) UpdateRoleInfo(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleInfo not implemented")
}
func (UnimplementedAdminServer) RoleInfo(context.Context, *RoleInfoReq) (*RoleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleInfo not implemented")
}
func (UnimplementedAdminServer) AddRole(context.Context, *AddRoleReq) (*AddRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedAdminServer) DelRole(context.Context, *DelRoleReq) (*DelRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRole not implemented")
}
func (UnimplementedAdminServer) SearchRole(context.Context, *SearchRoleReq) (*SearchRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRole not implemented")
}
func (UnimplementedAdminServer) SearchAllRole(context.Context, *SearchAllRoleReq) (*SearchAllRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAllRole not implemented")
}
func (UnimplementedAdminServer) DisableRole(context.Context, *DisableRoleReq) (*DisableRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRole not implemented")
}
func (UnimplementedAdminServer) UpdateRoleMenuInfo(context.Context, *UpdateRoleMenuReq) (*UpdateRoleMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleMenuInfo not implemented")
}
func (UnimplementedAdminServer) RoleMenuInfo(context.Context, *RoleMenuInfoReq) (*RoleMenuInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleMenuInfo not implemented")
}
func (UnimplementedAdminServer) AddRoleMenu(context.Context, *AddRoleMenuReq) (*AddRoleMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleMenu not implemented")
}
func (UnimplementedAdminServer) DelRoleMenu(context.Context, *DelRoleMenuReq) (*DelRoleMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRoleMenu not implemented")
}
func (UnimplementedAdminServer) UpdateDictInfo(context.Context, *UpdateDictReq) (*UpdateDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictInfo not implemented")
}
func (UnimplementedAdminServer) DictInfo(context.Context, *DictInfoReq) (*DictInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictInfo not implemented")
}
func (UnimplementedAdminServer) AddDict(context.Context, *AddDictReq) (*AddDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDict not implemented")
}
func (UnimplementedAdminServer) DelDict(context.Context, *DelDictReq) (*DelDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDict not implemented")
}
func (UnimplementedAdminServer) SearchDict(context.Context, *SearchDictReq) (*SearchDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDict not implemented")
}
func (UnimplementedAdminServer) DisableDict(context.Context, *DisableDictReq) (*DisableDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDict not implemented")
}
func (UnimplementedAdminServer) UpdateDictDetailInfo(context.Context, *UpdateDictDetailReq) (*UpdateDictDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictDetailInfo not implemented")
}
func (UnimplementedAdminServer) DictDetailInfo(context.Context, *DictDetailInfoReq) (*DictDetailInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDetailInfo not implemented")
}
func (UnimplementedAdminServer) AddDictDetail(context.Context, *AddDictDetailReq) (*AddDictDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDictDetail not implemented")
}
func (UnimplementedAdminServer) DelDictDetail(context.Context, *DelDictDetailReq) (*DelDictDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDictDetail not implemented")
}
func (UnimplementedAdminServer) SearchByDictId(context.Context, *SearchByDictIdReq) (*SearchByDictIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByDictId not implemented")
}
func (UnimplementedAdminServer) DisableDictDetail(context.Context, *DisableDictDetailReq) (*DisableDictDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDictDetail not implemented")
}
func (UnimplementedAdminServer) CheckAuthorize(context.Context, *CheckAuthorizeReq) (*CheckAuthorizeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorize not implemented")
}
func (UnimplementedAdminServer) UpdateIpInfo(context.Context, *UpdateIpReq) (*UpdateIpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIpInfo not implemented")
}
func (UnimplementedAdminServer) IpInfo(context.Context, *IpInfoReq) (*IpInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpInfo not implemented")
}
func (UnimplementedAdminServer) AddIp(context.Context, *AddIpReq) (*AddIpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIp not implemented")
}
func (UnimplementedAdminServer) DelIp(context.Context, *DelIpReq) (*DelIpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIp not implemented")
}
func (UnimplementedAdminServer) SearchIp(context.Context, *SearchIpReq) (*SearchIpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIp not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AdminUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AdminUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AdminUpdateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AdminUpdateInfo(ctx, req.(*AdminUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdminInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminInfo(ctx, req.(*GetAdminInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddAdminAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddAdminAccount(ctx, req.(*AddAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangeAdminPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAdminPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangeAdminPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ChangeAdminPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangeAdminPassword(ctx, req.(*ChangeAdminPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchAdminAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchAdminAccount(ctx, req.(*SearchAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DisableAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAdminAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DisableAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DisableAdminAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DisableAdminAccount(ctx, req.(*DisableAdminAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ParseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ParseToken(ctx, req.(*ParseTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserToken(ctx, req.(*GetUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InvalidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InvalidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_InvalidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InvalidateToken(ctx, req.(*InvalidateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMenuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMenuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateMenuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMenuInfo(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MenuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MenuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_MenuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MenuInfo(ctx, req.(*MenuInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddMenu(ctx, req.(*AddMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelMenu(ctx, req.(*DelMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchMenu(ctx, req.(*SearchMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DisableMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DisableMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DisableMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DisableMenu(ctx, req.(*DisableMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchMenuTree(ctx, req.(*SearchMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchAllMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchAllMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchAllMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchAllMenu(ctx, req.(*SearchAllMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateRoleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateRoleInfo(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_RoleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RoleInfo(ctx, req.(*RoleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelRole(ctx, req.(*DelRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchRole(ctx, req.(*SearchRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchAllRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchAllRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchAllRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchAllRole(ctx, req.(*SearchAllRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DisableRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DisableRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DisableRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DisableRole(ctx, req.(*DisableRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateRoleMenuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateRoleMenuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateRoleMenuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateRoleMenuInfo(ctx, req.(*UpdateRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RoleMenuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RoleMenuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_RoleMenuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RoleMenuInfo(ctx, req.(*RoleMenuInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddRoleMenu(ctx, req.(*AddRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelRoleMenu(ctx, req.(*DelRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDictInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDictInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateDictInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDictInfo(ctx, req.(*UpdateDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DictInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DictInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DictInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DictInfo(ctx, req.(*DictInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddDict(ctx, req.(*AddDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelDict(ctx, req.(*DelDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchDict(ctx, req.(*SearchDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DisableDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DisableDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DisableDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DisableDict(ctx, req.(*DisableDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDictDetailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDictDetailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateDictDetailInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDictDetailInfo(ctx, req.(*UpdateDictDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DictDetailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDetailInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DictDetailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DictDetailInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DictDetailInfo(ctx, req.(*DictDetailInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddDictDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDictDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddDictDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddDictDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddDictDetail(ctx, req.(*AddDictDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelDictDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDictDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelDictDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelDictDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelDictDetail(ctx, req.(*DelDictDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchByDictId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByDictIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchByDictId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchByDictId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchByDictId(ctx, req.(*SearchByDictIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DisableDictDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableDictDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DisableDictDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DisableDictDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DisableDictDetail(ctx, req.(*DisableDictDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CheckAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthorizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CheckAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CheckAuthorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CheckAuthorize(ctx, req.(*CheckAuthorizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateIpInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateIpInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateIpInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateIpInfo(ctx, req.(*UpdateIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_IpInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).IpInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_IpInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).IpInfo(ctx, req.(*IpInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddIp(ctx, req.(*AddIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelIp(ctx, req.(*DelIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchIp(ctx, req.(*SearchIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openim.openchat.admin.admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Admin_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Admin_Logout_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Admin_ChangePassword_Handler,
		},
		{
			MethodName: "AdminUpdateInfo",
			Handler:    _Admin_AdminUpdateInfo_Handler,
		},
		{
			MethodName: "GetAdminInfo",
			Handler:    _Admin_GetAdminInfo_Handler,
		},
		{
			MethodName: "AddAdminAccount",
			Handler:    _Admin_AddAdminAccount_Handler,
		},
		{
			MethodName: "ChangeAdminPassword",
			Handler:    _Admin_ChangeAdminPassword_Handler,
		},
		{
			MethodName: "SearchAdminAccount",
			Handler:    _Admin_SearchAdminAccount_Handler,
		},
		{
			MethodName: "DisableAdminAccount",
			Handler:    _Admin_DisableAdminAccount_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Admin_CreateToken_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _Admin_ParseToken_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _Admin_GetUserToken_Handler,
		},
		{
			MethodName: "InvalidateToken",
			Handler:    _Admin_InvalidateToken_Handler,
		},
		{
			MethodName: "UpdateMenuInfo",
			Handler:    _Admin_UpdateMenuInfo_Handler,
		},
		{
			MethodName: "MenuInfo",
			Handler:    _Admin_MenuInfo_Handler,
		},
		{
			MethodName: "AddMenu",
			Handler:    _Admin_AddMenu_Handler,
		},
		{
			MethodName: "DelMenu",
			Handler:    _Admin_DelMenu_Handler,
		},
		{
			MethodName: "SearchMenu",
			Handler:    _Admin_SearchMenu_Handler,
		},
		{
			MethodName: "DisableMenu",
			Handler:    _Admin_DisableMenu_Handler,
		},
		{
			MethodName: "SearchMenuTree",
			Handler:    _Admin_SearchMenuTree_Handler,
		},
		{
			MethodName: "SearchAllMenu",
			Handler:    _Admin_SearchAllMenu_Handler,
		},
		{
			MethodName: "UpdateRoleInfo",
			Handler:    _Admin_UpdateRoleInfo_Handler,
		},
		{
			MethodName: "RoleInfo",
			Handler:    _Admin_RoleInfo_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _Admin_AddRole_Handler,
		},
		{
			MethodName: "DelRole",
			Handler:    _Admin_DelRole_Handler,
		},
		{
			MethodName: "SearchRole",
			Handler:    _Admin_SearchRole_Handler,
		},
		{
			MethodName: "SearchAllRole",
			Handler:    _Admin_SearchAllRole_Handler,
		},
		{
			MethodName: "DisableRole",
			Handler:    _Admin_DisableRole_Handler,
		},
		{
			MethodName: "UpdateRoleMenuInfo",
			Handler:    _Admin_UpdateRoleMenuInfo_Handler,
		},
		{
			MethodName: "RoleMenuInfo",
			Handler:    _Admin_RoleMenuInfo_Handler,
		},
		{
			MethodName: "AddRoleMenu",
			Handler:    _Admin_AddRoleMenu_Handler,
		},
		{
			MethodName: "DelRoleMenu",
			Handler:    _Admin_DelRoleMenu_Handler,
		},
		{
			MethodName: "UpdateDictInfo",
			Handler:    _Admin_UpdateDictInfo_Handler,
		},
		{
			MethodName: "DictInfo",
			Handler:    _Admin_DictInfo_Handler,
		},
		{
			MethodName: "AddDict",
			Handler:    _Admin_AddDict_Handler,
		},
		{
			MethodName: "DelDict",
			Handler:    _Admin_DelDict_Handler,
		},
		{
			MethodName: "SearchDict",
			Handler:    _Admin_SearchDict_Handler,
		},
		{
			MethodName: "DisableDict",
			Handler:    _Admin_DisableDict_Handler,
		},
		{
			MethodName: "UpdateDictDetailInfo",
			Handler:    _Admin_UpdateDictDetailInfo_Handler,
		},
		{
			MethodName: "DictDetailInfo",
			Handler:    _Admin_DictDetailInfo_Handler,
		},
		{
			MethodName: "AddDictDetail",
			Handler:    _Admin_AddDictDetail_Handler,
		},
		{
			MethodName: "DelDictDetail",
			Handler:    _Admin_DelDictDetail_Handler,
		},
		{
			MethodName: "SearchByDictId",
			Handler:    _Admin_SearchByDictId_Handler,
		},
		{
			MethodName: "DisableDictDetail",
			Handler:    _Admin_DisableDictDetail_Handler,
		},
		{
			MethodName: "CheckAuthorize",
			Handler:    _Admin_CheckAuthorize_Handler,
		},
		{
			MethodName: "UpdateIpInfo",
			Handler:    _Admin_UpdateIpInfo_Handler,
		},
		{
			MethodName: "IpInfo",
			Handler:    _Admin_IpInfo_Handler,
		},
		{
			MethodName: "AddIp",
			Handler:    _Admin_AddIp_Handler,
		},
		{
			MethodName: "DelIp",
			Handler:    _Admin_DelIp_Handler,
		},
		{
			MethodName: "SearchIp",
			Handler:    _Admin_SearchIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openchat/admin/admin.proto",
}
