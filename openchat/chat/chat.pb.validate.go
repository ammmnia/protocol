// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openchat/chat/chat.proto

package chat

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserIdentityMultiError, or
// nil if none found.
func (m *UserIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for AreaCode

	// no validation rules for PhoneNumber

	// no validation rules for DeviceID

	// no validation rules for Platform

	// no validation rules for Account

	if len(errors) > 0 {
		return UserIdentityMultiError(errors)
	}

	return nil
}

// UserIdentityMultiError is an error wrapping multiple validation errors
// returned by UserIdentity.ValidateAll() if the designated constraints aren't met.
type UserIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentityMultiError) AllErrors() []error { return m }

// UserIdentityValidationError is the validation error returned by
// UserIdentity.Validate if the designated constraints aren't met.
type UserIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentityValidationError) ErrorName() string { return "UserIdentityValidationError" }

// Error satisfies the builtin error interface
func (e UserIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentityValidationError{}

// Validate checks the field values on UpdateUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoReqMultiError, or nil if none found.
func (m *UpdateUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPhoneNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAreaCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "AreaCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "AreaCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAreaCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "AreaCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNickname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Nickname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Nickname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNickname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "Nickname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFaceURL()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "FaceURL",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "FaceURL",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFaceURL()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "FaceURL",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "Gender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLevel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLevel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "Level",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Birth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "Birth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "Birth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllowAddFriend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "AllowAddFriend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "AllowAddFriend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowAddFriend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "AllowAddFriend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllowBeep()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "AllowBeep",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "AllowBeep",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowBeep()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "AllowBeep",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllowVibration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "AllowVibration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "AllowVibration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowVibration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "AllowVibration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGlobalRecvMsgOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "GlobalRecvMsgOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "GlobalRecvMsgOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalRecvMsgOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "GlobalRecvMsgOpt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegisterType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "RegisterType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "RegisterType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisterType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "RegisterType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserInfoReqMultiError(errors)
	}

	return nil
}

// UpdateUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by UpdateUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoReqMultiError) AllErrors() []error { return m }

// UpdateUserInfoReqValidationError is the validation error returned by
// UpdateUserInfoReq.Validate if the designated constraints aren't met.
type UpdateUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoReqValidationError) ErrorName() string {
	return "UpdateUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoReqValidationError{}

// Validate checks the field values on UpdateUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoRespMultiError, or nil if none found.
func (m *UpdateUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FaceUrl

	// no validation rules for NickName

	if len(errors) > 0 {
		return UpdateUserInfoRespMultiError(errors)
	}

	return nil
}

// UpdateUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by UpdateUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoRespMultiError) AllErrors() []error { return m }

// UpdateUserInfoRespValidationError is the validation error returned by
// UpdateUserInfoResp.Validate if the designated constraints aren't met.
type UpdateUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoRespValidationError) ErrorName() string {
	return "UpdateUserInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoRespValidationError{}

// Validate checks the field values on FindUserPublicInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserPublicInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserPublicInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserPublicInfoReqMultiError, or nil if none found.
func (m *FindUserPublicInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserPublicInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindUserPublicInfoReqMultiError(errors)
	}

	return nil
}

// FindUserPublicInfoReqMultiError is an error wrapping multiple validation
// errors returned by FindUserPublicInfoReq.ValidateAll() if the designated
// constraints aren't met.
type FindUserPublicInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserPublicInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserPublicInfoReqMultiError) AllErrors() []error { return m }

// FindUserPublicInfoReqValidationError is the validation error returned by
// FindUserPublicInfoReq.Validate if the designated constraints aren't met.
type FindUserPublicInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserPublicInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserPublicInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserPublicInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserPublicInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserPublicInfoReqValidationError) ErrorName() string {
	return "FindUserPublicInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserPublicInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserPublicInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserPublicInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserPublicInfoReqValidationError{}

// Validate checks the field values on FindUserPublicInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserPublicInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserPublicInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserPublicInfoRespMultiError, or nil if none found.
func (m *FindUserPublicInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserPublicInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindUserPublicInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindUserPublicInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindUserPublicInfoRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindUserPublicInfoRespMultiError(errors)
	}

	return nil
}

// FindUserPublicInfoRespMultiError is an error wrapping multiple validation
// errors returned by FindUserPublicInfoResp.ValidateAll() if the designated
// constraints aren't met.
type FindUserPublicInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserPublicInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserPublicInfoRespMultiError) AllErrors() []error { return m }

// FindUserPublicInfoRespValidationError is the validation error returned by
// FindUserPublicInfoResp.Validate if the designated constraints aren't met.
type FindUserPublicInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserPublicInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserPublicInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserPublicInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserPublicInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserPublicInfoRespValidationError) ErrorName() string {
	return "FindUserPublicInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserPublicInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserPublicInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserPublicInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserPublicInfoRespValidationError{}

// Validate checks the field values on SearchUserPublicInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserPublicInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserPublicInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserPublicInfoReqMultiError, or nil if none found.
func (m *SearchUserPublicInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserPublicInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserPublicInfoReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserPublicInfoReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserPublicInfoReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Genders

	if len(errors) > 0 {
		return SearchUserPublicInfoReqMultiError(errors)
	}

	return nil
}

// SearchUserPublicInfoReqMultiError is an error wrapping multiple validation
// errors returned by SearchUserPublicInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SearchUserPublicInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserPublicInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserPublicInfoReqMultiError) AllErrors() []error { return m }

// SearchUserPublicInfoReqValidationError is the validation error returned by
// SearchUserPublicInfoReq.Validate if the designated constraints aren't met.
type SearchUserPublicInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserPublicInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserPublicInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserPublicInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserPublicInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserPublicInfoReqValidationError) ErrorName() string {
	return "SearchUserPublicInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserPublicInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserPublicInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserPublicInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserPublicInfoReqValidationError{}

// Validate checks the field values on SearchUserPublicInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserPublicInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserPublicInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserPublicInfoRespMultiError, or nil if none found.
func (m *SearchUserPublicInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserPublicInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserPublicInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserPublicInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserPublicInfoRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchUserPublicInfoRespMultiError(errors)
	}

	return nil
}

// SearchUserPublicInfoRespMultiError is an error wrapping multiple validation
// errors returned by SearchUserPublicInfoResp.ValidateAll() if the designated
// constraints aren't met.
type SearchUserPublicInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserPublicInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserPublicInfoRespMultiError) AllErrors() []error { return m }

// SearchUserPublicInfoRespValidationError is the validation error returned by
// SearchUserPublicInfoResp.Validate if the designated constraints aren't met.
type SearchUserPublicInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserPublicInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserPublicInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserPublicInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserPublicInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserPublicInfoRespValidationError) ErrorName() string {
	return "SearchUserPublicInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserPublicInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserPublicInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserPublicInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserPublicInfoRespValidationError{}

// Validate checks the field values on FindUserFullInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserFullInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserFullInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserFullInfoReqMultiError, or nil if none found.
func (m *FindUserFullInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserFullInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindUserFullInfoReqMultiError(errors)
	}

	return nil
}

// FindUserFullInfoReqMultiError is an error wrapping multiple validation
// errors returned by FindUserFullInfoReq.ValidateAll() if the designated
// constraints aren't met.
type FindUserFullInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserFullInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserFullInfoReqMultiError) AllErrors() []error { return m }

// FindUserFullInfoReqValidationError is the validation error returned by
// FindUserFullInfoReq.Validate if the designated constraints aren't met.
type FindUserFullInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserFullInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserFullInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserFullInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserFullInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserFullInfoReqValidationError) ErrorName() string {
	return "FindUserFullInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserFullInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserFullInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserFullInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserFullInfoReqValidationError{}

// Validate checks the field values on FindUserFullInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserFullInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserFullInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserFullInfoRespMultiError, or nil if none found.
func (m *FindUserFullInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserFullInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindUserFullInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindUserFullInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindUserFullInfoRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindUserFullInfoRespMultiError(errors)
	}

	return nil
}

// FindUserFullInfoRespMultiError is an error wrapping multiple validation
// errors returned by FindUserFullInfoResp.ValidateAll() if the designated
// constraints aren't met.
type FindUserFullInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserFullInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserFullInfoRespMultiError) AllErrors() []error { return m }

// FindUserFullInfoRespValidationError is the validation error returned by
// FindUserFullInfoResp.Validate if the designated constraints aren't met.
type FindUserFullInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserFullInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserFullInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserFullInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserFullInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserFullInfoRespValidationError) ErrorName() string {
	return "FindUserFullInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserFullInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserFullInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserFullInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserFullInfoRespValidationError{}

// Validate checks the field values on SendVerifyCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerifyCodeReqMultiError, or nil if none found.
func (m *SendVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UsedFor

	// no validation rules for Ip

	// no validation rules for InvitationCode

	// no validation rules for DeviceID

	// no validation rules for Platform

	// no validation rules for AreaCode

	// no validation rules for PhoneNumber

	// no validation rules for Email

	if len(errors) > 0 {
		return SendVerifyCodeReqMultiError(errors)
	}

	return nil
}

// SendVerifyCodeReqMultiError is an error wrapping multiple validation errors
// returned by SendVerifyCodeReq.ValidateAll() if the designated constraints
// aren't met.
type SendVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerifyCodeReqMultiError) AllErrors() []error { return m }

// SendVerifyCodeReqValidationError is the validation error returned by
// SendVerifyCodeReq.Validate if the designated constraints aren't met.
type SendVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerifyCodeReqValidationError) ErrorName() string {
	return "SendVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerifyCodeReqValidationError{}

// Validate checks the field values on SendVerifyCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerifyCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerifyCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerifyCodeRespMultiError, or nil if none found.
func (m *SendVerifyCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerifyCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendVerifyCodeRespMultiError(errors)
	}

	return nil
}

// SendVerifyCodeRespMultiError is an error wrapping multiple validation errors
// returned by SendVerifyCodeResp.ValidateAll() if the designated constraints
// aren't met.
type SendVerifyCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerifyCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerifyCodeRespMultiError) AllErrors() []error { return m }

// SendVerifyCodeRespValidationError is the validation error returned by
// SendVerifyCodeResp.Validate if the designated constraints aren't met.
type SendVerifyCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerifyCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerifyCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerifyCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerifyCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerifyCodeRespValidationError) ErrorName() string {
	return "SendVerifyCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerifyCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerifyCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerifyCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerifyCodeRespValidationError{}

// Validate checks the field values on VerifyCodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyCodeReqMultiError, or
// nil if none found.
func (m *VerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AreaCode

	// no validation rules for PhoneNumber

	// no validation rules for VerifyCode

	// no validation rules for Email

	// no validation rules for Key

	if len(errors) > 0 {
		return VerifyCodeReqMultiError(errors)
	}

	return nil
}

// VerifyCodeReqMultiError is an error wrapping multiple validation errors
// returned by VerifyCodeReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCodeReqMultiError) AllErrors() []error { return m }

// VerifyCodeReqValidationError is the validation error returned by
// VerifyCodeReq.Validate if the designated constraints aren't met.
type VerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCodeReqValidationError) ErrorName() string { return "VerifyCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e VerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCodeReqValidationError{}

// Validate checks the field values on VerifyCodeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCodeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyCodeRespMultiError,
// or nil if none found.
func (m *VerifyCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyCodeRespMultiError(errors)
	}

	return nil
}

// VerifyCodeRespMultiError is an error wrapping multiple validation errors
// returned by VerifyCodeResp.ValidateAll() if the designated constraints
// aren't met.
type VerifyCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCodeRespMultiError) AllErrors() []error { return m }

// VerifyCodeRespValidationError is the validation error returned by
// VerifyCodeResp.Validate if the designated constraints aren't met.
type VerifyCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCodeRespValidationError) ErrorName() string { return "VerifyCodeRespValidationError" }

// Error satisfies the builtin error interface
func (e VerifyCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCodeRespValidationError{}

// Validate checks the field values on SendVerifyImgCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerifyImgCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerifyImgCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerifyImgCodeReqMultiError, or nil if none found.
func (m *SendVerifyImgCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerifyImgCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UsedFor

	// no validation rules for Ip

	// no validation rules for InvitationCode

	// no validation rules for DeviceID

	// no validation rules for Platform

	if len(errors) > 0 {
		return SendVerifyImgCodeReqMultiError(errors)
	}

	return nil
}

// SendVerifyImgCodeReqMultiError is an error wrapping multiple validation
// errors returned by SendVerifyImgCodeReq.ValidateAll() if the designated
// constraints aren't met.
type SendVerifyImgCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerifyImgCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerifyImgCodeReqMultiError) AllErrors() []error { return m }

// SendVerifyImgCodeReqValidationError is the validation error returned by
// SendVerifyImgCodeReq.Validate if the designated constraints aren't met.
type SendVerifyImgCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerifyImgCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerifyImgCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerifyImgCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerifyImgCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerifyImgCodeReqValidationError) ErrorName() string {
	return "SendVerifyImgCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerifyImgCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerifyImgCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerifyImgCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerifyImgCodeReqValidationError{}

// Validate checks the field values on SendVerifyImgCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerifyImgCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerifyImgCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerifyImgCodeRespMultiError, or nil if none found.
func (m *SendVerifyImgCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerifyImgCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Img

	// no validation rules for Key

	if len(errors) > 0 {
		return SendVerifyImgCodeRespMultiError(errors)
	}

	return nil
}

// SendVerifyImgCodeRespMultiError is an error wrapping multiple validation
// errors returned by SendVerifyImgCodeResp.ValidateAll() if the designated
// constraints aren't met.
type SendVerifyImgCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerifyImgCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerifyImgCodeRespMultiError) AllErrors() []error { return m }

// SendVerifyImgCodeRespValidationError is the validation error returned by
// SendVerifyImgCodeResp.Validate if the designated constraints aren't met.
type SendVerifyImgCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerifyImgCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerifyImgCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerifyImgCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerifyImgCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerifyImgCodeRespValidationError) ErrorName() string {
	return "SendVerifyImgCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerifyImgCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerifyImgCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerifyImgCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerifyImgCodeRespValidationError{}

// Validate checks the field values on VerifyImgCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyImgCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyImgCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyImgCodeReqMultiError, or nil if none found.
func (m *VerifyImgCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyImgCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VerifyCode

	// no validation rules for Key

	if len(errors) > 0 {
		return VerifyImgCodeReqMultiError(errors)
	}

	return nil
}

// VerifyImgCodeReqMultiError is an error wrapping multiple validation errors
// returned by VerifyImgCodeReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyImgCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyImgCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyImgCodeReqMultiError) AllErrors() []error { return m }

// VerifyImgCodeReqValidationError is the validation error returned by
// VerifyImgCodeReq.Validate if the designated constraints aren't met.
type VerifyImgCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyImgCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyImgCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyImgCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyImgCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyImgCodeReqValidationError) ErrorName() string { return "VerifyImgCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e VerifyImgCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyImgCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyImgCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyImgCodeReqValidationError{}

// Validate checks the field values on VerifyImgCodeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyImgCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyImgCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyImgCodeRespMultiError, or nil if none found.
func (m *VerifyImgCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyImgCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyImgCodeRespMultiError(errors)
	}

	return nil
}

// VerifyImgCodeRespMultiError is an error wrapping multiple validation errors
// returned by VerifyImgCodeResp.ValidateAll() if the designated constraints
// aren't met.
type VerifyImgCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyImgCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyImgCodeRespMultiError) AllErrors() []error { return m }

// VerifyImgCodeRespValidationError is the validation error returned by
// VerifyImgCodeResp.Validate if the designated constraints aren't met.
type VerifyImgCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyImgCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyImgCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyImgCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyImgCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyImgCodeRespValidationError) ErrorName() string {
	return "VerifyImgCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyImgCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyImgCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyImgCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyImgCodeRespValidationError{}

// Validate checks the field values on RegisterUserInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserInfoMultiError, or nil if none found.
func (m *RegisterUserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Nickname

	// no validation rules for FaceURL

	// no validation rules for Birth

	// no validation rules for Gender

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for RegisterType

	if len(errors) > 0 {
		return RegisterUserInfoMultiError(errors)
	}

	return nil
}

// RegisterUserInfoMultiError is an error wrapping multiple validation errors
// returned by RegisterUserInfo.ValidateAll() if the designated constraints
// aren't met.
type RegisterUserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserInfoMultiError) AllErrors() []error { return m }

// RegisterUserInfoValidationError is the validation error returned by
// RegisterUserInfo.Validate if the designated constraints aren't met.
type RegisterUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserInfoValidationError) ErrorName() string { return "RegisterUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e RegisterUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserInfoValidationError{}

// Validate checks the field values on RegisterUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserReqMultiError, or nil if none found.
func (m *RegisterUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvitationCode

	// no validation rules for VerifyCode

	// no validation rules for Ip

	// no validation rules for DeviceID

	// no validation rules for Platform

	// no validation rules for AutoLogin

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterUserReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterUserReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterUserReqValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterUserReqMultiError(errors)
	}

	return nil
}

// RegisterUserReqMultiError is an error wrapping multiple validation errors
// returned by RegisterUserReq.ValidateAll() if the designated constraints
// aren't met.
type RegisterUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserReqMultiError) AllErrors() []error { return m }

// RegisterUserReqValidationError is the validation error returned by
// RegisterUserReq.Validate if the designated constraints aren't met.
type RegisterUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserReqValidationError) ErrorName() string { return "RegisterUserReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserReqValidationError{}

// Validate checks the field values on RegisterUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserRespMultiError, or nil if none found.
func (m *RegisterUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for ChatToken

	if len(errors) > 0 {
		return RegisterUserRespMultiError(errors)
	}

	return nil
}

// RegisterUserRespMultiError is an error wrapping multiple validation errors
// returned by RegisterUserResp.ValidateAll() if the designated constraints
// aren't met.
type RegisterUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserRespMultiError) AllErrors() []error { return m }

// RegisterUserRespValidationError is the validation error returned by
// RegisterUserResp.Validate if the designated constraints aren't met.
type RegisterUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserRespValidationError) ErrorName() string { return "RegisterUserRespValidationError" }

// Error satisfies the builtin error interface
func (e RegisterUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserRespValidationError{}

// Validate checks the field values on AddUserAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUserAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserAccountReqMultiError, or nil if none found.
func (m *AddUserAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for DeviceID

	// no validation rules for Platform

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddUserAccountReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddUserAccountReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddUserAccountReqValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddUserAccountReqMultiError(errors)
	}

	return nil
}

// AddUserAccountReqMultiError is an error wrapping multiple validation errors
// returned by AddUserAccountReq.ValidateAll() if the designated constraints
// aren't met.
type AddUserAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserAccountReqMultiError) AllErrors() []error { return m }

// AddUserAccountReqValidationError is the validation error returned by
// AddUserAccountReq.Validate if the designated constraints aren't met.
type AddUserAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserAccountReqValidationError) ErrorName() string {
	return "AddUserAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserAccountReqValidationError{}

// Validate checks the field values on AddUserAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserAccountRespMultiError, or nil if none found.
func (m *AddUserAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserAccountRespMultiError(errors)
	}

	return nil
}

// AddUserAccountRespMultiError is an error wrapping multiple validation errors
// returned by AddUserAccountResp.ValidateAll() if the designated constraints
// aren't met.
type AddUserAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserAccountRespMultiError) AllErrors() []error { return m }

// AddUserAccountRespValidationError is the validation error returned by
// AddUserAccountResp.Validate if the designated constraints aren't met.
type AddUserAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserAccountRespValidationError) ErrorName() string {
	return "AddUserAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserAccountRespValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Platform

	// no validation rules for DeviceID

	// no validation rules for Ip

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on ResetPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordReqMultiError, or nil if none found.
func (m *ResetPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	if len(errors) > 0 {
		return ResetPasswordReqMultiError(errors)
	}

	return nil
}

// ResetPasswordReqMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordReqMultiError) AllErrors() []error { return m }

// ResetPasswordReqValidationError is the validation error returned by
// ResetPasswordReq.Validate if the designated constraints aren't met.
type ResetPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReqValidationError) ErrorName() string { return "ResetPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReqValidationError{}

// Validate checks the field values on ResetPasswordResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRespMultiError, or nil if none found.
func (m *ResetPasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordRespMultiError(errors)
	}

	return nil
}

// ResetPasswordRespMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordResp.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRespMultiError) AllErrors() []error { return m }

// ResetPasswordRespValidationError is the validation error returned by
// ResetPasswordResp.Validate if the designated constraints aren't met.
type ResetPasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRespValidationError) ErrorName() string {
	return "ResetPasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRespValidationError{}

// Validate checks the field values on ChangePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordReqMultiError, or nil if none found.
func (m *ChangePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for CurrentPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return ChangePasswordReqMultiError(errors)
	}

	return nil
}

// ChangePasswordReqMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordReqMultiError) AllErrors() []error { return m }

// ChangePasswordReqValidationError is the validation error returned by
// ChangePasswordReq.Validate if the designated constraints aren't met.
type ChangePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordReqValidationError) ErrorName() string {
	return "ChangePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordReqValidationError{}

// Validate checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRespMultiError, or nil if none found.
func (m *ChangePasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePasswordRespMultiError(errors)
	}

	return nil
}

// ChangePasswordRespMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordResp.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRespMultiError) AllErrors() []error { return m }

// ChangePasswordRespValidationError is the validation error returned by
// ChangePasswordResp.Validate if the designated constraints aren't met.
type ChangePasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRespValidationError) ErrorName() string {
	return "ChangePasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRespValidationError{}

// Validate checks the field values on FindUserAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserAccountReqMultiError, or nil if none found.
func (m *FindUserAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindUserAccountReqMultiError(errors)
	}

	return nil
}

// FindUserAccountReqMultiError is an error wrapping multiple validation errors
// returned by FindUserAccountReq.ValidateAll() if the designated constraints
// aren't met.
type FindUserAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserAccountReqMultiError) AllErrors() []error { return m }

// FindUserAccountReqValidationError is the validation error returned by
// FindUserAccountReq.Validate if the designated constraints aren't met.
type FindUserAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserAccountReqValidationError) ErrorName() string {
	return "FindUserAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserAccountReqValidationError{}

// Validate checks the field values on FindUserAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserAccountRespMultiError, or nil if none found.
func (m *FindUserAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserAccountMap

	if len(errors) > 0 {
		return FindUserAccountRespMultiError(errors)
	}

	return nil
}

// FindUserAccountRespMultiError is an error wrapping multiple validation
// errors returned by FindUserAccountResp.ValidateAll() if the designated
// constraints aren't met.
type FindUserAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserAccountRespMultiError) AllErrors() []error { return m }

// FindUserAccountRespValidationError is the validation error returned by
// FindUserAccountResp.Validate if the designated constraints aren't met.
type FindUserAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserAccountRespValidationError) ErrorName() string {
	return "FindUserAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserAccountRespValidationError{}

// Validate checks the field values on FindAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAccountUserReqMultiError, or nil if none found.
func (m *FindAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindAccountUserReqMultiError(errors)
	}

	return nil
}

// FindAccountUserReqMultiError is an error wrapping multiple validation errors
// returned by FindAccountUserReq.ValidateAll() if the designated constraints
// aren't met.
type FindAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAccountUserReqMultiError) AllErrors() []error { return m }

// FindAccountUserReqValidationError is the validation error returned by
// FindAccountUserReq.Validate if the designated constraints aren't met.
type FindAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAccountUserReqValidationError) ErrorName() string {
	return "FindAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e FindAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAccountUserReqValidationError{}

// Validate checks the field values on FindAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAccountUserRespMultiError, or nil if none found.
func (m *FindAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountUserMap

	if len(errors) > 0 {
		return FindAccountUserRespMultiError(errors)
	}

	return nil
}

// FindAccountUserRespMultiError is an error wrapping multiple validation
// errors returned by FindAccountUserResp.ValidateAll() if the designated
// constraints aren't met.
type FindAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAccountUserRespMultiError) AllErrors() []error { return m }

// FindAccountUserRespValidationError is the validation error returned by
// FindAccountUserResp.Validate if the designated constraints aren't met.
type FindAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAccountUserRespValidationError) ErrorName() string {
	return "FindAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e FindAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAccountUserRespValidationError{}

// Validate checks the field values on SignalRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignalRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignalRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignalRecordMultiError, or
// nil if none found.
func (m *SignalRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	// no validation rules for MediaType

	// no validation rules for RoomType

	// no validation rules for SenderID

	// no validation rules for SenderNickname

	// no validation rules for RecvID

	// no validation rules for RecvNickname

	// no validation rules for GroupID

	// no validation rules for GroupName

	for idx, item := range m.GetInviterUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignalRecordValidationError{
						field:  fmt.Sprintf("InviterUserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignalRecordValidationError{
						field:  fmt.Sprintf("InviterUserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignalRecordValidationError{
					field:  fmt.Sprintf("InviterUserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Duration

	// no validation rules for CreateTime

	// no validation rules for Size

	// no validation rules for DownloadURL

	if len(errors) > 0 {
		return SignalRecordMultiError(errors)
	}

	return nil
}

// SignalRecordMultiError is an error wrapping multiple validation errors
// returned by SignalRecord.ValidateAll() if the designated constraints aren't met.
type SignalRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalRecordMultiError) AllErrors() []error { return m }

// SignalRecordValidationError is the validation error returned by
// SignalRecord.Validate if the designated constraints aren't met.
type SignalRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalRecordValidationError) ErrorName() string { return "SignalRecordValidationError" }

// Error satisfies the builtin error interface
func (e SignalRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalRecordValidationError{}

// Validate checks the field values on OpenIMCallbackReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OpenIMCallbackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenIMCallbackReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenIMCallbackReqMultiError, or nil if none found.
func (m *OpenIMCallbackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenIMCallbackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Command

	// no validation rules for Body

	if len(errors) > 0 {
		return OpenIMCallbackReqMultiError(errors)
	}

	return nil
}

// OpenIMCallbackReqMultiError is an error wrapping multiple validation errors
// returned by OpenIMCallbackReq.ValidateAll() if the designated constraints
// aren't met.
type OpenIMCallbackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenIMCallbackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenIMCallbackReqMultiError) AllErrors() []error { return m }

// OpenIMCallbackReqValidationError is the validation error returned by
// OpenIMCallbackReq.Validate if the designated constraints aren't met.
type OpenIMCallbackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenIMCallbackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenIMCallbackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenIMCallbackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenIMCallbackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenIMCallbackReqValidationError) ErrorName() string {
	return "OpenIMCallbackReqValidationError"
}

// Error satisfies the builtin error interface
func (e OpenIMCallbackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenIMCallbackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenIMCallbackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenIMCallbackReqValidationError{}

// Validate checks the field values on OpenIMCallbackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenIMCallbackResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenIMCallbackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenIMCallbackRespMultiError, or nil if none found.
func (m *OpenIMCallbackResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenIMCallbackResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OpenIMCallbackRespMultiError(errors)
	}

	return nil
}

// OpenIMCallbackRespMultiError is an error wrapping multiple validation errors
// returned by OpenIMCallbackResp.ValidateAll() if the designated constraints
// aren't met.
type OpenIMCallbackRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenIMCallbackRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenIMCallbackRespMultiError) AllErrors() []error { return m }

// OpenIMCallbackRespValidationError is the validation error returned by
// OpenIMCallbackResp.Validate if the designated constraints aren't met.
type OpenIMCallbackRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenIMCallbackRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenIMCallbackRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenIMCallbackRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenIMCallbackRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenIMCallbackRespValidationError) ErrorName() string {
	return "OpenIMCallbackRespValidationError"
}

// Error satisfies the builtin error interface
func (e OpenIMCallbackRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenIMCallbackResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenIMCallbackRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenIMCallbackRespValidationError{}

// Validate checks the field values on SearchUserFullInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserFullInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserFullInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserFullInfoReqMultiError, or nil if none found.
func (m *SearchUserFullInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserFullInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserFullInfoReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserFullInfoReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserFullInfoReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Genders

	// no validation rules for Normal

	if len(errors) > 0 {
		return SearchUserFullInfoReqMultiError(errors)
	}

	return nil
}

// SearchUserFullInfoReqMultiError is an error wrapping multiple validation
// errors returned by SearchUserFullInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SearchUserFullInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserFullInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserFullInfoReqMultiError) AllErrors() []error { return m }

// SearchUserFullInfoReqValidationError is the validation error returned by
// SearchUserFullInfoReq.Validate if the designated constraints aren't met.
type SearchUserFullInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserFullInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserFullInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserFullInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserFullInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserFullInfoReqValidationError) ErrorName() string {
	return "SearchUserFullInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserFullInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserFullInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserFullInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserFullInfoReqValidationError{}

// Validate checks the field values on SearchUserFullInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserFullInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserFullInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserFullInfoRespMultiError, or nil if none found.
func (m *SearchUserFullInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserFullInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserFullInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserFullInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserFullInfoRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchUserFullInfoRespMultiError(errors)
	}

	return nil
}

// SearchUserFullInfoRespMultiError is an error wrapping multiple validation
// errors returned by SearchUserFullInfoResp.ValidateAll() if the designated
// constraints aren't met.
type SearchUserFullInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserFullInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserFullInfoRespMultiError) AllErrors() []error { return m }

// SearchUserFullInfoRespValidationError is the validation error returned by
// SearchUserFullInfoResp.Validate if the designated constraints aren't met.
type SearchUserFullInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserFullInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserFullInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserFullInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserFullInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserFullInfoRespValidationError) ErrorName() string {
	return "SearchUserFullInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserFullInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserFullInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserFullInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserFullInfoRespValidationError{}

// Validate checks the field values on UserLoginCountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserLoginCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLoginCountReqMultiError, or nil if none found.
func (m *UserLoginCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return UserLoginCountReqMultiError(errors)
	}

	return nil
}

// UserLoginCountReqMultiError is an error wrapping multiple validation errors
// returned by UserLoginCountReq.ValidateAll() if the designated constraints
// aren't met.
type UserLoginCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginCountReqMultiError) AllErrors() []error { return m }

// UserLoginCountReqValidationError is the validation error returned by
// UserLoginCountReq.Validate if the designated constraints aren't met.
type UserLoginCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginCountReqValidationError) ErrorName() string {
	return "UserLoginCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e UserLoginCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginCountReqValidationError{}

// Validate checks the field values on UserLoginCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserLoginCountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLoginCountRespMultiError, or nil if none found.
func (m *UserLoginCountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginCountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LoginCount

	// no validation rules for UnloginCount

	// no validation rules for Count

	if len(errors) > 0 {
		return UserLoginCountRespMultiError(errors)
	}

	return nil
}

// UserLoginCountRespMultiError is an error wrapping multiple validation errors
// returned by UserLoginCountResp.ValidateAll() if the designated constraints
// aren't met.
type UserLoginCountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginCountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginCountRespMultiError) AllErrors() []error { return m }

// UserLoginCountRespValidationError is the validation error returned by
// UserLoginCountResp.Validate if the designated constraints aren't met.
type UserLoginCountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginCountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginCountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginCountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginCountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginCountRespValidationError) ErrorName() string {
	return "UserLoginCountRespValidationError"
}

// Error satisfies the builtin error interface
func (e UserLoginCountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginCountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginCountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginCountRespValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatToken

	// no validation rules for UserID

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on SearchUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserInfoReqMultiError, or nil if none found.
func (m *SearchUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserInfoReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserInfoReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserInfoReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchUserInfoReqMultiError(errors)
	}

	return nil
}

// SearchUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by SearchUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SearchUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserInfoReqMultiError) AllErrors() []error { return m }

// SearchUserInfoReqValidationError is the validation error returned by
// SearchUserInfoReq.Validate if the designated constraints aren't met.
type SearchUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserInfoReqValidationError) ErrorName() string {
	return "SearchUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserInfoReqValidationError{}

// Validate checks the field values on SearchUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserInfoRespMultiError, or nil if none found.
func (m *SearchUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserInfoRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserInfoRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchUserInfoRespMultiError(errors)
	}

	return nil
}

// SearchUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by SearchUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type SearchUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserInfoRespMultiError) AllErrors() []error { return m }

// SearchUserInfoRespValidationError is the validation error returned by
// SearchUserInfoResp.Validate if the designated constraints aren't met.
type SearchUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserInfoRespValidationError) ErrorName() string {
	return "SearchUserInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserInfoRespValidationError{}

// Validate checks the field values on GetTokenForVideoMeetingReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTokenForVideoMeetingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenForVideoMeetingReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenForVideoMeetingReqMultiError, or nil if none found.
func (m *GetTokenForVideoMeetingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenForVideoMeetingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	// no validation rules for Identity

	if len(errors) > 0 {
		return GetTokenForVideoMeetingReqMultiError(errors)
	}

	return nil
}

// GetTokenForVideoMeetingReqMultiError is an error wrapping multiple
// validation errors returned by GetTokenForVideoMeetingReq.ValidateAll() if
// the designated constraints aren't met.
type GetTokenForVideoMeetingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenForVideoMeetingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenForVideoMeetingReqMultiError) AllErrors() []error { return m }

// GetTokenForVideoMeetingReqValidationError is the validation error returned
// by GetTokenForVideoMeetingReq.Validate if the designated constraints aren't met.
type GetTokenForVideoMeetingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenForVideoMeetingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenForVideoMeetingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenForVideoMeetingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenForVideoMeetingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenForVideoMeetingReqValidationError) ErrorName() string {
	return "GetTokenForVideoMeetingReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokenForVideoMeetingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenForVideoMeetingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenForVideoMeetingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenForVideoMeetingReqValidationError{}

// Validate checks the field values on GetTokenForVideoMeetingResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTokenForVideoMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenForVideoMeetingResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenForVideoMeetingRespMultiError, or nil if none found.
func (m *GetTokenForVideoMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenForVideoMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerUrl

	// no validation rules for Token

	if len(errors) > 0 {
		return GetTokenForVideoMeetingRespMultiError(errors)
	}

	return nil
}

// GetTokenForVideoMeetingRespMultiError is an error wrapping multiple
// validation errors returned by GetTokenForVideoMeetingResp.ValidateAll() if
// the designated constraints aren't met.
type GetTokenForVideoMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenForVideoMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenForVideoMeetingRespMultiError) AllErrors() []error { return m }

// GetTokenForVideoMeetingRespValidationError is the validation error returned
// by GetTokenForVideoMeetingResp.Validate if the designated constraints
// aren't met.
type GetTokenForVideoMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenForVideoMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenForVideoMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenForVideoMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenForVideoMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenForVideoMeetingRespValidationError) ErrorName() string {
	return "GetTokenForVideoMeetingRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokenForVideoMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenForVideoMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenForVideoMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenForVideoMeetingRespValidationError{}

// Validate checks the field values on CheckUserExistReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckUserExistReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUserExistReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUserExistReqMultiError, or nil if none found.
func (m *CheckUserExistReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUserExistReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckUserExistReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckUserExistReqValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckUserExistReqValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckUserExistReqMultiError(errors)
	}

	return nil
}

// CheckUserExistReqMultiError is an error wrapping multiple validation errors
// returned by CheckUserExistReq.ValidateAll() if the designated constraints
// aren't met.
type CheckUserExistReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUserExistReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUserExistReqMultiError) AllErrors() []error { return m }

// CheckUserExistReqValidationError is the validation error returned by
// CheckUserExistReq.Validate if the designated constraints aren't met.
type CheckUserExistReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserExistReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserExistReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserExistReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserExistReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserExistReqValidationError) ErrorName() string {
	return "CheckUserExistReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserExistReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserExistReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserExistReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserExistReqValidationError{}

// Validate checks the field values on CheckUserExistResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUserExistResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUserExistResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUserExistRespMultiError, or nil if none found.
func (m *CheckUserExistResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUserExistResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Userid

	// no validation rules for IsRegistered

	if len(errors) > 0 {
		return CheckUserExistRespMultiError(errors)
	}

	return nil
}

// CheckUserExistRespMultiError is an error wrapping multiple validation errors
// returned by CheckUserExistResp.ValidateAll() if the designated constraints
// aren't met.
type CheckUserExistRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUserExistRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUserExistRespMultiError) AllErrors() []error { return m }

// CheckUserExistRespValidationError is the validation error returned by
// CheckUserExistResp.Validate if the designated constraints aren't met.
type CheckUserExistRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserExistRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserExistRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserExistRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserExistRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserExistRespValidationError) ErrorName() string {
	return "CheckUserExistRespValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserExistRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserExistResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserExistRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserExistRespValidationError{}

// Validate checks the field values on DelUserAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelUserAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelUserAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelUserAccountReqMultiError, or nil if none found.
func (m *DelUserAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelUserAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelUserAccountReqMultiError(errors)
	}

	return nil
}

// DelUserAccountReqMultiError is an error wrapping multiple validation errors
// returned by DelUserAccountReq.ValidateAll() if the designated constraints
// aren't met.
type DelUserAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelUserAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelUserAccountReqMultiError) AllErrors() []error { return m }

// DelUserAccountReqValidationError is the validation error returned by
// DelUserAccountReq.Validate if the designated constraints aren't met.
type DelUserAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserAccountReqValidationError) ErrorName() string {
	return "DelUserAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelUserAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserAccountReqValidationError{}

// Validate checks the field values on DelUserAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelUserAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelUserAccountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelUserAccountRespMultiError, or nil if none found.
func (m *DelUserAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelUserAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelUserAccountRespMultiError(errors)
	}

	return nil
}

// DelUserAccountRespMultiError is an error wrapping multiple validation errors
// returned by DelUserAccountResp.ValidateAll() if the designated constraints
// aren't met.
type DelUserAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelUserAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelUserAccountRespMultiError) AllErrors() []error { return m }

// DelUserAccountRespValidationError is the validation error returned by
// DelUserAccountResp.Validate if the designated constraints aren't met.
type DelUserAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserAccountRespValidationError) ErrorName() string {
	return "DelUserAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e DelUserAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserAccountRespValidationError{}

// Validate checks the field values on SetAllowRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAllowRegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAllowRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAllowRegisterReqMultiError, or nil if none found.
func (m *SetAllowRegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAllowRegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowRegister

	if len(errors) > 0 {
		return SetAllowRegisterReqMultiError(errors)
	}

	return nil
}

// SetAllowRegisterReqMultiError is an error wrapping multiple validation
// errors returned by SetAllowRegisterReq.ValidateAll() if the designated
// constraints aren't met.
type SetAllowRegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAllowRegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAllowRegisterReqMultiError) AllErrors() []error { return m }

// SetAllowRegisterReqValidationError is the validation error returned by
// SetAllowRegisterReq.Validate if the designated constraints aren't met.
type SetAllowRegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAllowRegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAllowRegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAllowRegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAllowRegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAllowRegisterReqValidationError) ErrorName() string {
	return "SetAllowRegisterReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetAllowRegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAllowRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAllowRegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAllowRegisterReqValidationError{}

// Validate checks the field values on SetAllowRegisterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAllowRegisterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAllowRegisterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAllowRegisterRespMultiError, or nil if none found.
func (m *SetAllowRegisterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAllowRegisterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetAllowRegisterRespMultiError(errors)
	}

	return nil
}

// SetAllowRegisterRespMultiError is an error wrapping multiple validation
// errors returned by SetAllowRegisterResp.ValidateAll() if the designated
// constraints aren't met.
type SetAllowRegisterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAllowRegisterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAllowRegisterRespMultiError) AllErrors() []error { return m }

// SetAllowRegisterRespValidationError is the validation error returned by
// SetAllowRegisterResp.Validate if the designated constraints aren't met.
type SetAllowRegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAllowRegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAllowRegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAllowRegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAllowRegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAllowRegisterRespValidationError) ErrorName() string {
	return "SetAllowRegisterRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetAllowRegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAllowRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAllowRegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAllowRegisterRespValidationError{}

// Validate checks the field values on GetAllowRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllowRegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllowRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllowRegisterReqMultiError, or nil if none found.
func (m *GetAllowRegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllowRegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllowRegisterReqMultiError(errors)
	}

	return nil
}

// GetAllowRegisterReqMultiError is an error wrapping multiple validation
// errors returned by GetAllowRegisterReq.ValidateAll() if the designated
// constraints aren't met.
type GetAllowRegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllowRegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllowRegisterReqMultiError) AllErrors() []error { return m }

// GetAllowRegisterReqValidationError is the validation error returned by
// GetAllowRegisterReq.Validate if the designated constraints aren't met.
type GetAllowRegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllowRegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllowRegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllowRegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllowRegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllowRegisterReqValidationError) ErrorName() string {
	return "GetAllowRegisterReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllowRegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllowRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllowRegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllowRegisterReqValidationError{}

// Validate checks the field values on GetAllowRegisterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllowRegisterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllowRegisterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllowRegisterRespMultiError, or nil if none found.
func (m *GetAllowRegisterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllowRegisterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowRegister

	if len(errors) > 0 {
		return GetAllowRegisterRespMultiError(errors)
	}

	return nil
}

// GetAllowRegisterRespMultiError is an error wrapping multiple validation
// errors returned by GetAllowRegisterResp.ValidateAll() if the designated
// constraints aren't met.
type GetAllowRegisterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllowRegisterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllowRegisterRespMultiError) AllErrors() []error { return m }

// GetAllowRegisterRespValidationError is the validation error returned by
// GetAllowRegisterResp.Validate if the designated constraints aren't met.
type GetAllowRegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllowRegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllowRegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllowRegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllowRegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllowRegisterRespValidationError) ErrorName() string {
	return "GetAllowRegisterRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllowRegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllowRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllowRegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllowRegisterRespValidationError{}
