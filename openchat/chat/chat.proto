// Copyright © 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openim.openchat.chat;

import "google/api/annotations.proto";
import "openchat/common/common.proto";
import "sdkws/sdkws.proto";
import "wrapperspb/wrapperspb.proto";

option go_package = "github.com/ammmnia/protocol/openchat/chat";

message UserIdentity {
  string email = 1;
  string areaCode = 2;
  string phoneNumber = 3;
  string deviceID = 4;
  int32 platform = 5;
  string account = 6;
}

message UpdateUserInfoReq {
  string userID = 1;
  openim.protobuf.StringValue account = 2;
  openim.protobuf.StringValue phoneNumber = 3;
  openim.protobuf.StringValue areaCode = 4;
  openim.protobuf.StringValue email = 5;
  openim.protobuf.StringValue nickname = 6;
  openim.protobuf.StringValue faceURL = 7;
  openim.protobuf.Int32Value gender = 8;
  openim.protobuf.Int32Value level = 9;
  openim.protobuf.Int64Value birth = 10;
  openim.protobuf.Int32Value allowAddFriend = 11;
  openim.protobuf.Int32Value allowBeep = 12;
  openim.protobuf.Int32Value allowVibration = 13;
  openim.protobuf.Int32Value globalRecvMsgOpt = 14;
  openim.protobuf.Int32Value RegisterType = 15;
}

message UpdateUserInfoResp {
  string faceUrl = 1;
  string nickName = 2;
}

message FindUserPublicInfoReq {
  repeated string userIDs = 1;
}

message FindUserPublicInfoResp {
  repeated openim.openchat.common.UserPublicInfo users = 1;
}

message SearchUserPublicInfoReq {
  string keyword = 1;
  openim.sdkws.RequestPagination pagination = 2;
  int32 genders = 3;
}

message SearchUserPublicInfoResp {
  uint32 total = 1;
  repeated openim.openchat.common.UserPublicInfo users = 2;
}

message FindUserFullInfoReq {
  repeated string userIDs = 1;
}

message FindUserFullInfoResp {
  repeated openim.openchat.common.UserFullInfo users = 1;
}

message SendVerifyCodeReq {
  int32 usedFor = 1;
  string ip = 2;
  string invitationCode = 3;
  string deviceID = 4;
  int32 platform = 5;
  string areaCode = 6;
  string phoneNumber = 7;
  string email = 8;
}

message SendVerifyCodeResp {}

message VerifyCodeReq {
  string areaCode = 1;
  string phoneNumber = 2;
  string verifyCode = 3;
  string email = 4;
  string key = 5;
}

message VerifyCodeResp {}

message SendVerifyImgCodeReq {
  int32 usedFor = 1;
  string ip = 2;
  string invitationCode = 3;
  string deviceID = 4;
  int32 platform = 5;
}

message SendVerifyImgCodeResp {
  string img = 1;
  string key = 2;
}

message VerifyImgCodeReq {
  string verifyCode = 3;
  string key = 5;
}

message VerifyImgCodeResp {}

message RegisterUserInfo {
  string userID = 1; // 只有管理能设置
  string nickname = 2;
  string faceURL = 3;
  int64 birth = 4;
  int32 gender = 5;
//  string areaCode = 6;
//  string phoneNumber = 7;
//  string email = 8;
  string account = 9;
  string password = 10;
  int32 RegisterType = 11;
}

message RegisterUserReq {
  string invitationCode = 1;
  string verifyCode = 2;
  string ip = 3;
  string deviceID = 4;
  int32 platform = 5;
  bool autoLogin = 6;
  RegisterUserInfo user = 7;
}

message RegisterUserResp {
  string userID = 1;
  string chatToken = 3;
}

message AddUserAccountReq {
  string ip = 1;
  string deviceID = 2;
  int32 platform = 3;
  RegisterUserInfo user = 4;
}

message AddUserAccountResp {}

message LoginReq {
//  string areaCode = 1;
//  string phoneNumber = 2;
//  string verifyCode = 3;
  string account = 4;
  string password = 5;
  int32 platform = 6;
  string deviceID = 7;
  string ip = 8;
//  string email = 9;
}

message ResetPasswordReq {
//  string areaCode = 1;
//  string phoneNumber = 2;
//  string verifyCode = 3;
  string password = 4;
//  string email = 5;
}

message ResetPasswordResp {}

message ChangePasswordReq {
  string userID = 1;
  string currentPassword = 2;
  string newPassword = 3;
}

message ChangePasswordResp {}

message FindUserAccountReq {
  repeated string userIDs = 1;
}

message FindUserAccountResp {
  map<string, string> userAccountMap = 1; // userID  account
}

message FindAccountUserReq {
  repeated string accounts = 1;
}

message FindAccountUserResp {
  map<string, string> accountUserMap = 1; // account  userID
}

message SignalRecord {
  string fileName = 1;
  string mediaType = 2;
  string roomType = 3;
  string senderID = 4;
  string senderNickname = 5;
  string recvID = 6;
  string recvNickname = 7;
  string groupID = 8;
  string groupName = 9;
  repeated openim.openchat.common.UserPublicInfo inviterUserList = 10;
  int32 duration = 11;
  int64 createTime = 12;
  string size = 13;
  string downloadURL = 14;
}

message OpenIMCallbackReq {
  string command = 1;
  string body = 2;
}

message OpenIMCallbackResp {}

message SearchUserFullInfoReq {
  string keyword = 1;
  openim.sdkws.RequestPagination pagination = 2;
  int32 genders = 3;
  int32 normal = 4;
}

message SearchUserFullInfoResp {
  uint32 total = 1;
  repeated openim.openchat.common.UserFullInfo users = 2;
}

message UserLoginCountReq {
  int64 start = 1;
  int64 end = 2;
}

message UserLoginCountResp {
  int64 loginCount = 1;
  int64 unloginCount = 2;
  map<string, int64> count = 3;
}

message LoginResp {
  string chatToken = 2;
  string userID = 3;
}

message SearchUserInfoReq {
  string keyword = 1;
  openim.sdkws.RequestPagination pagination = 2;
  repeated int32 genders = 3;
  repeated string userIDs = 4;
}

message SearchUserInfoResp {
  uint32 total = 1;
  repeated openim.openchat.common.UserFullInfo users = 2;
}

message GetTokenForVideoMeetingReq {
  string room = 1;
  string identity = 2;
}

message GetTokenForVideoMeetingResp {
  string serverUrl = 1;
  string token = 2;
}

message CheckUserExistReq {
  RegisterUserInfo user = 1;
}

message CheckUserExistResp {
  string userid = 1;
  bool isRegistered = 2;
}

message DelUserAccountReq {
  repeated string userIDs = 1;
  repeated string accounts = 2;
}
message DelUserAccountResp {}

message SetAllowRegisterReq {
  bool allowRegister = 1;
}

message SetAllowRegisterResp {
}

message GetAllowRegisterReq {
}

message GetAllowRegisterResp {
  bool allowRegister = 1;
}

message FindLoginRecordReq {
  repeated string userIDs = 1;
}

message FindLoginRecordResp {
  repeated openim.openchat.common.UserLoginRecord loginRecord = 1;
}

// ################### Version ###################
// 跟新版本请求
message UpdateVersionReq {
  string ProductName = 1;
  uint32 Platform = 2;
  string VersionCode = 3;
  string Desc = 4;
  string AndroidDownloadUrl = 5;
  string IosDownloadUrl = 6;
  uint32 ShowForceUpgrade = 7;
  uint32 ShowUpgradeTip = 8;
  uint64 versionId = 10;
}
message UpdateVersionResp {}

message AddVersionReq {
  string ProductName = 1;
  uint32 Platform = 2;
  string VersionCode = 3;
  string Desc = 4;
  string AndroidDownloadUrl = 5;
  string IosDownloadUrl = 6;
  uint32 ShowForceUpgrade = 7;
  uint32 ShowUpgradeTip = 8;
}
message AddVersionResp {}

message SearchVersionReq {
  string ProductName = 1;
  uint32 Platform = 2;
  string VersionCode = 3;
  uint32 ForceUpgrade = 4;
  string createBy = 5;
  string startTime = 6;
  string endTime = 7;
  openim.sdkws.RequestPagination pagination = 8;
}
message SearchVersionResp {
  uint64 total = 1;
  uint64 pages = 2;
  repeated VersionInfoResp versions = 4;
}

message VersionInfoReq {
  uint64 versionId = 1;
}

message VersionInfoResp {
  string ProductName = 1;
  uint32 Platform = 2;
  string VersionCode = 3;
  string Desc = 4;
  string AndroidDownloadUrl = 5;
  string IosDownloadUrl = 6;
  uint32 ShowForceUpgrade = 7;
  uint32 ShowUpgradeTip = 8;
  uint64 versionId = 10;
  int64 creatTime = 11;
}

message DelVersionReq {
  uint64 versionId = 1;
}

message DelVersionResp {}

message CheckVersionReq {
  uint32 platform = 1;  //1:安卓，2:ios，3:都有
}
message CheckVersionResp {
  string curVersion = 1;
  string downloadUrl = 2;
  string desc = 3;
  uint32 forceUpgrade = 4;
}

// ################### Default Friend ###################

message AddDefaultFriendReq {
  repeated string userIDs = 1;
}

message AddDefaultFriendResp {}

message DelDefaultFriendReq {
  repeated string userIDs = 1;
}

message DelDefaultFriendResp {}

message FindDefaultFriendReq {}

message FindDefaultFriendResp {
  repeated string userIDs = 1;
}

message SearchDefaultFriendReq {
  string keyword = 1;
  openim.sdkws.RequestPagination pagination = 2;
}

message DefaultFriendAttribute {
  string userID = 1;
  int64 createTime = 2;
  openim.openchat.common.UserPublicInfo user = 3;
}

message SearchDefaultFriendResp {
  uint32 total = 1;
  repeated DefaultFriendAttribute users = 2;
}

// ################### DefaultGroup ###################

message AddDefaultGroupReq {
  repeated string groupIDs = 1;
}

message AddDefaultGroupResp {}

message DelDefaultGroupReq {
  repeated string groupIDs = 1;
}

message DelDefaultGroupResp {}

message FindDefaultGroupReq {}

message FindDefaultGroupResp {
  repeated string groupIDs = 1;
}

message SearchDefaultGroupReq {
  string keyword = 1;
  openim.sdkws.RequestPagination pagination = 2;
}

message GroupAttribute {
  string groupID = 1;
  int64 createTime = 2;
  openim.sdkws.GroupInfo group = 3;
}

message SearchDefaultGroupResp {
  uint32 total = 1;
  repeated string groupIDs = 2;
}

// ################### InvitationCode ###################

message AddInvitationCodeReq {
  repeated string codes = 1;
}

message AddInvitationCodeResp {}

message GenInvitationCodeReq {
  int32 len = 1;
  int32 num = 2;
  string chars = 3;
}

message GenInvitationCodeResp {}

message FindInvitationCodeReq {
  repeated string codes = 1;
}

message FindInvitationCodeResp {
  repeated InvitationRegister codes = 1;
}

message UseInvitationCodeReq {
  string code = 1;
  string userID = 2;
}

message UseInvitationCodeResp {}

message DelInvitationCodeReq {
  repeated string codes = 1;
}

message DelInvitationCodeResp {}

message InvitationRegister {
  string invitationCode = 1;
  int64 createTime = 2;
  string usedUserID = 3;
  openim.openchat.common.UserPublicInfo usedUser = 4;
}

message SearchInvitationCodeReq {
  int32 status = 1;
  repeated string userIDs = 2;
  repeated string codes = 3;
  string keyword = 4;
  openim.sdkws.RequestPagination pagination = 5;
}

message SearchInvitationCodeResp {
  uint32 total = 1;
  repeated InvitationRegister list = 2;
}

// ################### User Login IP Limit ###################

message SearchUserIPLimitLoginReq {
  string keyword = 1;
  openim.sdkws.RequestPagination pagination = 2;
}

message LimitUserLoginIP {
  string userID = 1;
  string ip = 2;
  int64 createTime = 3;
  openim.openchat.common.UserPublicInfo user = 4;
}

message SearchUserIPLimitLoginResp {
  uint32 total = 1;
  repeated LimitUserLoginIP limits = 2;
}

message UserIPLimitLogin {
  string userID = 1;
  string ip = 2;
}

message AddUserIPLimitLoginReq {
  repeated UserIPLimitLogin limits = 1;
}

message AddUserIPLimitLoginResp {}

message DelUserIPLimitLoginReq {
  repeated UserIPLimitLogin limits = 1;
}

message DelUserIPLimitLoginResp {}

// ################### User IP Limit ###################

message IPForbidden {
  string ip = 1;
  bool limitRegister = 2;
  bool limitLogin = 3;
  int64 createTime = 4;
}

message IPForbiddenAdd {
  string ip = 1;
  bool limitRegister = 2;
  bool limitLogin = 3;
}

message SearchIPForbiddenReq {
  string keyword = 1;
  int32 status = 2;
  openim.sdkws.RequestPagination pagination = 3;
}

message SearchIPForbiddenResp {
  uint32 total = 1;
  repeated IPForbidden forbiddens = 2;
}

message AddIPForbiddenReq {
  repeated IPForbiddenAdd forbiddens = 1;
}
message AddIPForbiddenResp {}

message DelIPForbiddenReq {
  repeated string ips = 1;
}
message DelIPForbiddenResp {}

// ################### login out ###################
message CancellationUserReq {
  string userID = 1;
  string reason = 2;
}

message CancellationUserResp {}

// ################### Block User, Unblock User ###################
message BlockUserReq {
  string userID = 1;
  string reason = 2;
}

message BlockUserResp {}

message UnblockUserReq {
  repeated string userIDs = 1;
}

message UnblockUserResp {}

message SearchBlockUserReq {
  string keyword = 1;
  openim.sdkws.RequestPagination pagination = 2;
}

message BlockUserInfo {
  string userID = 1;
  string account = 2;
  string phoneNumber = 3;
  string areaCode = 4;
  string email = 5;
  string nickname = 6;
  string faceURL = 7;
  int32 gender = 8;
  string reason = 9;
  string opUserID = 10;
  int64 createTime = 11;
}

message SearchBlockUserResp {
  uint32 total = 1;
  repeated BlockUserInfo users = 2;
}

message FindUserBlockInfoReq {
  repeated string userIDs = 1;
}

message BlockInfo {
  string userID = 1;
  string reason = 2;
  string opUserID = 3;
  int64 createTime = 4;
}

message FindUserBlockInfoResp {
  repeated BlockInfo blocks = 2;
}

// ################### User Limit ###################
message CheckRegisterForbiddenReq {
  string ip = 1;
}

message CheckRegisterForbiddenResp {}

message CheckLoginForbiddenReq {
  string ip = 1;
  string userID = 2;
}

message CheckLoginForbiddenResp {}

// ################### Client Config ###################
message SetClientConfigReq {
  map<string, string> config = 1;
}

message SetClientConfigResp {}

message DelClientConfigReq {
  repeated string keys = 1;
}

message DelClientConfigResp {}

message GetClientConfigReq {}

message GetClientConfigResp {
  map<string, string> config = 1;
}

// ################### mini program ###################

message AddAppletReq {
  string id = 1;
  string name = 2;
  string appID = 3;
  string icon = 4;
  string url = 5;
  string md5 = 6;
  int64 size = 7;
  string version = 8;
  uint32 priority = 9;
  uint32 status = 10;
  int64 createTime = 11;
}

message AddAppletResp {}

message DelAppletReq {
  repeated string appletIds = 1;
}

message DelAppletResp {}

message UpdateAppletReq {
  string id = 1;
  openim.protobuf.StringValue name = 2;
  openim.protobuf.StringValue appID = 3;
  openim.protobuf.StringValue icon = 4;
  openim.protobuf.StringValue url = 5;
  openim.protobuf.StringValue md5 = 6;
  openim.protobuf.Int64Value size = 7;
  openim.protobuf.StringValue version = 8;
  openim.protobuf.UInt32Value priority = 9;
  openim.protobuf.UInt32Value status = 10;
  openim.protobuf.Int64Value createTime = 11;
}

message UpdateAppletResp {}

message FindAppletReq {}

message FindAppletResp {
  repeated openim.openchat.common.AppletInfo applets = 1;
}

message SearchAppletReq {
  string keyword = 1;
  openim.sdkws.RequestPagination pagination = 2;
}

message SearchAppletResp {
  uint32 total = 1;
  repeated openim.openchat.common.AppletInfo applets = 2;
}

service chat {
  // Edit personal information - called by the user or an administrator
  rpc UpdateUserInfo(UpdateUserInfoReq) returns (UpdateUserInfoResp) {
    option (google.api.http) = {
      post:"/chat/user/update"
      body: "*"
    };
  };
  rpc AddUserAccount(AddUserAccountReq) returns (AddUserAccountResp);
  // Get user's public information - called by strangers
  rpc SearchUserPublicInfo(SearchUserPublicInfoReq) returns (SearchUserPublicInfoResp);
  rpc FindUserPublicInfo(FindUserPublicInfoReq) returns (FindUserPublicInfoResp);
  // Search user information - called by administrators, other users get public fields
  rpc SearchUserFullInfo(SearchUserFullInfoReq) returns (SearchUserFullInfoResp) {
    option (google.api.http) = {
      post:"/chat/user/search/full"
      body: "*"
    };
  };
  rpc FindUserFullInfo(FindUserFullInfoReq) returns (FindUserFullInfoResp) {
    option (google.api.http) = {
      post:"/chat/user/find/full"
      body: "*"
    };
  };

  rpc SendVerifyImgCode(SendVerifyImgCodeReq) returns (SendVerifyImgCodeResp){
    option (google.api.http) = {
      post:"/chat/account/imgcode/send"
      body: "*"
    };
  };
  rpc VerifyImgCode(VerifyImgCodeReq) returns (VerifyImgCodeResp) {
    option (google.api.http) = {
      post:"/chat/account/imgcode/verify"
      body: "*"
    };
  };

  rpc SendVerifyCode(SendVerifyCodeReq) returns (SendVerifyCodeResp) {
    option (google.api.http) = {
      post:"/chat/account/code/send"
      body: "*"
    };
  };
  rpc VerifyCode(VerifyCodeReq) returns (VerifyCodeResp) {
    option (google.api.http) = {
      post:"/chat/account/code/verify"
      body: "*"
    };
  };
  rpc RegisterUser(RegisterUserReq) returns (RegisterUserResp){
    option (google.api.http) = {
      post:"/chat/account/register"
      body: "*"
    };
  };
  rpc Login(LoginReq) returns (LoginResp) {
    option (google.api.http) = {
      post:"/chat/account/login"
      body: "*"
    };
  };
  rpc ResetPassword(ResetPasswordReq) returns (ResetPasswordResp) {
    option (google.api.http) = {
      post:"/chat/account/password/reset"
      body: "*"
    };
  };
  rpc ChangePassword(ChangePasswordReq) returns (ChangePasswordResp);
  rpc CheckUserExist(CheckUserExistReq) returns (CheckUserExistResp);
  rpc DelUserAccount(DelUserAccountReq) returns (DelUserAccountResp);

  rpc FindUserAccount(FindUserAccountReq) returns (FindUserAccountResp);
  rpc FindAccountUser(FindAccountUserReq) returns (FindAccountUserResp);
  rpc OpenIMCallback(OpenIMCallbackReq) returns (OpenIMCallbackResp);

  // Statistics
  rpc UserLoginCount(UserLoginCountReq) returns (UserLoginCountResp);

  rpc SearchUserInfo(SearchUserInfoReq) returns (SearchUserInfoResp);

  // Audio/video call and video meeting
  rpc GetTokenForVideoMeeting(GetTokenForVideoMeetingReq) returns (GetTokenForVideoMeetingResp);

  // Allow Register
  rpc SetAllowRegister(SetAllowRegisterReq) returns(SetAllowRegisterResp);
  rpc GetAllowRegister(GetAllowRegisterReq) returns(GetAllowRegisterResp);

  // Login Record
  rpc FindLoginRecord(FindLoginRecordReq) returns (FindLoginRecordResp);

  // version
  rpc UpdateVersionInfo(UpdateVersionReq) returns (UpdateVersionResp);
  rpc VersionInfo(VersionInfoReq) returns (VersionInfoResp);
  rpc AddVersion(AddVersionReq) returns (AddVersionResp);
  rpc DelVersion(DelVersionReq) returns (DelVersionResp);
  rpc SearchVersion(SearchVersionReq) returns (SearchVersionResp);
  rpc CheckVersion(CheckVersionReq) returns(CheckVersionResp);

  // Add Remove Get default friend list on registration
  rpc AddDefaultFriend(AddDefaultFriendReq) returns (AddDefaultFriendResp);
  rpc DelDefaultFriend(DelDefaultFriendReq) returns (DelDefaultFriendResp);
  rpc FindDefaultFriend(FindDefaultFriendReq) returns (FindDefaultFriendResp);
  rpc SearchDefaultFriend(SearchDefaultFriendReq) returns (SearchDefaultFriendResp);

  rpc AddDefaultGroup(AddDefaultGroupReq) returns (AddDefaultGroupResp);
  rpc DelDefaultGroup(DelDefaultGroupReq) returns (DelDefaultGroupResp);
  rpc FindDefaultGroup(FindDefaultGroupReq) returns (FindDefaultGroupResp);
  rpc SearchDefaultGroup(SearchDefaultGroupReq) returns (SearchDefaultGroupResp);

  // Invitation Code Generate Query Get
  rpc AddInvitationCode(AddInvitationCodeReq) returns (AddInvitationCodeResp);
  rpc GenInvitationCode(GenInvitationCodeReq) returns (GenInvitationCodeResp);
  rpc FindInvitationCode(FindInvitationCodeReq) returns (FindInvitationCodeResp);
  rpc UseInvitationCode(UseInvitationCodeReq) returns (UseInvitationCodeResp);
  rpc DelInvitationCode(DelInvitationCodeReq) returns (DelInvitationCodeResp);
  rpc SearchInvitationCode(SearchInvitationCodeReq) returns (SearchInvitationCodeResp);

  // User login ip limit Query Add Remove
  rpc SearchUserIPLimitLogin(SearchUserIPLimitLoginReq) returns (SearchUserIPLimitLoginResp);
  rpc AddUserIPLimitLogin(AddUserIPLimitLoginReq) returns (AddUserIPLimitLoginResp);
  rpc DelUserIPLimitLogin(DelUserIPLimitLoginReq) returns (DelUserIPLimitLoginResp);

  // Prohibit users from registering at certain ip Query Add Remove
  rpc SearchIPForbidden(SearchIPForbiddenReq) returns (SearchIPForbiddenResp);
  rpc AddIPForbidden(AddIPForbiddenReq) returns (AddIPForbiddenResp);
  rpc DelIPForbidden(DelIPForbiddenReq) returns (DelIPForbiddenResp);

  // User Management Related Add Block/Unblock Pull
  rpc CancellationUser(CancellationUserReq) returns (CancellationUserResp);
  rpc BlockUser(BlockUserReq) returns (BlockUserResp);
  rpc UnblockUser(UnblockUserReq) returns (UnblockUserResp);
  rpc SearchBlockUser(SearchBlockUserReq) returns (SearchBlockUserResp);
  rpc FindUserBlockInfo(FindUserBlockInfoReq) returns (FindUserBlockInfoResp);

  rpc CheckRegisterForbidden(CheckRegisterForbiddenReq) returns (CheckRegisterForbiddenResp);
  rpc CheckLoginForbidden(CheckLoginForbiddenReq) returns (CheckLoginForbiddenResp);

  // Client Configuration
  rpc GetClientConfig(GetClientConfigReq) returns (GetClientConfigResp);
  rpc SetClientConfig(SetClientConfigReq) returns (SetClientConfigResp);
  rpc DelClientConfig(DelClientConfigReq) returns (DelClientConfigResp);

  // app
  rpc AddApplet(AddAppletReq) returns (AddAppletResp);
  rpc DelApplet(DelAppletReq) returns (DelAppletResp);
  rpc UpdateApplet(UpdateAppletReq) returns (UpdateAppletResp);
  rpc FindApplet(FindAppletReq) returns (FindAppletResp);
  rpc SearchApplet(SearchAppletReq) returns (SearchAppletResp);
}
