// Copyright Â© 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: openchat/chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chat_UpdateUserInfo_FullMethodName          = "/openim.openchat.chat.chat/UpdateUserInfo"
	Chat_AddUserAccount_FullMethodName          = "/openim.openchat.chat.chat/AddUserAccount"
	Chat_SearchUserPublicInfo_FullMethodName    = "/openim.openchat.chat.chat/SearchUserPublicInfo"
	Chat_FindUserPublicInfo_FullMethodName      = "/openim.openchat.chat.chat/FindUserPublicInfo"
	Chat_SearchUserFullInfo_FullMethodName      = "/openim.openchat.chat.chat/SearchUserFullInfo"
	Chat_FindUserFullInfo_FullMethodName        = "/openim.openchat.chat.chat/FindUserFullInfo"
	Chat_SendVerifyImgCode_FullMethodName       = "/openim.openchat.chat.chat/SendVerifyImgCode"
	Chat_VerifyImgCode_FullMethodName           = "/openim.openchat.chat.chat/VerifyImgCode"
	Chat_SendVerifyCode_FullMethodName          = "/openim.openchat.chat.chat/SendVerifyCode"
	Chat_VerifyCode_FullMethodName              = "/openim.openchat.chat.chat/VerifyCode"
	Chat_RegisterUser_FullMethodName            = "/openim.openchat.chat.chat/RegisterUser"
	Chat_Login_FullMethodName                   = "/openim.openchat.chat.chat/Login"
	Chat_ResetPassword_FullMethodName           = "/openim.openchat.chat.chat/ResetPassword"
	Chat_ChangePassword_FullMethodName          = "/openim.openchat.chat.chat/ChangePassword"
	Chat_CheckUserExist_FullMethodName          = "/openim.openchat.chat.chat/CheckUserExist"
	Chat_DelUserAccount_FullMethodName          = "/openim.openchat.chat.chat/DelUserAccount"
	Chat_FindUserAccount_FullMethodName         = "/openim.openchat.chat.chat/FindUserAccount"
	Chat_FindAccountUser_FullMethodName         = "/openim.openchat.chat.chat/FindAccountUser"
	Chat_OpenIMCallback_FullMethodName          = "/openim.openchat.chat.chat/OpenIMCallback"
	Chat_UserLoginCount_FullMethodName          = "/openim.openchat.chat.chat/UserLoginCount"
	Chat_SearchUserInfo_FullMethodName          = "/openim.openchat.chat.chat/SearchUserInfo"
	Chat_GetTokenForVideoMeeting_FullMethodName = "/openim.openchat.chat.chat/GetTokenForVideoMeeting"
	Chat_SetAllowRegister_FullMethodName        = "/openim.openchat.chat.chat/SetAllowRegister"
	Chat_GetAllowRegister_FullMethodName        = "/openim.openchat.chat.chat/GetAllowRegister"
	Chat_FindLoginRecord_FullMethodName         = "/openim.openchat.chat.chat/FindLoginRecord"
	Chat_CreateToken_FullMethodName             = "/openim.openchat.chat.chat/CreateToken"
	Chat_ParseToken_FullMethodName              = "/openim.openchat.chat.chat/ParseToken"
	Chat_GetUserToken_FullMethodName            = "/openim.openchat.chat.chat/GetUserToken"
	Chat_InvalidateToken_FullMethodName         = "/openim.openchat.chat.chat/InvalidateToken"
	Chat_UpdateVersionInfo_FullMethodName       = "/openim.openchat.chat.chat/UpdateVersionInfo"
	Chat_VersionInfo_FullMethodName             = "/openim.openchat.chat.chat/VersionInfo"
	Chat_AddVersion_FullMethodName              = "/openim.openchat.chat.chat/AddVersion"
	Chat_DelVersion_FullMethodName              = "/openim.openchat.chat.chat/DelVersion"
	Chat_SearchVersion_FullMethodName           = "/openim.openchat.chat.chat/SearchVersion"
	Chat_CheckVersion_FullMethodName            = "/openim.openchat.chat.chat/CheckVersion"
	Chat_AddDefaultFriend_FullMethodName        = "/openim.openchat.chat.chat/AddDefaultFriend"
	Chat_DelDefaultFriend_FullMethodName        = "/openim.openchat.chat.chat/DelDefaultFriend"
	Chat_FindDefaultFriend_FullMethodName       = "/openim.openchat.chat.chat/FindDefaultFriend"
	Chat_SearchDefaultFriend_FullMethodName     = "/openim.openchat.chat.chat/SearchDefaultFriend"
	Chat_AddDefaultGroup_FullMethodName         = "/openim.openchat.chat.chat/AddDefaultGroup"
	Chat_DelDefaultGroup_FullMethodName         = "/openim.openchat.chat.chat/DelDefaultGroup"
	Chat_FindDefaultGroup_FullMethodName        = "/openim.openchat.chat.chat/FindDefaultGroup"
	Chat_SearchDefaultGroup_FullMethodName      = "/openim.openchat.chat.chat/SearchDefaultGroup"
	Chat_AddInvitationCode_FullMethodName       = "/openim.openchat.chat.chat/AddInvitationCode"
	Chat_GenInvitationCode_FullMethodName       = "/openim.openchat.chat.chat/GenInvitationCode"
	Chat_FindInvitationCode_FullMethodName      = "/openim.openchat.chat.chat/FindInvitationCode"
	Chat_UseInvitationCode_FullMethodName       = "/openim.openchat.chat.chat/UseInvitationCode"
	Chat_DelInvitationCode_FullMethodName       = "/openim.openchat.chat.chat/DelInvitationCode"
	Chat_SearchInvitationCode_FullMethodName    = "/openim.openchat.chat.chat/SearchInvitationCode"
	Chat_SearchUserIPLimitLogin_FullMethodName  = "/openim.openchat.chat.chat/SearchUserIPLimitLogin"
	Chat_AddUserIPLimitLogin_FullMethodName     = "/openim.openchat.chat.chat/AddUserIPLimitLogin"
	Chat_DelUserIPLimitLogin_FullMethodName     = "/openim.openchat.chat.chat/DelUserIPLimitLogin"
	Chat_SearchIPForbidden_FullMethodName       = "/openim.openchat.chat.chat/SearchIPForbidden"
	Chat_AddIPForbidden_FullMethodName          = "/openim.openchat.chat.chat/AddIPForbidden"
	Chat_DelIPForbidden_FullMethodName          = "/openim.openchat.chat.chat/DelIPForbidden"
	Chat_CancellationUser_FullMethodName        = "/openim.openchat.chat.chat/CancellationUser"
	Chat_BlockUser_FullMethodName               = "/openim.openchat.chat.chat/BlockUser"
	Chat_UnblockUser_FullMethodName             = "/openim.openchat.chat.chat/UnblockUser"
	Chat_SearchBlockUser_FullMethodName         = "/openim.openchat.chat.chat/SearchBlockUser"
	Chat_FindUserBlockInfo_FullMethodName       = "/openim.openchat.chat.chat/FindUserBlockInfo"
	Chat_CheckRegisterForbidden_FullMethodName  = "/openim.openchat.chat.chat/CheckRegisterForbidden"
	Chat_CheckLoginForbidden_FullMethodName     = "/openim.openchat.chat.chat/CheckLoginForbidden"
	Chat_GetClientConfig_FullMethodName         = "/openim.openchat.chat.chat/GetClientConfig"
	Chat_SetClientConfig_FullMethodName         = "/openim.openchat.chat.chat/SetClientConfig"
	Chat_DelClientConfig_FullMethodName         = "/openim.openchat.chat.chat/DelClientConfig"
	Chat_AddApplet_FullMethodName               = "/openim.openchat.chat.chat/AddApplet"
	Chat_DelApplet_FullMethodName               = "/openim.openchat.chat.chat/DelApplet"
	Chat_UpdateApplet_FullMethodName            = "/openim.openchat.chat.chat/UpdateApplet"
	Chat_FindApplet_FullMethodName              = "/openim.openchat.chat.chat/FindApplet"
	Chat_SearchApplet_FullMethodName            = "/openim.openchat.chat.chat/SearchApplet"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// Edit personal information - called by the user or an administrator
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	AddUserAccount(ctx context.Context, in *AddUserAccountReq, opts ...grpc.CallOption) (*AddUserAccountResp, error)
	// Get user's public information - called by strangers
	SearchUserPublicInfo(ctx context.Context, in *SearchUserPublicInfoReq, opts ...grpc.CallOption) (*SearchUserPublicInfoResp, error)
	FindUserPublicInfo(ctx context.Context, in *FindUserPublicInfoReq, opts ...grpc.CallOption) (*FindUserPublicInfoResp, error)
	// Search user information - called by administrators, other users get public fields
	SearchUserFullInfo(ctx context.Context, in *SearchUserFullInfoReq, opts ...grpc.CallOption) (*SearchUserFullInfoResp, error)
	FindUserFullInfo(ctx context.Context, in *FindUserFullInfoReq, opts ...grpc.CallOption) (*FindUserFullInfoResp, error)
	SendVerifyImgCode(ctx context.Context, in *SendVerifyImgCodeReq, opts ...grpc.CallOption) (*SendVerifyImgCodeResp, error)
	VerifyImgCode(ctx context.Context, in *VerifyImgCodeReq, opts ...grpc.CallOption) (*VerifyImgCodeResp, error)
	SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, opts ...grpc.CallOption) (*SendVerifyCodeResp, error)
	VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeResp, error)
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	CheckUserExist(ctx context.Context, in *CheckUserExistReq, opts ...grpc.CallOption) (*CheckUserExistResp, error)
	DelUserAccount(ctx context.Context, in *DelUserAccountReq, opts ...grpc.CallOption) (*DelUserAccountResp, error)
	FindUserAccount(ctx context.Context, in *FindUserAccountReq, opts ...grpc.CallOption) (*FindUserAccountResp, error)
	FindAccountUser(ctx context.Context, in *FindAccountUserReq, opts ...grpc.CallOption) (*FindAccountUserResp, error)
	OpenIMCallback(ctx context.Context, in *OpenIMCallbackReq, opts ...grpc.CallOption) (*OpenIMCallbackResp, error)
	// Statistics
	UserLoginCount(ctx context.Context, in *UserLoginCountReq, opts ...grpc.CallOption) (*UserLoginCountResp, error)
	SearchUserInfo(ctx context.Context, in *SearchUserInfoReq, opts ...grpc.CallOption) (*SearchUserInfoResp, error)
	// Audio/video call and video meeting
	GetTokenForVideoMeeting(ctx context.Context, in *GetTokenForVideoMeetingReq, opts ...grpc.CallOption) (*GetTokenForVideoMeetingResp, error)
	// Allow Register
	SetAllowRegister(ctx context.Context, in *SetAllowRegisterReq, opts ...grpc.CallOption) (*SetAllowRegisterResp, error)
	GetAllowRegister(ctx context.Context, in *GetAllowRegisterReq, opts ...grpc.CallOption) (*GetAllowRegisterResp, error)
	// Login Record
	FindLoginRecord(ctx context.Context, in *FindLoginRecordReq, opts ...grpc.CallOption) (*FindLoginRecordResp, error)
	// create token
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error)
	// parse token
	ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error)
	// get user token
	GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error)
	// invalidate token
	InvalidateToken(ctx context.Context, in *InvalidateTokenReq, opts ...grpc.CallOption) (*InvalidateTokenResp, error)
	// version
	UpdateVersionInfo(ctx context.Context, in *UpdateVersionReq, opts ...grpc.CallOption) (*UpdateVersionResp, error)
	VersionInfo(ctx context.Context, in *VersionInfoReq, opts ...grpc.CallOption) (*VersionInfoResp, error)
	AddVersion(ctx context.Context, in *AddVersionReq, opts ...grpc.CallOption) (*AddVersionResp, error)
	DelVersion(ctx context.Context, in *DelVersionReq, opts ...grpc.CallOption) (*DelVersionResp, error)
	SearchVersion(ctx context.Context, in *SearchVersionReq, opts ...grpc.CallOption) (*SearchVersionResp, error)
	CheckVersion(ctx context.Context, in *CheckVersionReq, opts ...grpc.CallOption) (*CheckVersionResp, error)
	// Add Remove Get default friend list on registration
	AddDefaultFriend(ctx context.Context, in *AddDefaultFriendReq, opts ...grpc.CallOption) (*AddDefaultFriendResp, error)
	DelDefaultFriend(ctx context.Context, in *DelDefaultFriendReq, opts ...grpc.CallOption) (*DelDefaultFriendResp, error)
	FindDefaultFriend(ctx context.Context, in *FindDefaultFriendReq, opts ...grpc.CallOption) (*FindDefaultFriendResp, error)
	SearchDefaultFriend(ctx context.Context, in *SearchDefaultFriendReq, opts ...grpc.CallOption) (*SearchDefaultFriendResp, error)
	// Add Remove Get default group list on registration
	AddDefaultGroup(ctx context.Context, in *AddDefaultGroupReq, opts ...grpc.CallOption) (*AddDefaultGroupResp, error)
	DelDefaultGroup(ctx context.Context, in *DelDefaultGroupReq, opts ...grpc.CallOption) (*DelDefaultGroupResp, error)
	FindDefaultGroup(ctx context.Context, in *FindDefaultGroupReq, opts ...grpc.CallOption) (*FindDefaultGroupResp, error)
	SearchDefaultGroup(ctx context.Context, in *SearchDefaultGroupReq, opts ...grpc.CallOption) (*SearchDefaultGroupResp, error)
	// Invitation Code Generate Query Get
	AddInvitationCode(ctx context.Context, in *AddInvitationCodeReq, opts ...grpc.CallOption) (*AddInvitationCodeResp, error)
	GenInvitationCode(ctx context.Context, in *GenInvitationCodeReq, opts ...grpc.CallOption) (*GenInvitationCodeResp, error)
	FindInvitationCode(ctx context.Context, in *FindInvitationCodeReq, opts ...grpc.CallOption) (*FindInvitationCodeResp, error)
	UseInvitationCode(ctx context.Context, in *UseInvitationCodeReq, opts ...grpc.CallOption) (*UseInvitationCodeResp, error)
	DelInvitationCode(ctx context.Context, in *DelInvitationCodeReq, opts ...grpc.CallOption) (*DelInvitationCodeResp, error)
	SearchInvitationCode(ctx context.Context, in *SearchInvitationCodeReq, opts ...grpc.CallOption) (*SearchInvitationCodeResp, error)
	// User login ip limit Query Add Remove
	SearchUserIPLimitLogin(ctx context.Context, in *SearchUserIPLimitLoginReq, opts ...grpc.CallOption) (*SearchUserIPLimitLoginResp, error)
	AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error)
	DelUserIPLimitLogin(ctx context.Context, in *DelUserIPLimitLoginReq, opts ...grpc.CallOption) (*DelUserIPLimitLoginResp, error)
	// Prohibit users from registering at certain ip Query Add Remove
	SearchIPForbidden(ctx context.Context, in *SearchIPForbiddenReq, opts ...grpc.CallOption) (*SearchIPForbiddenResp, error)
	AddIPForbidden(ctx context.Context, in *AddIPForbiddenReq, opts ...grpc.CallOption) (*AddIPForbiddenResp, error)
	DelIPForbidden(ctx context.Context, in *DelIPForbiddenReq, opts ...grpc.CallOption) (*DelIPForbiddenResp, error)
	// User Management Related Add Block/Unblock Pull
	CancellationUser(ctx context.Context, in *CancellationUserReq, opts ...grpc.CallOption) (*CancellationUserResp, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error)
	SearchBlockUser(ctx context.Context, in *SearchBlockUserReq, opts ...grpc.CallOption) (*SearchBlockUserResp, error)
	FindUserBlockInfo(ctx context.Context, in *FindUserBlockInfoReq, opts ...grpc.CallOption) (*FindUserBlockInfoResp, error)
	// check
	CheckRegisterForbidden(ctx context.Context, in *CheckRegisterForbiddenReq, opts ...grpc.CallOption) (*CheckRegisterForbiddenResp, error)
	CheckLoginForbidden(ctx context.Context, in *CheckLoginForbiddenReq, opts ...grpc.CallOption) (*CheckLoginForbiddenResp, error)
	// Client Configuration
	GetClientConfig(ctx context.Context, in *GetClientConfigReq, opts ...grpc.CallOption) (*GetClientConfigResp, error)
	SetClientConfig(ctx context.Context, in *SetClientConfigReq, opts ...grpc.CallOption) (*SetClientConfigResp, error)
	DelClientConfig(ctx context.Context, in *DelClientConfigReq, opts ...grpc.CallOption) (*DelClientConfigResp, error)
	// app
	AddApplet(ctx context.Context, in *AddAppletReq, opts ...grpc.CallOption) (*AddAppletResp, error)
	DelApplet(ctx context.Context, in *DelAppletReq, opts ...grpc.CallOption) (*DelAppletResp, error)
	UpdateApplet(ctx context.Context, in *UpdateAppletReq, opts ...grpc.CallOption) (*UpdateAppletResp, error)
	FindApplet(ctx context.Context, in *FindAppletReq, opts ...grpc.CallOption) (*FindAppletResp, error)
	SearchApplet(ctx context.Context, in *SearchAppletReq, opts ...grpc.CallOption) (*SearchAppletResp, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, Chat_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddUserAccount(ctx context.Context, in *AddUserAccountReq, opts ...grpc.CallOption) (*AddUserAccountResp, error) {
	out := new(AddUserAccountResp)
	err := c.cc.Invoke(ctx, Chat_AddUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserPublicInfo(ctx context.Context, in *SearchUserPublicInfoReq, opts ...grpc.CallOption) (*SearchUserPublicInfoResp, error) {
	out := new(SearchUserPublicInfoResp)
	err := c.cc.Invoke(ctx, Chat_SearchUserPublicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserPublicInfo(ctx context.Context, in *FindUserPublicInfoReq, opts ...grpc.CallOption) (*FindUserPublicInfoResp, error) {
	out := new(FindUserPublicInfoResp)
	err := c.cc.Invoke(ctx, Chat_FindUserPublicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserFullInfo(ctx context.Context, in *SearchUserFullInfoReq, opts ...grpc.CallOption) (*SearchUserFullInfoResp, error) {
	out := new(SearchUserFullInfoResp)
	err := c.cc.Invoke(ctx, Chat_SearchUserFullInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserFullInfo(ctx context.Context, in *FindUserFullInfoReq, opts ...grpc.CallOption) (*FindUserFullInfoResp, error) {
	out := new(FindUserFullInfoResp)
	err := c.cc.Invoke(ctx, Chat_FindUserFullInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendVerifyImgCode(ctx context.Context, in *SendVerifyImgCodeReq, opts ...grpc.CallOption) (*SendVerifyImgCodeResp, error) {
	out := new(SendVerifyImgCodeResp)
	err := c.cc.Invoke(ctx, Chat_SendVerifyImgCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) VerifyImgCode(ctx context.Context, in *VerifyImgCodeReq, opts ...grpc.CallOption) (*VerifyImgCodeResp, error) {
	out := new(VerifyImgCodeResp)
	err := c.cc.Invoke(ctx, Chat_VerifyImgCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, opts ...grpc.CallOption) (*SendVerifyCodeResp, error) {
	out := new(SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, Chat_SendVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeResp, error) {
	out := new(VerifyCodeResp)
	err := c.cc.Invoke(ctx, Chat_VerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error) {
	out := new(RegisterUserResp)
	err := c.cc.Invoke(ctx, Chat_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Chat_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error) {
	out := new(ResetPasswordResp)
	err := c.cc.Invoke(ctx, Chat_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, Chat_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CheckUserExist(ctx context.Context, in *CheckUserExistReq, opts ...grpc.CallOption) (*CheckUserExistResp, error) {
	out := new(CheckUserExistResp)
	err := c.cc.Invoke(ctx, Chat_CheckUserExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelUserAccount(ctx context.Context, in *DelUserAccountReq, opts ...grpc.CallOption) (*DelUserAccountResp, error) {
	out := new(DelUserAccountResp)
	err := c.cc.Invoke(ctx, Chat_DelUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserAccount(ctx context.Context, in *FindUserAccountReq, opts ...grpc.CallOption) (*FindUserAccountResp, error) {
	out := new(FindUserAccountResp)
	err := c.cc.Invoke(ctx, Chat_FindUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindAccountUser(ctx context.Context, in *FindAccountUserReq, opts ...grpc.CallOption) (*FindAccountUserResp, error) {
	out := new(FindAccountUserResp)
	err := c.cc.Invoke(ctx, Chat_FindAccountUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) OpenIMCallback(ctx context.Context, in *OpenIMCallbackReq, opts ...grpc.CallOption) (*OpenIMCallbackResp, error) {
	out := new(OpenIMCallbackResp)
	err := c.cc.Invoke(ctx, Chat_OpenIMCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UserLoginCount(ctx context.Context, in *UserLoginCountReq, opts ...grpc.CallOption) (*UserLoginCountResp, error) {
	out := new(UserLoginCountResp)
	err := c.cc.Invoke(ctx, Chat_UserLoginCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserInfo(ctx context.Context, in *SearchUserInfoReq, opts ...grpc.CallOption) (*SearchUserInfoResp, error) {
	out := new(SearchUserInfoResp)
	err := c.cc.Invoke(ctx, Chat_SearchUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetTokenForVideoMeeting(ctx context.Context, in *GetTokenForVideoMeetingReq, opts ...grpc.CallOption) (*GetTokenForVideoMeetingResp, error) {
	out := new(GetTokenForVideoMeetingResp)
	err := c.cc.Invoke(ctx, Chat_GetTokenForVideoMeeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SetAllowRegister(ctx context.Context, in *SetAllowRegisterReq, opts ...grpc.CallOption) (*SetAllowRegisterResp, error) {
	out := new(SetAllowRegisterResp)
	err := c.cc.Invoke(ctx, Chat_SetAllowRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetAllowRegister(ctx context.Context, in *GetAllowRegisterReq, opts ...grpc.CallOption) (*GetAllowRegisterResp, error) {
	out := new(GetAllowRegisterResp)
	err := c.cc.Invoke(ctx, Chat_GetAllowRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindLoginRecord(ctx context.Context, in *FindLoginRecordReq, opts ...grpc.CallOption) (*FindLoginRecordResp, error) {
	out := new(FindLoginRecordResp)
	err := c.cc.Invoke(ctx, Chat_FindLoginRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error) {
	out := new(CreateTokenResp)
	err := c.cc.Invoke(ctx, Chat_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error) {
	out := new(ParseTokenResp)
	err := c.cc.Invoke(ctx, Chat_ParseToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error) {
	out := new(GetUserTokenResp)
	err := c.cc.Invoke(ctx, Chat_GetUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) InvalidateToken(ctx context.Context, in *InvalidateTokenReq, opts ...grpc.CallOption) (*InvalidateTokenResp, error) {
	out := new(InvalidateTokenResp)
	err := c.cc.Invoke(ctx, Chat_InvalidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateVersionInfo(ctx context.Context, in *UpdateVersionReq, opts ...grpc.CallOption) (*UpdateVersionResp, error) {
	out := new(UpdateVersionResp)
	err := c.cc.Invoke(ctx, Chat_UpdateVersionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) VersionInfo(ctx context.Context, in *VersionInfoReq, opts ...grpc.CallOption) (*VersionInfoResp, error) {
	out := new(VersionInfoResp)
	err := c.cc.Invoke(ctx, Chat_VersionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddVersion(ctx context.Context, in *AddVersionReq, opts ...grpc.CallOption) (*AddVersionResp, error) {
	out := new(AddVersionResp)
	err := c.cc.Invoke(ctx, Chat_AddVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelVersion(ctx context.Context, in *DelVersionReq, opts ...grpc.CallOption) (*DelVersionResp, error) {
	out := new(DelVersionResp)
	err := c.cc.Invoke(ctx, Chat_DelVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchVersion(ctx context.Context, in *SearchVersionReq, opts ...grpc.CallOption) (*SearchVersionResp, error) {
	out := new(SearchVersionResp)
	err := c.cc.Invoke(ctx, Chat_SearchVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CheckVersion(ctx context.Context, in *CheckVersionReq, opts ...grpc.CallOption) (*CheckVersionResp, error) {
	out := new(CheckVersionResp)
	err := c.cc.Invoke(ctx, Chat_CheckVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddDefaultFriend(ctx context.Context, in *AddDefaultFriendReq, opts ...grpc.CallOption) (*AddDefaultFriendResp, error) {
	out := new(AddDefaultFriendResp)
	err := c.cc.Invoke(ctx, Chat_AddDefaultFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelDefaultFriend(ctx context.Context, in *DelDefaultFriendReq, opts ...grpc.CallOption) (*DelDefaultFriendResp, error) {
	out := new(DelDefaultFriendResp)
	err := c.cc.Invoke(ctx, Chat_DelDefaultFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindDefaultFriend(ctx context.Context, in *FindDefaultFriendReq, opts ...grpc.CallOption) (*FindDefaultFriendResp, error) {
	out := new(FindDefaultFriendResp)
	err := c.cc.Invoke(ctx, Chat_FindDefaultFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchDefaultFriend(ctx context.Context, in *SearchDefaultFriendReq, opts ...grpc.CallOption) (*SearchDefaultFriendResp, error) {
	out := new(SearchDefaultFriendResp)
	err := c.cc.Invoke(ctx, Chat_SearchDefaultFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddDefaultGroup(ctx context.Context, in *AddDefaultGroupReq, opts ...grpc.CallOption) (*AddDefaultGroupResp, error) {
	out := new(AddDefaultGroupResp)
	err := c.cc.Invoke(ctx, Chat_AddDefaultGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelDefaultGroup(ctx context.Context, in *DelDefaultGroupReq, opts ...grpc.CallOption) (*DelDefaultGroupResp, error) {
	out := new(DelDefaultGroupResp)
	err := c.cc.Invoke(ctx, Chat_DelDefaultGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindDefaultGroup(ctx context.Context, in *FindDefaultGroupReq, opts ...grpc.CallOption) (*FindDefaultGroupResp, error) {
	out := new(FindDefaultGroupResp)
	err := c.cc.Invoke(ctx, Chat_FindDefaultGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchDefaultGroup(ctx context.Context, in *SearchDefaultGroupReq, opts ...grpc.CallOption) (*SearchDefaultGroupResp, error) {
	out := new(SearchDefaultGroupResp)
	err := c.cc.Invoke(ctx, Chat_SearchDefaultGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddInvitationCode(ctx context.Context, in *AddInvitationCodeReq, opts ...grpc.CallOption) (*AddInvitationCodeResp, error) {
	out := new(AddInvitationCodeResp)
	err := c.cc.Invoke(ctx, Chat_AddInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GenInvitationCode(ctx context.Context, in *GenInvitationCodeReq, opts ...grpc.CallOption) (*GenInvitationCodeResp, error) {
	out := new(GenInvitationCodeResp)
	err := c.cc.Invoke(ctx, Chat_GenInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindInvitationCode(ctx context.Context, in *FindInvitationCodeReq, opts ...grpc.CallOption) (*FindInvitationCodeResp, error) {
	out := new(FindInvitationCodeResp)
	err := c.cc.Invoke(ctx, Chat_FindInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UseInvitationCode(ctx context.Context, in *UseInvitationCodeReq, opts ...grpc.CallOption) (*UseInvitationCodeResp, error) {
	out := new(UseInvitationCodeResp)
	err := c.cc.Invoke(ctx, Chat_UseInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelInvitationCode(ctx context.Context, in *DelInvitationCodeReq, opts ...grpc.CallOption) (*DelInvitationCodeResp, error) {
	out := new(DelInvitationCodeResp)
	err := c.cc.Invoke(ctx, Chat_DelInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchInvitationCode(ctx context.Context, in *SearchInvitationCodeReq, opts ...grpc.CallOption) (*SearchInvitationCodeResp, error) {
	out := new(SearchInvitationCodeResp)
	err := c.cc.Invoke(ctx, Chat_SearchInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserIPLimitLogin(ctx context.Context, in *SearchUserIPLimitLoginReq, opts ...grpc.CallOption) (*SearchUserIPLimitLoginResp, error) {
	out := new(SearchUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Chat_SearchUserIPLimitLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error) {
	out := new(AddUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Chat_AddUserIPLimitLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelUserIPLimitLogin(ctx context.Context, in *DelUserIPLimitLoginReq, opts ...grpc.CallOption) (*DelUserIPLimitLoginResp, error) {
	out := new(DelUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Chat_DelUserIPLimitLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchIPForbidden(ctx context.Context, in *SearchIPForbiddenReq, opts ...grpc.CallOption) (*SearchIPForbiddenResp, error) {
	out := new(SearchIPForbiddenResp)
	err := c.cc.Invoke(ctx, Chat_SearchIPForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddIPForbidden(ctx context.Context, in *AddIPForbiddenReq, opts ...grpc.CallOption) (*AddIPForbiddenResp, error) {
	out := new(AddIPForbiddenResp)
	err := c.cc.Invoke(ctx, Chat_AddIPForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelIPForbidden(ctx context.Context, in *DelIPForbiddenReq, opts ...grpc.CallOption) (*DelIPForbiddenResp, error) {
	out := new(DelIPForbiddenResp)
	err := c.cc.Invoke(ctx, Chat_DelIPForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CancellationUser(ctx context.Context, in *CancellationUserReq, opts ...grpc.CallOption) (*CancellationUserResp, error) {
	out := new(CancellationUserResp)
	err := c.cc.Invoke(ctx, Chat_CancellationUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, Chat_BlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error) {
	out := new(UnblockUserResp)
	err := c.cc.Invoke(ctx, Chat_UnblockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchBlockUser(ctx context.Context, in *SearchBlockUserReq, opts ...grpc.CallOption) (*SearchBlockUserResp, error) {
	out := new(SearchBlockUserResp)
	err := c.cc.Invoke(ctx, Chat_SearchBlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserBlockInfo(ctx context.Context, in *FindUserBlockInfoReq, opts ...grpc.CallOption) (*FindUserBlockInfoResp, error) {
	out := new(FindUserBlockInfoResp)
	err := c.cc.Invoke(ctx, Chat_FindUserBlockInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CheckRegisterForbidden(ctx context.Context, in *CheckRegisterForbiddenReq, opts ...grpc.CallOption) (*CheckRegisterForbiddenResp, error) {
	out := new(CheckRegisterForbiddenResp)
	err := c.cc.Invoke(ctx, Chat_CheckRegisterForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CheckLoginForbidden(ctx context.Context, in *CheckLoginForbiddenReq, opts ...grpc.CallOption) (*CheckLoginForbiddenResp, error) {
	out := new(CheckLoginForbiddenResp)
	err := c.cc.Invoke(ctx, Chat_CheckLoginForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetClientConfig(ctx context.Context, in *GetClientConfigReq, opts ...grpc.CallOption) (*GetClientConfigResp, error) {
	out := new(GetClientConfigResp)
	err := c.cc.Invoke(ctx, Chat_GetClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SetClientConfig(ctx context.Context, in *SetClientConfigReq, opts ...grpc.CallOption) (*SetClientConfigResp, error) {
	out := new(SetClientConfigResp)
	err := c.cc.Invoke(ctx, Chat_SetClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelClientConfig(ctx context.Context, in *DelClientConfigReq, opts ...grpc.CallOption) (*DelClientConfigResp, error) {
	out := new(DelClientConfigResp)
	err := c.cc.Invoke(ctx, Chat_DelClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddApplet(ctx context.Context, in *AddAppletReq, opts ...grpc.CallOption) (*AddAppletResp, error) {
	out := new(AddAppletResp)
	err := c.cc.Invoke(ctx, Chat_AddApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelApplet(ctx context.Context, in *DelAppletReq, opts ...grpc.CallOption) (*DelAppletResp, error) {
	out := new(DelAppletResp)
	err := c.cc.Invoke(ctx, Chat_DelApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateApplet(ctx context.Context, in *UpdateAppletReq, opts ...grpc.CallOption) (*UpdateAppletResp, error) {
	out := new(UpdateAppletResp)
	err := c.cc.Invoke(ctx, Chat_UpdateApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindApplet(ctx context.Context, in *FindAppletReq, opts ...grpc.CallOption) (*FindAppletResp, error) {
	out := new(FindAppletResp)
	err := c.cc.Invoke(ctx, Chat_FindApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchApplet(ctx context.Context, in *SearchAppletReq, opts ...grpc.CallOption) (*SearchAppletResp, error) {
	out := new(SearchAppletResp)
	err := c.cc.Invoke(ctx, Chat_SearchApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	// Edit personal information - called by the user or an administrator
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	AddUserAccount(context.Context, *AddUserAccountReq) (*AddUserAccountResp, error)
	// Get user's public information - called by strangers
	SearchUserPublicInfo(context.Context, *SearchUserPublicInfoReq) (*SearchUserPublicInfoResp, error)
	FindUserPublicInfo(context.Context, *FindUserPublicInfoReq) (*FindUserPublicInfoResp, error)
	// Search user information - called by administrators, other users get public fields
	SearchUserFullInfo(context.Context, *SearchUserFullInfoReq) (*SearchUserFullInfoResp, error)
	FindUserFullInfo(context.Context, *FindUserFullInfoReq) (*FindUserFullInfoResp, error)
	SendVerifyImgCode(context.Context, *SendVerifyImgCodeReq) (*SendVerifyImgCodeResp, error)
	VerifyImgCode(context.Context, *VerifyImgCodeReq) (*VerifyImgCodeResp, error)
	SendVerifyCode(context.Context, *SendVerifyCodeReq) (*SendVerifyCodeResp, error)
	VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeResp, error)
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	CheckUserExist(context.Context, *CheckUserExistReq) (*CheckUserExistResp, error)
	DelUserAccount(context.Context, *DelUserAccountReq) (*DelUserAccountResp, error)
	FindUserAccount(context.Context, *FindUserAccountReq) (*FindUserAccountResp, error)
	FindAccountUser(context.Context, *FindAccountUserReq) (*FindAccountUserResp, error)
	OpenIMCallback(context.Context, *OpenIMCallbackReq) (*OpenIMCallbackResp, error)
	// Statistics
	UserLoginCount(context.Context, *UserLoginCountReq) (*UserLoginCountResp, error)
	SearchUserInfo(context.Context, *SearchUserInfoReq) (*SearchUserInfoResp, error)
	// Audio/video call and video meeting
	GetTokenForVideoMeeting(context.Context, *GetTokenForVideoMeetingReq) (*GetTokenForVideoMeetingResp, error)
	// Allow Register
	SetAllowRegister(context.Context, *SetAllowRegisterReq) (*SetAllowRegisterResp, error)
	GetAllowRegister(context.Context, *GetAllowRegisterReq) (*GetAllowRegisterResp, error)
	// Login Record
	FindLoginRecord(context.Context, *FindLoginRecordReq) (*FindLoginRecordResp, error)
	// create token
	CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error)
	// parse token
	ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error)
	// get user token
	GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error)
	// invalidate token
	InvalidateToken(context.Context, *InvalidateTokenReq) (*InvalidateTokenResp, error)
	// version
	UpdateVersionInfo(context.Context, *UpdateVersionReq) (*UpdateVersionResp, error)
	VersionInfo(context.Context, *VersionInfoReq) (*VersionInfoResp, error)
	AddVersion(context.Context, *AddVersionReq) (*AddVersionResp, error)
	DelVersion(context.Context, *DelVersionReq) (*DelVersionResp, error)
	SearchVersion(context.Context, *SearchVersionReq) (*SearchVersionResp, error)
	CheckVersion(context.Context, *CheckVersionReq) (*CheckVersionResp, error)
	// Add Remove Get default friend list on registration
	AddDefaultFriend(context.Context, *AddDefaultFriendReq) (*AddDefaultFriendResp, error)
	DelDefaultFriend(context.Context, *DelDefaultFriendReq) (*DelDefaultFriendResp, error)
	FindDefaultFriend(context.Context, *FindDefaultFriendReq) (*FindDefaultFriendResp, error)
	SearchDefaultFriend(context.Context, *SearchDefaultFriendReq) (*SearchDefaultFriendResp, error)
	// Add Remove Get default group list on registration
	AddDefaultGroup(context.Context, *AddDefaultGroupReq) (*AddDefaultGroupResp, error)
	DelDefaultGroup(context.Context, *DelDefaultGroupReq) (*DelDefaultGroupResp, error)
	FindDefaultGroup(context.Context, *FindDefaultGroupReq) (*FindDefaultGroupResp, error)
	SearchDefaultGroup(context.Context, *SearchDefaultGroupReq) (*SearchDefaultGroupResp, error)
	// Invitation Code Generate Query Get
	AddInvitationCode(context.Context, *AddInvitationCodeReq) (*AddInvitationCodeResp, error)
	GenInvitationCode(context.Context, *GenInvitationCodeReq) (*GenInvitationCodeResp, error)
	FindInvitationCode(context.Context, *FindInvitationCodeReq) (*FindInvitationCodeResp, error)
	UseInvitationCode(context.Context, *UseInvitationCodeReq) (*UseInvitationCodeResp, error)
	DelInvitationCode(context.Context, *DelInvitationCodeReq) (*DelInvitationCodeResp, error)
	SearchInvitationCode(context.Context, *SearchInvitationCodeReq) (*SearchInvitationCodeResp, error)
	// User login ip limit Query Add Remove
	SearchUserIPLimitLogin(context.Context, *SearchUserIPLimitLoginReq) (*SearchUserIPLimitLoginResp, error)
	AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error)
	DelUserIPLimitLogin(context.Context, *DelUserIPLimitLoginReq) (*DelUserIPLimitLoginResp, error)
	// Prohibit users from registering at certain ip Query Add Remove
	SearchIPForbidden(context.Context, *SearchIPForbiddenReq) (*SearchIPForbiddenResp, error)
	AddIPForbidden(context.Context, *AddIPForbiddenReq) (*AddIPForbiddenResp, error)
	DelIPForbidden(context.Context, *DelIPForbiddenReq) (*DelIPForbiddenResp, error)
	// User Management Related Add Block/Unblock Pull
	CancellationUser(context.Context, *CancellationUserReq) (*CancellationUserResp, error)
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error)
	SearchBlockUser(context.Context, *SearchBlockUserReq) (*SearchBlockUserResp, error)
	FindUserBlockInfo(context.Context, *FindUserBlockInfoReq) (*FindUserBlockInfoResp, error)
	// check
	CheckRegisterForbidden(context.Context, *CheckRegisterForbiddenReq) (*CheckRegisterForbiddenResp, error)
	CheckLoginForbidden(context.Context, *CheckLoginForbiddenReq) (*CheckLoginForbiddenResp, error)
	// Client Configuration
	GetClientConfig(context.Context, *GetClientConfigReq) (*GetClientConfigResp, error)
	SetClientConfig(context.Context, *SetClientConfigReq) (*SetClientConfigResp, error)
	DelClientConfig(context.Context, *DelClientConfigReq) (*DelClientConfigResp, error)
	// app
	AddApplet(context.Context, *AddAppletReq) (*AddAppletResp, error)
	DelApplet(context.Context, *DelAppletReq) (*DelAppletResp, error)
	UpdateApplet(context.Context, *UpdateAppletReq) (*UpdateAppletResp, error)
	FindApplet(context.Context, *FindAppletReq) (*FindAppletResp, error)
	SearchApplet(context.Context, *SearchAppletReq) (*SearchAppletResp, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedChatServer) AddUserAccount(context.Context, *AddUserAccountReq) (*AddUserAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserAccount not implemented")
}
func (UnimplementedChatServer) SearchUserPublicInfo(context.Context, *SearchUserPublicInfoReq) (*SearchUserPublicInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserPublicInfo not implemented")
}
func (UnimplementedChatServer) FindUserPublicInfo(context.Context, *FindUserPublicInfoReq) (*FindUserPublicInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserPublicInfo not implemented")
}
func (UnimplementedChatServer) SearchUserFullInfo(context.Context, *SearchUserFullInfoReq) (*SearchUserFullInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserFullInfo not implemented")
}
func (UnimplementedChatServer) FindUserFullInfo(context.Context, *FindUserFullInfoReq) (*FindUserFullInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserFullInfo not implemented")
}
func (UnimplementedChatServer) SendVerifyImgCode(context.Context, *SendVerifyImgCodeReq) (*SendVerifyImgCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerifyImgCode not implemented")
}
func (UnimplementedChatServer) VerifyImgCode(context.Context, *VerifyImgCodeReq) (*VerifyImgCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyImgCode not implemented")
}
func (UnimplementedChatServer) SendVerifyCode(context.Context, *SendVerifyCodeReq) (*SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerifyCode not implemented")
}
func (UnimplementedChatServer) VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedChatServer) RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedChatServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedChatServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedChatServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedChatServer) CheckUserExist(context.Context, *CheckUserExistReq) (*CheckUserExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserExist not implemented")
}
func (UnimplementedChatServer) DelUserAccount(context.Context, *DelUserAccountReq) (*DelUserAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserAccount not implemented")
}
func (UnimplementedChatServer) FindUserAccount(context.Context, *FindUserAccountReq) (*FindUserAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserAccount not implemented")
}
func (UnimplementedChatServer) FindAccountUser(context.Context, *FindAccountUserReq) (*FindAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccountUser not implemented")
}
func (UnimplementedChatServer) OpenIMCallback(context.Context, *OpenIMCallbackReq) (*OpenIMCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenIMCallback not implemented")
}
func (UnimplementedChatServer) UserLoginCount(context.Context, *UserLoginCountReq) (*UserLoginCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginCount not implemented")
}
func (UnimplementedChatServer) SearchUserInfo(context.Context, *SearchUserInfoReq) (*SearchUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserInfo not implemented")
}
func (UnimplementedChatServer) GetTokenForVideoMeeting(context.Context, *GetTokenForVideoMeetingReq) (*GetTokenForVideoMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenForVideoMeeting not implemented")
}
func (UnimplementedChatServer) SetAllowRegister(context.Context, *SetAllowRegisterReq) (*SetAllowRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllowRegister not implemented")
}
func (UnimplementedChatServer) GetAllowRegister(context.Context, *GetAllowRegisterReq) (*GetAllowRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowRegister not implemented")
}
func (UnimplementedChatServer) FindLoginRecord(context.Context, *FindLoginRecordReq) (*FindLoginRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLoginRecord not implemented")
}
func (UnimplementedChatServer) CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedChatServer) ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedChatServer) GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedChatServer) InvalidateToken(context.Context, *InvalidateTokenReq) (*InvalidateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateToken not implemented")
}
func (UnimplementedChatServer) UpdateVersionInfo(context.Context, *UpdateVersionReq) (*UpdateVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVersionInfo not implemented")
}
func (UnimplementedChatServer) VersionInfo(context.Context, *VersionInfoReq) (*VersionInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionInfo not implemented")
}
func (UnimplementedChatServer) AddVersion(context.Context, *AddVersionReq) (*AddVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVersion not implemented")
}
func (UnimplementedChatServer) DelVersion(context.Context, *DelVersionReq) (*DelVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVersion not implemented")
}
func (UnimplementedChatServer) SearchVersion(context.Context, *SearchVersionReq) (*SearchVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVersion not implemented")
}
func (UnimplementedChatServer) CheckVersion(context.Context, *CheckVersionReq) (*CheckVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVersion not implemented")
}
func (UnimplementedChatServer) AddDefaultFriend(context.Context, *AddDefaultFriendReq) (*AddDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultFriend not implemented")
}
func (UnimplementedChatServer) DelDefaultFriend(context.Context, *DelDefaultFriendReq) (*DelDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultFriend not implemented")
}
func (UnimplementedChatServer) FindDefaultFriend(context.Context, *FindDefaultFriendReq) (*FindDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultFriend not implemented")
}
func (UnimplementedChatServer) SearchDefaultFriend(context.Context, *SearchDefaultFriendReq) (*SearchDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultFriend not implemented")
}
func (UnimplementedChatServer) AddDefaultGroup(context.Context, *AddDefaultGroupReq) (*AddDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultGroup not implemented")
}
func (UnimplementedChatServer) DelDefaultGroup(context.Context, *DelDefaultGroupReq) (*DelDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultGroup not implemented")
}
func (UnimplementedChatServer) FindDefaultGroup(context.Context, *FindDefaultGroupReq) (*FindDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultGroup not implemented")
}
func (UnimplementedChatServer) SearchDefaultGroup(context.Context, *SearchDefaultGroupReq) (*SearchDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultGroup not implemented")
}
func (UnimplementedChatServer) AddInvitationCode(context.Context, *AddInvitationCodeReq) (*AddInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvitationCode not implemented")
}
func (UnimplementedChatServer) GenInvitationCode(context.Context, *GenInvitationCodeReq) (*GenInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenInvitationCode not implemented")
}
func (UnimplementedChatServer) FindInvitationCode(context.Context, *FindInvitationCodeReq) (*FindInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInvitationCode not implemented")
}
func (UnimplementedChatServer) UseInvitationCode(context.Context, *UseInvitationCodeReq) (*UseInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseInvitationCode not implemented")
}
func (UnimplementedChatServer) DelInvitationCode(context.Context, *DelInvitationCodeReq) (*DelInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelInvitationCode not implemented")
}
func (UnimplementedChatServer) SearchInvitationCode(context.Context, *SearchInvitationCodeReq) (*SearchInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInvitationCode not implemented")
}
func (UnimplementedChatServer) SearchUserIPLimitLogin(context.Context, *SearchUserIPLimitLoginReq) (*SearchUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserIPLimitLogin not implemented")
}
func (UnimplementedChatServer) AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserIPLimitLogin not implemented")
}
func (UnimplementedChatServer) DelUserIPLimitLogin(context.Context, *DelUserIPLimitLoginReq) (*DelUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserIPLimitLogin not implemented")
}
func (UnimplementedChatServer) SearchIPForbidden(context.Context, *SearchIPForbiddenReq) (*SearchIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIPForbidden not implemented")
}
func (UnimplementedChatServer) AddIPForbidden(context.Context, *AddIPForbiddenReq) (*AddIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPForbidden not implemented")
}
func (UnimplementedChatServer) DelIPForbidden(context.Context, *DelIPForbiddenReq) (*DelIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIPForbidden not implemented")
}
func (UnimplementedChatServer) CancellationUser(context.Context, *CancellationUserReq) (*CancellationUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancellationUser not implemented")
}
func (UnimplementedChatServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedChatServer) UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedChatServer) SearchBlockUser(context.Context, *SearchBlockUserReq) (*SearchBlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlockUser not implemented")
}
func (UnimplementedChatServer) FindUserBlockInfo(context.Context, *FindUserBlockInfoReq) (*FindUserBlockInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserBlockInfo not implemented")
}
func (UnimplementedChatServer) CheckRegisterForbidden(context.Context, *CheckRegisterForbiddenReq) (*CheckRegisterForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegisterForbidden not implemented")
}
func (UnimplementedChatServer) CheckLoginForbidden(context.Context, *CheckLoginForbiddenReq) (*CheckLoginForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginForbidden not implemented")
}
func (UnimplementedChatServer) GetClientConfig(context.Context, *GetClientConfigReq) (*GetClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfig not implemented")
}
func (UnimplementedChatServer) SetClientConfig(context.Context, *SetClientConfigReq) (*SetClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientConfig not implemented")
}
func (UnimplementedChatServer) DelClientConfig(context.Context, *DelClientConfigReq) (*DelClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelClientConfig not implemented")
}
func (UnimplementedChatServer) AddApplet(context.Context, *AddAppletReq) (*AddAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplet not implemented")
}
func (UnimplementedChatServer) DelApplet(context.Context, *DelAppletReq) (*DelAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelApplet not implemented")
}
func (UnimplementedChatServer) UpdateApplet(context.Context, *UpdateAppletReq) (*UpdateAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplet not implemented")
}
func (UnimplementedChatServer) FindApplet(context.Context, *FindAppletReq) (*FindAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApplet not implemented")
}
func (UnimplementedChatServer) SearchApplet(context.Context, *SearchAppletReq) (*SearchAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApplet not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddUserAccount(ctx, req.(*AddUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserPublicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserPublicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserPublicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchUserPublicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserPublicInfo(ctx, req.(*SearchUserPublicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserPublicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserPublicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserPublicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindUserPublicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserPublicInfo(ctx, req.(*FindUserPublicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserFullInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchUserFullInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserFullInfo(ctx, req.(*SearchUserFullInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserFullInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindUserFullInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserFullInfo(ctx, req.(*FindUserFullInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendVerifyImgCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerifyImgCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendVerifyImgCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SendVerifyImgCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendVerifyImgCode(ctx, req.(*SendVerifyImgCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_VerifyImgCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyImgCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).VerifyImgCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_VerifyImgCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).VerifyImgCode(ctx, req.(*VerifyImgCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SendVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendVerifyCode(ctx, req.(*SendVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).VerifyCode(ctx, req.(*VerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CheckUserExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CheckUserExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CheckUserExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CheckUserExist(ctx, req.(*CheckUserExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelUserAccount(ctx, req.(*DelUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserAccount(ctx, req.(*FindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindAccountUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindAccountUser(ctx, req.(*FindAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_OpenIMCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenIMCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).OpenIMCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_OpenIMCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).OpenIMCallback(ctx, req.(*OpenIMCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UserLoginCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UserLoginCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UserLoginCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UserLoginCount(ctx, req.(*UserLoginCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserInfo(ctx, req.(*SearchUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetTokenForVideoMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenForVideoMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetTokenForVideoMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetTokenForVideoMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetTokenForVideoMeeting(ctx, req.(*GetTokenForVideoMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SetAllowRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllowRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SetAllowRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SetAllowRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SetAllowRegister(ctx, req.(*SetAllowRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetAllowRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllowRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetAllowRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetAllowRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetAllowRegister(ctx, req.(*GetAllowRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindLoginRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLoginRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindLoginRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindLoginRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindLoginRecord(ctx, req.(*FindLoginRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_ParseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ParseToken(ctx, req.(*ParseTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetUserToken(ctx, req.(*GetUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_InvalidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).InvalidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_InvalidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).InvalidateToken(ctx, req.(*InvalidateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateVersionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateVersionInfo(ctx, req.(*UpdateVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_VersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).VersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_VersionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).VersionInfo(ctx, req.(*VersionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddVersion(ctx, req.(*AddVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelVersion(ctx, req.(*DelVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchVersion(ctx, req.(*SearchVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CheckVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CheckVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CheckVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CheckVersion(ctx, req.(*CheckVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddDefaultFriend(ctx, req.(*AddDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelDefaultFriend(ctx, req.(*DelDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindDefaultFriend(ctx, req.(*FindDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchDefaultFriend(ctx, req.(*SearchDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddDefaultGroup(ctx, req.(*AddDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelDefaultGroup(ctx, req.(*DelDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindDefaultGroup(ctx, req.(*FindDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchDefaultGroup(ctx, req.(*SearchDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddInvitationCode(ctx, req.(*AddInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GenInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GenInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GenInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GenInvitationCode(ctx, req.(*GenInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindInvitationCode(ctx, req.(*FindInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UseInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UseInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UseInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UseInvitationCode(ctx, req.(*UseInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelInvitationCode(ctx, req.(*DelInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchInvitationCode(ctx, req.(*SearchInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserIPLimitLogin(ctx, req.(*SearchUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddUserIPLimitLogin(ctx, req.(*AddUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelUserIPLimitLogin(ctx, req.(*DelUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchIPForbidden(ctx, req.(*SearchIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddIPForbidden(ctx, req.(*AddIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelIPForbidden(ctx, req.(*DelIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CancellationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancellationUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CancellationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CancellationUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CancellationUser(ctx, req.(*CancellationUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UnblockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UnblockUser(ctx, req.(*UnblockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchBlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchBlockUser(ctx, req.(*SearchBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserBlockInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindUserBlockInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserBlockInfo(ctx, req.(*FindUserBlockInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CheckRegisterForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRegisterForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CheckRegisterForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CheckRegisterForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CheckRegisterForbidden(ctx, req.(*CheckRegisterForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CheckLoginForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CheckLoginForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CheckLoginForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CheckLoginForbidden(ctx, req.(*CheckLoginForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetClientConfig(ctx, req.(*GetClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SetClientConfig(ctx, req.(*SetClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelClientConfig(ctx, req.(*DelClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddApplet(ctx, req.(*AddAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DelApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelApplet(ctx, req.(*DelAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateApplet(ctx, req.(*UpdateAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindApplet(ctx, req.(*FindAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchApplet(ctx, req.(*SearchAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openim.openchat.chat.chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Chat_UpdateUserInfo_Handler,
		},
		{
			MethodName: "AddUserAccount",
			Handler:    _Chat_AddUserAccount_Handler,
		},
		{
			MethodName: "SearchUserPublicInfo",
			Handler:    _Chat_SearchUserPublicInfo_Handler,
		},
		{
			MethodName: "FindUserPublicInfo",
			Handler:    _Chat_FindUserPublicInfo_Handler,
		},
		{
			MethodName: "SearchUserFullInfo",
			Handler:    _Chat_SearchUserFullInfo_Handler,
		},
		{
			MethodName: "FindUserFullInfo",
			Handler:    _Chat_FindUserFullInfo_Handler,
		},
		{
			MethodName: "SendVerifyImgCode",
			Handler:    _Chat_SendVerifyImgCode_Handler,
		},
		{
			MethodName: "VerifyImgCode",
			Handler:    _Chat_VerifyImgCode_Handler,
		},
		{
			MethodName: "SendVerifyCode",
			Handler:    _Chat_SendVerifyCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _Chat_VerifyCode_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Chat_RegisterUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Chat_Login_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Chat_ResetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Chat_ChangePassword_Handler,
		},
		{
			MethodName: "CheckUserExist",
			Handler:    _Chat_CheckUserExist_Handler,
		},
		{
			MethodName: "DelUserAccount",
			Handler:    _Chat_DelUserAccount_Handler,
		},
		{
			MethodName: "FindUserAccount",
			Handler:    _Chat_FindUserAccount_Handler,
		},
		{
			MethodName: "FindAccountUser",
			Handler:    _Chat_FindAccountUser_Handler,
		},
		{
			MethodName: "OpenIMCallback",
			Handler:    _Chat_OpenIMCallback_Handler,
		},
		{
			MethodName: "UserLoginCount",
			Handler:    _Chat_UserLoginCount_Handler,
		},
		{
			MethodName: "SearchUserInfo",
			Handler:    _Chat_SearchUserInfo_Handler,
		},
		{
			MethodName: "GetTokenForVideoMeeting",
			Handler:    _Chat_GetTokenForVideoMeeting_Handler,
		},
		{
			MethodName: "SetAllowRegister",
			Handler:    _Chat_SetAllowRegister_Handler,
		},
		{
			MethodName: "GetAllowRegister",
			Handler:    _Chat_GetAllowRegister_Handler,
		},
		{
			MethodName: "FindLoginRecord",
			Handler:    _Chat_FindLoginRecord_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Chat_CreateToken_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _Chat_ParseToken_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _Chat_GetUserToken_Handler,
		},
		{
			MethodName: "InvalidateToken",
			Handler:    _Chat_InvalidateToken_Handler,
		},
		{
			MethodName: "UpdateVersionInfo",
			Handler:    _Chat_UpdateVersionInfo_Handler,
		},
		{
			MethodName: "VersionInfo",
			Handler:    _Chat_VersionInfo_Handler,
		},
		{
			MethodName: "AddVersion",
			Handler:    _Chat_AddVersion_Handler,
		},
		{
			MethodName: "DelVersion",
			Handler:    _Chat_DelVersion_Handler,
		},
		{
			MethodName: "SearchVersion",
			Handler:    _Chat_SearchVersion_Handler,
		},
		{
			MethodName: "CheckVersion",
			Handler:    _Chat_CheckVersion_Handler,
		},
		{
			MethodName: "AddDefaultFriend",
			Handler:    _Chat_AddDefaultFriend_Handler,
		},
		{
			MethodName: "DelDefaultFriend",
			Handler:    _Chat_DelDefaultFriend_Handler,
		},
		{
			MethodName: "FindDefaultFriend",
			Handler:    _Chat_FindDefaultFriend_Handler,
		},
		{
			MethodName: "SearchDefaultFriend",
			Handler:    _Chat_SearchDefaultFriend_Handler,
		},
		{
			MethodName: "AddDefaultGroup",
			Handler:    _Chat_AddDefaultGroup_Handler,
		},
		{
			MethodName: "DelDefaultGroup",
			Handler:    _Chat_DelDefaultGroup_Handler,
		},
		{
			MethodName: "FindDefaultGroup",
			Handler:    _Chat_FindDefaultGroup_Handler,
		},
		{
			MethodName: "SearchDefaultGroup",
			Handler:    _Chat_SearchDefaultGroup_Handler,
		},
		{
			MethodName: "AddInvitationCode",
			Handler:    _Chat_AddInvitationCode_Handler,
		},
		{
			MethodName: "GenInvitationCode",
			Handler:    _Chat_GenInvitationCode_Handler,
		},
		{
			MethodName: "FindInvitationCode",
			Handler:    _Chat_FindInvitationCode_Handler,
		},
		{
			MethodName: "UseInvitationCode",
			Handler:    _Chat_UseInvitationCode_Handler,
		},
		{
			MethodName: "DelInvitationCode",
			Handler:    _Chat_DelInvitationCode_Handler,
		},
		{
			MethodName: "SearchInvitationCode",
			Handler:    _Chat_SearchInvitationCode_Handler,
		},
		{
			MethodName: "SearchUserIPLimitLogin",
			Handler:    _Chat_SearchUserIPLimitLogin_Handler,
		},
		{
			MethodName: "AddUserIPLimitLogin",
			Handler:    _Chat_AddUserIPLimitLogin_Handler,
		},
		{
			MethodName: "DelUserIPLimitLogin",
			Handler:    _Chat_DelUserIPLimitLogin_Handler,
		},
		{
			MethodName: "SearchIPForbidden",
			Handler:    _Chat_SearchIPForbidden_Handler,
		},
		{
			MethodName: "AddIPForbidden",
			Handler:    _Chat_AddIPForbidden_Handler,
		},
		{
			MethodName: "DelIPForbidden",
			Handler:    _Chat_DelIPForbidden_Handler,
		},
		{
			MethodName: "CancellationUser",
			Handler:    _Chat_CancellationUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _Chat_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Chat_UnblockUser_Handler,
		},
		{
			MethodName: "SearchBlockUser",
			Handler:    _Chat_SearchBlockUser_Handler,
		},
		{
			MethodName: "FindUserBlockInfo",
			Handler:    _Chat_FindUserBlockInfo_Handler,
		},
		{
			MethodName: "CheckRegisterForbidden",
			Handler:    _Chat_CheckRegisterForbidden_Handler,
		},
		{
			MethodName: "CheckLoginForbidden",
			Handler:    _Chat_CheckLoginForbidden_Handler,
		},
		{
			MethodName: "GetClientConfig",
			Handler:    _Chat_GetClientConfig_Handler,
		},
		{
			MethodName: "SetClientConfig",
			Handler:    _Chat_SetClientConfig_Handler,
		},
		{
			MethodName: "DelClientConfig",
			Handler:    _Chat_DelClientConfig_Handler,
		},
		{
			MethodName: "AddApplet",
			Handler:    _Chat_AddApplet_Handler,
		},
		{
			MethodName: "DelApplet",
			Handler:    _Chat_DelApplet_Handler,
		},
		{
			MethodName: "UpdateApplet",
			Handler:    _Chat_UpdateApplet_Handler,
		},
		{
			MethodName: "FindApplet",
			Handler:    _Chat_FindApplet_Handler,
		},
		{
			MethodName: "SearchApplet",
			Handler:    _Chat_SearchApplet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openchat/chat/chat.proto",
}
