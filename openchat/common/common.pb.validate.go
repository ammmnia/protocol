// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openchat/common/common.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserFullInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserFullInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFullInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserFullInfoMultiError, or
// nil if none found.
func (m *UserFullInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFullInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Password

	// no validation rules for Account

	// no validation rules for PhoneNumber

	// no validation rules for AreaCode

	// no validation rules for Email

	// no validation rules for Nickname

	// no validation rules for FaceURL

	// no validation rules for Gender

	// no validation rules for Level

	// no validation rules for Birth

	// no validation rules for AllowAddFriend

	// no validation rules for AllowBeep

	// no validation rules for AllowVibration

	// no validation rules for GlobalRecvMsgOpt

	// no validation rules for RegisterType

	// no validation rules for CreateTime

	// no validation rules for ChangeTime

	if len(errors) > 0 {
		return UserFullInfoMultiError(errors)
	}

	return nil
}

// UserFullInfoMultiError is an error wrapping multiple validation errors
// returned by UserFullInfo.ValidateAll() if the designated constraints aren't met.
type UserFullInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFullInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFullInfoMultiError) AllErrors() []error { return m }

// UserFullInfoValidationError is the validation error returned by
// UserFullInfo.Validate if the designated constraints aren't met.
type UserFullInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFullInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFullInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFullInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFullInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFullInfoValidationError) ErrorName() string { return "UserFullInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserFullInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFullInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFullInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFullInfoValidationError{}

// Validate checks the field values on UserPublicInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPublicInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPublicInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPublicInfoMultiError,
// or nil if none found.
func (m *UserPublicInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPublicInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Account

	// no validation rules for Email

	// no validation rules for Nickname

	// no validation rules for FaceURL

	// no validation rules for Gender

	// no validation rules for Level

	if len(errors) > 0 {
		return UserPublicInfoMultiError(errors)
	}

	return nil
}

// UserPublicInfoMultiError is an error wrapping multiple validation errors
// returned by UserPublicInfo.ValidateAll() if the designated constraints
// aren't met.
type UserPublicInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPublicInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPublicInfoMultiError) AllErrors() []error { return m }

// UserPublicInfoValidationError is the validation error returned by
// UserPublicInfo.Validate if the designated constraints aren't met.
type UserPublicInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPublicInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPublicInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPublicInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPublicInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPublicInfoValidationError) ErrorName() string { return "UserPublicInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserPublicInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPublicInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPublicInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPublicInfoValidationError{}

// Validate checks the field values on UserIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserIdentityMultiError, or
// nil if none found.
func (m *UserIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for AreaCode

	// no validation rules for PhoneNumber

	// no validation rules for DeviceID

	// no validation rules for Platform

	// no validation rules for Account

	if len(errors) > 0 {
		return UserIdentityMultiError(errors)
	}

	return nil
}

// UserIdentityMultiError is an error wrapping multiple validation errors
// returned by UserIdentity.ValidateAll() if the designated constraints aren't met.
type UserIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentityMultiError) AllErrors() []error { return m }

// UserIdentityValidationError is the validation error returned by
// UserIdentity.Validate if the designated constraints aren't met.
type UserIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentityValidationError) ErrorName() string { return "UserIdentityValidationError" }

// Error satisfies the builtin error interface
func (e UserIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentityValidationError{}

// Validate checks the field values on AppletInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppletInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppletInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppletInfoMultiError, or
// nil if none found.
func (m *AppletInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AppletInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AppID

	// no validation rules for Icon

	// no validation rules for Url

	// no validation rules for Md5

	// no validation rules for Size

	// no validation rules for Version

	// no validation rules for Priority

	// no validation rules for Status

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return AppletInfoMultiError(errors)
	}

	return nil
}

// AppletInfoMultiError is an error wrapping multiple validation errors
// returned by AppletInfo.ValidateAll() if the designated constraints aren't met.
type AppletInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppletInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppletInfoMultiError) AllErrors() []error { return m }

// AppletInfoValidationError is the validation error returned by
// AppletInfo.Validate if the designated constraints aren't met.
type AppletInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppletInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppletInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppletInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppletInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppletInfoValidationError) ErrorName() string { return "AppletInfoValidationError" }

// Error satisfies the builtin error interface
func (e AppletInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppletInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppletInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppletInfoValidationError{}

// Validate checks the field values on LogInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogInfoMultiError, or nil if none found.
func (m *LogInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *LogInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Platform

	// no validation rules for Url

	// no validation rules for CreateTime

	// no validation rules for Nickname

	// no validation rules for LogID

	// no validation rules for Filename

	// no validation rules for SystemType

	// no validation rules for Ex

	// no validation rules for Version

	if len(errors) > 0 {
		return LogInfoMultiError(errors)
	}

	return nil
}

// LogInfoMultiError is an error wrapping multiple validation errors returned
// by LogInfo.ValidateAll() if the designated constraints aren't met.
type LogInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogInfoMultiError) AllErrors() []error { return m }

// LogInfoValidationError is the validation error returned by LogInfo.Validate
// if the designated constraints aren't met.
type LogInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogInfoValidationError) ErrorName() string { return "LogInfoValidationError" }

// Error satisfies the builtin error interface
func (e LogInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogInfoValidationError{}
