// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openmeeting/meeting/meeting.proto

package meeting

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LiveKit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LiveKit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiveKit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LiveKitMultiError, or nil if none found.
func (m *LiveKit) ValidateAll() error {
	return m.validate(true)
}

func (m *LiveKit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Url

	if len(errors) > 0 {
		return LiveKitMultiError(errors)
	}

	return nil
}

// LiveKitMultiError is an error wrapping multiple validation errors returned
// by LiveKit.ValidateAll() if the designated constraints aren't met.
type LiveKitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiveKitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiveKitMultiError) AllErrors() []error { return m }

// LiveKitValidationError is the validation error returned by LiveKit.Validate
// if the designated constraints aren't met.
type LiveKitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiveKitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiveKitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiveKitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiveKitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiveKitValidationError) ErrorName() string { return "LiveKitValidationError" }

// Error satisfies the builtin error interface
func (e LiveKitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiveKit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiveKitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiveKitValidationError{}

// Validate checks the field values on SystemGeneratedMeetingInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SystemGeneratedMeetingInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemGeneratedMeetingInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemGeneratedMeetingInfoMultiError, or nil if none found.
func (m *SystemGeneratedMeetingInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemGeneratedMeetingInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatorUserID

	// no validation rules for CreatorNickname

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for MeetingID

	if len(errors) > 0 {
		return SystemGeneratedMeetingInfoMultiError(errors)
	}

	return nil
}

// SystemGeneratedMeetingInfoMultiError is an error wrapping multiple
// validation errors returned by SystemGeneratedMeetingInfo.ValidateAll() if
// the designated constraints aren't met.
type SystemGeneratedMeetingInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemGeneratedMeetingInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemGeneratedMeetingInfoMultiError) AllErrors() []error { return m }

// SystemGeneratedMeetingInfoValidationError is the validation error returned
// by SystemGeneratedMeetingInfo.Validate if the designated constraints aren't met.
type SystemGeneratedMeetingInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemGeneratedMeetingInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemGeneratedMeetingInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemGeneratedMeetingInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemGeneratedMeetingInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemGeneratedMeetingInfoValidationError) ErrorName() string {
	return "SystemGeneratedMeetingInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SystemGeneratedMeetingInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemGeneratedMeetingInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemGeneratedMeetingInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemGeneratedMeetingInfoValidationError{}

// Validate checks the field values on CreatorDefinedMeetingInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatorDefinedMeetingInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatorDefinedMeetingInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatorDefinedMeetingInfoMultiError, or nil if none found.
func (m *CreatorDefinedMeetingInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatorDefinedMeetingInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for ScheduledTime

	// no validation rules for MeetingDuration

	// no validation rules for Password

	// no validation rules for TimeZone

	// no validation rules for HostUserID

	if len(errors) > 0 {
		return CreatorDefinedMeetingInfoMultiError(errors)
	}

	return nil
}

// CreatorDefinedMeetingInfoMultiError is an error wrapping multiple validation
// errors returned by CreatorDefinedMeetingInfo.ValidateAll() if the
// designated constraints aren't met.
type CreatorDefinedMeetingInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatorDefinedMeetingInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatorDefinedMeetingInfoMultiError) AllErrors() []error { return m }

// CreatorDefinedMeetingInfoValidationError is the validation error returned by
// CreatorDefinedMeetingInfo.Validate if the designated constraints aren't met.
type CreatorDefinedMeetingInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatorDefinedMeetingInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatorDefinedMeetingInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatorDefinedMeetingInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatorDefinedMeetingInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatorDefinedMeetingInfoValidationError) ErrorName() string {
	return "CreatorDefinedMeetingInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CreatorDefinedMeetingInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatorDefinedMeetingInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatorDefinedMeetingInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatorDefinedMeetingInfoValidationError{}

// Validate checks the field values on MeetingInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeetingInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeetingInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeetingInfoMultiError, or
// nil if none found.
func (m *MeetingInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MeetingInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSystemGenerated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeetingInfoValidationError{
					field:  "SystemGenerated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeetingInfoValidationError{
					field:  "SystemGenerated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystemGenerated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingInfoValidationError{
				field:  "SystemGenerated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatorDefinedMeeting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeetingInfoValidationError{
					field:  "CreatorDefinedMeeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeetingInfoValidationError{
					field:  "CreatorDefinedMeeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatorDefinedMeeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingInfoValidationError{
				field:  "CreatorDefinedMeeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeetingInfoMultiError(errors)
	}

	return nil
}

// MeetingInfoMultiError is an error wrapping multiple validation errors
// returned by MeetingInfo.ValidateAll() if the designated constraints aren't met.
type MeetingInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeetingInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeetingInfoMultiError) AllErrors() []error { return m }

// MeetingInfoValidationError is the validation error returned by
// MeetingInfo.Validate if the designated constraints aren't met.
type MeetingInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingInfoValidationError) ErrorName() string { return "MeetingInfoValidationError" }

// Error satisfies the builtin error interface
func (e MeetingInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingInfoValidationError{}

// Validate checks the field values on MeetingRepeatInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MeetingRepeatInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeetingRepeatInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeetingRepeatInfoMultiError, or nil if none found.
func (m *MeetingRepeatInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MeetingRepeatInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EndDate

	// no validation rules for RepeatTimes

	// no validation rules for RepeatType

	// no validation rules for UintType

	// no validation rules for Interval

	if len(errors) > 0 {
		return MeetingRepeatInfoMultiError(errors)
	}

	return nil
}

// MeetingRepeatInfoMultiError is an error wrapping multiple validation errors
// returned by MeetingRepeatInfo.ValidateAll() if the designated constraints
// aren't met.
type MeetingRepeatInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeetingRepeatInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeetingRepeatInfoMultiError) AllErrors() []error { return m }

// MeetingRepeatInfoValidationError is the validation error returned by
// MeetingRepeatInfo.Validate if the designated constraints aren't met.
type MeetingRepeatInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingRepeatInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingRepeatInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingRepeatInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingRepeatInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingRepeatInfoValidationError) ErrorName() string {
	return "MeetingRepeatInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MeetingRepeatInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingRepeatInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingRepeatInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingRepeatInfoValidationError{}

// Validate checks the field values on MeetingSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeetingSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeetingSetting with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeetingSettingMultiError,
// or nil if none found.
func (m *MeetingSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *MeetingSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CanParticipantsEnableCamera

	// no validation rules for CanParticipantsUnmuteMicrophone

	// no validation rules for CanParticipantsShareScreen

	// no validation rules for DisableCameraOnJoin

	// no validation rules for DisableMicrophoneOnJoin

	// no validation rules for CanParticipantJoinMeetingEarly

	// no validation rules for LockMeeting

	// no validation rules for AudioEncouragement

	// no validation rules for VideoMirroring

	if len(errors) > 0 {
		return MeetingSettingMultiError(errors)
	}

	return nil
}

// MeetingSettingMultiError is an error wrapping multiple validation errors
// returned by MeetingSetting.ValidateAll() if the designated constraints
// aren't met.
type MeetingSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeetingSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeetingSettingMultiError) AllErrors() []error { return m }

// MeetingSettingValidationError is the validation error returned by
// MeetingSetting.Validate if the designated constraints aren't met.
type MeetingSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingSettingValidationError) ErrorName() string { return "MeetingSettingValidationError" }

// Error satisfies the builtin error interface
func (e MeetingSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingSettingValidationError{}

// Validate checks the field values on MeetingInfoSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeetingInfoSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeetingInfoSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeetingInfoSettingMultiError, or nil if none found.
func (m *MeetingInfoSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *MeetingInfoSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeetingInfoSettingValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeetingInfoSettingValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingInfoSettingValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeetingInfoSettingValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeetingInfoSettingValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingInfoSettingValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepeatInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeetingInfoSettingValidationError{
					field:  "RepeatInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeetingInfoSettingValidationError{
					field:  "RepeatInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingInfoSettingValidationError{
				field:  "RepeatInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeetingInfoSettingMultiError(errors)
	}

	return nil
}

// MeetingInfoSettingMultiError is an error wrapping multiple validation errors
// returned by MeetingInfoSetting.ValidateAll() if the designated constraints
// aren't met.
type MeetingInfoSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeetingInfoSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeetingInfoSettingMultiError) AllErrors() []error { return m }

// MeetingInfoSettingValidationError is the validation error returned by
// MeetingInfoSetting.Validate if the designated constraints aren't met.
type MeetingInfoSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingInfoSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingInfoSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingInfoSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingInfoSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingInfoSettingValidationError) ErrorName() string {
	return "MeetingInfoSettingValidationError"
}

// Error satisfies the builtin error interface
func (e MeetingInfoSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingInfoSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingInfoSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingInfoSettingValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Nickname

	// no validation rules for Account

	// no validation rules for FaceURL

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on ParticipantMetaData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParticipantMetaData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantMetaData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantMetaDataMultiError, or nil if none found.
func (m *ParticipantMetaData) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantMetaData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantMetaDataValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantMetaDataValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantMetaDataValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantMetaDataMultiError(errors)
	}

	return nil
}

// ParticipantMetaDataMultiError is an error wrapping multiple validation
// errors returned by ParticipantMetaData.ValidateAll() if the designated
// constraints aren't met.
type ParticipantMetaDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantMetaDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantMetaDataMultiError) AllErrors() []error { return m }

// ParticipantMetaDataValidationError is the validation error returned by
// ParticipantMetaData.Validate if the designated constraints aren't met.
type ParticipantMetaDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantMetaDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantMetaDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantMetaDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantMetaDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantMetaDataValidationError) ErrorName() string {
	return "ParticipantMetaDataValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantMetaDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantMetaData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantMetaDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantMetaDataValidationError{}

// Validate checks the field values on BookMeetingReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookMeetingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookMeetingReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookMeetingReqMultiError,
// or nil if none found.
func (m *BookMeetingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BookMeetingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatorUserID

	if all {
		switch v := interface{}(m.GetCreatorDefinedMeetingInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookMeetingReqValidationError{
					field:  "CreatorDefinedMeetingInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookMeetingReqValidationError{
					field:  "CreatorDefinedMeetingInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatorDefinedMeetingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookMeetingReqValidationError{
				field:  "CreatorDefinedMeetingInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookMeetingReqValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookMeetingReqValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookMeetingReqValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepeatInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookMeetingReqValidationError{
					field:  "RepeatInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookMeetingReqValidationError{
					field:  "RepeatInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookMeetingReqValidationError{
				field:  "RepeatInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookMeetingReqMultiError(errors)
	}

	return nil
}

// BookMeetingReqMultiError is an error wrapping multiple validation errors
// returned by BookMeetingReq.ValidateAll() if the designated constraints
// aren't met.
type BookMeetingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookMeetingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookMeetingReqMultiError) AllErrors() []error { return m }

// BookMeetingReqValidationError is the validation error returned by
// BookMeetingReq.Validate if the designated constraints aren't met.
type BookMeetingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookMeetingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookMeetingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookMeetingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookMeetingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookMeetingReqValidationError) ErrorName() string { return "BookMeetingReqValidationError" }

// Error satisfies the builtin error interface
func (e BookMeetingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookMeetingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookMeetingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookMeetingReqValidationError{}

// Validate checks the field values on BookMeetingResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BookMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookMeetingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookMeetingRespMultiError, or nil if none found.
func (m *BookMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BookMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookMeetingRespValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookMeetingRespValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookMeetingRespValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookMeetingRespMultiError(errors)
	}

	return nil
}

// BookMeetingRespMultiError is an error wrapping multiple validation errors
// returned by BookMeetingResp.ValidateAll() if the designated constraints
// aren't met.
type BookMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookMeetingRespMultiError) AllErrors() []error { return m }

// BookMeetingRespValidationError is the validation error returned by
// BookMeetingResp.Validate if the designated constraints aren't met.
type BookMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookMeetingRespValidationError) ErrorName() string { return "BookMeetingRespValidationError" }

// Error satisfies the builtin error interface
func (e BookMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookMeetingRespValidationError{}

// Validate checks the field values on CreateImmediateMeetingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateImmediateMeetingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImmediateMeetingReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateImmediateMeetingReqMultiError, or nil if none found.
func (m *CreateImmediateMeetingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImmediateMeetingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatorUserID

	if all {
		switch v := interface{}(m.GetCreatorDefinedMeetingInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateImmediateMeetingReqValidationError{
					field:  "CreatorDefinedMeetingInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateImmediateMeetingReqValidationError{
					field:  "CreatorDefinedMeetingInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatorDefinedMeetingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateImmediateMeetingReqValidationError{
				field:  "CreatorDefinedMeetingInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateImmediateMeetingReqValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateImmediateMeetingReqValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateImmediateMeetingReqValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateImmediateMeetingReqMultiError(errors)
	}

	return nil
}

// CreateImmediateMeetingReqMultiError is an error wrapping multiple validation
// errors returned by CreateImmediateMeetingReq.ValidateAll() if the
// designated constraints aren't met.
type CreateImmediateMeetingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImmediateMeetingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImmediateMeetingReqMultiError) AllErrors() []error { return m }

// CreateImmediateMeetingReqValidationError is the validation error returned by
// CreateImmediateMeetingReq.Validate if the designated constraints aren't met.
type CreateImmediateMeetingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImmediateMeetingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImmediateMeetingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImmediateMeetingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImmediateMeetingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImmediateMeetingReqValidationError) ErrorName() string {
	return "CreateImmediateMeetingReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateImmediateMeetingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImmediateMeetingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImmediateMeetingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImmediateMeetingReqValidationError{}

// Validate checks the field values on CreateImmediateMeetingResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateImmediateMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImmediateMeetingResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateImmediateMeetingRespMultiError, or nil if none found.
func (m *CreateImmediateMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImmediateMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateImmediateMeetingRespValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateImmediateMeetingRespValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateImmediateMeetingRespValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLiveKit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateImmediateMeetingRespValidationError{
					field:  "LiveKit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateImmediateMeetingRespValidationError{
					field:  "LiveKit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveKit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateImmediateMeetingRespValidationError{
				field:  "LiveKit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateImmediateMeetingRespMultiError(errors)
	}

	return nil
}

// CreateImmediateMeetingRespMultiError is an error wrapping multiple
// validation errors returned by CreateImmediateMeetingResp.ValidateAll() if
// the designated constraints aren't met.
type CreateImmediateMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImmediateMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImmediateMeetingRespMultiError) AllErrors() []error { return m }

// CreateImmediateMeetingRespValidationError is the validation error returned
// by CreateImmediateMeetingResp.Validate if the designated constraints aren't met.
type CreateImmediateMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImmediateMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImmediateMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImmediateMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImmediateMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImmediateMeetingRespValidationError) ErrorName() string {
	return "CreateImmediateMeetingRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateImmediateMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImmediateMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImmediateMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImmediateMeetingRespValidationError{}

// Validate checks the field values on JoinMeetingReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinMeetingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinMeetingReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinMeetingReqMultiError,
// or nil if none found.
func (m *JoinMeetingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinMeetingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	// no validation rules for Password

	if len(errors) > 0 {
		return JoinMeetingReqMultiError(errors)
	}

	return nil
}

// JoinMeetingReqMultiError is an error wrapping multiple validation errors
// returned by JoinMeetingReq.ValidateAll() if the designated constraints
// aren't met.
type JoinMeetingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinMeetingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinMeetingReqMultiError) AllErrors() []error { return m }

// JoinMeetingReqValidationError is the validation error returned by
// JoinMeetingReq.Validate if the designated constraints aren't met.
type JoinMeetingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinMeetingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinMeetingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinMeetingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinMeetingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinMeetingReqValidationError) ErrorName() string { return "JoinMeetingReqValidationError" }

// Error satisfies the builtin error interface
func (e JoinMeetingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinMeetingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinMeetingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinMeetingReqValidationError{}

// Validate checks the field values on JoinMeetingResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinMeetingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinMeetingRespMultiError, or nil if none found.
func (m *JoinMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLiveKit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinMeetingRespValidationError{
					field:  "LiveKit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinMeetingRespValidationError{
					field:  "LiveKit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveKit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinMeetingRespValidationError{
				field:  "LiveKit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinMeetingRespMultiError(errors)
	}

	return nil
}

// JoinMeetingRespMultiError is an error wrapping multiple validation errors
// returned by JoinMeetingResp.ValidateAll() if the designated constraints
// aren't met.
type JoinMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinMeetingRespMultiError) AllErrors() []error { return m }

// JoinMeetingRespValidationError is the validation error returned by
// JoinMeetingResp.Validate if the designated constraints aren't met.
type JoinMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinMeetingRespValidationError) ErrorName() string { return "JoinMeetingRespValidationError" }

// Error satisfies the builtin error interface
func (e JoinMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinMeetingRespValidationError{}

// Validate checks the field values on GetMeetingTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMeetingTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeetingTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMeetingTokenReqMultiError, or nil if none found.
func (m *GetMeetingTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeetingTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetMeetingTokenReqMultiError(errors)
	}

	return nil
}

// GetMeetingTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetMeetingTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetMeetingTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeetingTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeetingTokenReqMultiError) AllErrors() []error { return m }

// GetMeetingTokenReqValidationError is the validation error returned by
// GetMeetingTokenReq.Validate if the designated constraints aren't met.
type GetMeetingTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeetingTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeetingTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeetingTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeetingTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeetingTokenReqValidationError) ErrorName() string {
	return "GetMeetingTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMeetingTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeetingTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeetingTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeetingTokenReqValidationError{}

// Validate checks the field values on GetMeetingTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMeetingTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeetingTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMeetingTokenRespMultiError, or nil if none found.
func (m *GetMeetingTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeetingTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	if all {
		switch v := interface{}(m.GetLiveKit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMeetingTokenRespValidationError{
					field:  "LiveKit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMeetingTokenRespValidationError{
					field:  "LiveKit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveKit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMeetingTokenRespValidationError{
				field:  "LiveKit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMeetingTokenRespMultiError(errors)
	}

	return nil
}

// GetMeetingTokenRespMultiError is an error wrapping multiple validation
// errors returned by GetMeetingTokenResp.ValidateAll() if the designated
// constraints aren't met.
type GetMeetingTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeetingTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeetingTokenRespMultiError) AllErrors() []error { return m }

// GetMeetingTokenRespValidationError is the validation error returned by
// GetMeetingTokenResp.Validate if the designated constraints aren't met.
type GetMeetingTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeetingTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeetingTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeetingTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeetingTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeetingTokenRespValidationError) ErrorName() string {
	return "GetMeetingTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetMeetingTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeetingTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeetingTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeetingTokenRespValidationError{}

// Validate checks the field values on LeaveMeetingReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveMeetingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveMeetingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveMeetingReqMultiError, or nil if none found.
func (m *LeaveMeetingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveMeetingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	if len(errors) > 0 {
		return LeaveMeetingReqMultiError(errors)
	}

	return nil
}

// LeaveMeetingReqMultiError is an error wrapping multiple validation errors
// returned by LeaveMeetingReq.ValidateAll() if the designated constraints
// aren't met.
type LeaveMeetingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveMeetingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveMeetingReqMultiError) AllErrors() []error { return m }

// LeaveMeetingReqValidationError is the validation error returned by
// LeaveMeetingReq.Validate if the designated constraints aren't met.
type LeaveMeetingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveMeetingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveMeetingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveMeetingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveMeetingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveMeetingReqValidationError) ErrorName() string { return "LeaveMeetingReqValidationError" }

// Error satisfies the builtin error interface
func (e LeaveMeetingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveMeetingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveMeetingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveMeetingReqValidationError{}

// Validate checks the field values on LeaveMeetingResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveMeetingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveMeetingRespMultiError, or nil if none found.
func (m *LeaveMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveMeetingRespMultiError(errors)
	}

	return nil
}

// LeaveMeetingRespMultiError is an error wrapping multiple validation errors
// returned by LeaveMeetingResp.ValidateAll() if the designated constraints
// aren't met.
type LeaveMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveMeetingRespMultiError) AllErrors() []error { return m }

// LeaveMeetingRespValidationError is the validation error returned by
// LeaveMeetingResp.Validate if the designated constraints aren't met.
type LeaveMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveMeetingRespValidationError) ErrorName() string { return "LeaveMeetingRespValidationError" }

// Error satisfies the builtin error interface
func (e LeaveMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveMeetingRespValidationError{}

// Validate checks the field values on EndMeetingReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndMeetingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndMeetingReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndMeetingReqMultiError, or
// nil if none found.
func (m *EndMeetingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EndMeetingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	// no validation rules for EndType

	if len(errors) > 0 {
		return EndMeetingReqMultiError(errors)
	}

	return nil
}

// EndMeetingReqMultiError is an error wrapping multiple validation errors
// returned by EndMeetingReq.ValidateAll() if the designated constraints
// aren't met.
type EndMeetingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndMeetingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndMeetingReqMultiError) AllErrors() []error { return m }

// EndMeetingReqValidationError is the validation error returned by
// EndMeetingReq.Validate if the designated constraints aren't met.
type EndMeetingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndMeetingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndMeetingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndMeetingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndMeetingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndMeetingReqValidationError) ErrorName() string { return "EndMeetingReqValidationError" }

// Error satisfies the builtin error interface
func (e EndMeetingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndMeetingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndMeetingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndMeetingReqValidationError{}

// Validate checks the field values on EndMeetingResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndMeetingResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndMeetingRespMultiError,
// or nil if none found.
func (m *EndMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *EndMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EndMeetingRespMultiError(errors)
	}

	return nil
}

// EndMeetingRespMultiError is an error wrapping multiple validation errors
// returned by EndMeetingResp.ValidateAll() if the designated constraints
// aren't met.
type EndMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndMeetingRespMultiError) AllErrors() []error { return m }

// EndMeetingRespValidationError is the validation error returned by
// EndMeetingResp.Validate if the designated constraints aren't met.
type EndMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndMeetingRespValidationError) ErrorName() string { return "EndMeetingRespValidationError" }

// Error satisfies the builtin error interface
func (e EndMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndMeetingRespValidationError{}

// Validate checks the field values on GetMeetingsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeetingsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeetingsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeetingsReqMultiError,
// or nil if none found.
func (m *GetMeetingsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeetingsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetMeetingsReqMultiError(errors)
	}

	return nil
}

// GetMeetingsReqMultiError is an error wrapping multiple validation errors
// returned by GetMeetingsReq.ValidateAll() if the designated constraints
// aren't met.
type GetMeetingsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeetingsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeetingsReqMultiError) AllErrors() []error { return m }

// GetMeetingsReqValidationError is the validation error returned by
// GetMeetingsReq.Validate if the designated constraints aren't met.
type GetMeetingsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeetingsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeetingsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeetingsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeetingsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeetingsReqValidationError) ErrorName() string { return "GetMeetingsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMeetingsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeetingsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeetingsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeetingsReqValidationError{}

// Validate checks the field values on GetMeetingsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMeetingsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeetingsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMeetingsRespMultiError, or nil if none found.
func (m *GetMeetingsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeetingsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMeetingDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMeetingsRespValidationError{
						field:  fmt.Sprintf("MeetingDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMeetingsRespValidationError{
						field:  fmt.Sprintf("MeetingDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMeetingsRespValidationError{
					field:  fmt.Sprintf("MeetingDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMeetingsRespMultiError(errors)
	}

	return nil
}

// GetMeetingsRespMultiError is an error wrapping multiple validation errors
// returned by GetMeetingsResp.ValidateAll() if the designated constraints
// aren't met.
type GetMeetingsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeetingsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeetingsRespMultiError) AllErrors() []error { return m }

// GetMeetingsRespValidationError is the validation error returned by
// GetMeetingsResp.Validate if the designated constraints aren't met.
type GetMeetingsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeetingsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeetingsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeetingsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeetingsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeetingsRespValidationError) ErrorName() string { return "GetMeetingsRespValidationError" }

// Error satisfies the builtin error interface
func (e GetMeetingsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeetingsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeetingsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeetingsRespValidationError{}

// Validate checks the field values on GetMeetingReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeetingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeetingReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeetingReqMultiError, or
// nil if none found.
func (m *GetMeetingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeetingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for MeetingID

	if len(errors) > 0 {
		return GetMeetingReqMultiError(errors)
	}

	return nil
}

// GetMeetingReqMultiError is an error wrapping multiple validation errors
// returned by GetMeetingReq.ValidateAll() if the designated constraints
// aren't met.
type GetMeetingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeetingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeetingReqMultiError) AllErrors() []error { return m }

// GetMeetingReqValidationError is the validation error returned by
// GetMeetingReq.Validate if the designated constraints aren't met.
type GetMeetingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeetingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeetingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeetingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeetingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeetingReqValidationError) ErrorName() string { return "GetMeetingReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMeetingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeetingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeetingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeetingReqValidationError{}

// Validate checks the field values on GetMeetingResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeetingResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeetingRespMultiError,
// or nil if none found.
func (m *GetMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeetingDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMeetingRespValidationError{
					field:  "MeetingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMeetingRespValidationError{
					field:  "MeetingDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeetingDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMeetingRespValidationError{
				field:  "MeetingDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMeetingRespMultiError(errors)
	}

	return nil
}

// GetMeetingRespMultiError is an error wrapping multiple validation errors
// returned by GetMeetingResp.ValidateAll() if the designated constraints
// aren't met.
type GetMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeetingRespMultiError) AllErrors() []error { return m }

// GetMeetingRespValidationError is the validation error returned by
// GetMeetingResp.Validate if the designated constraints aren't met.
type GetMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeetingRespValidationError) ErrorName() string { return "GetMeetingRespValidationError" }

// Error satisfies the builtin error interface
func (e GetMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeetingRespValidationError{}

// Validate checks the field values on ModifyMeetingParticipantNickNameReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ModifyMeetingParticipantNickNameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyMeetingParticipantNickNameReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ModifyMeetingParticipantNickNameReqMultiError, or nil if none found.
func (m *ModifyMeetingParticipantNickNameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyMeetingParticipantNickNameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	// no validation rules for ParticipantUserID

	// no validation rules for Nickname

	if len(errors) > 0 {
		return ModifyMeetingParticipantNickNameReqMultiError(errors)
	}

	return nil
}

// ModifyMeetingParticipantNickNameReqMultiError is an error wrapping multiple
// validation errors returned by
// ModifyMeetingParticipantNickNameReq.ValidateAll() if the designated
// constraints aren't met.
type ModifyMeetingParticipantNickNameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyMeetingParticipantNickNameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyMeetingParticipantNickNameReqMultiError) AllErrors() []error { return m }

// ModifyMeetingParticipantNickNameReqValidationError is the validation error
// returned by ModifyMeetingParticipantNickNameReq.Validate if the designated
// constraints aren't met.
type ModifyMeetingParticipantNickNameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyMeetingParticipantNickNameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyMeetingParticipantNickNameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyMeetingParticipantNickNameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyMeetingParticipantNickNameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyMeetingParticipantNickNameReqValidationError) ErrorName() string {
	return "ModifyMeetingParticipantNickNameReqValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyMeetingParticipantNickNameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyMeetingParticipantNickNameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyMeetingParticipantNickNameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyMeetingParticipantNickNameReqValidationError{}

// Validate checks the field values on ModifyMeetingParticipantNickNameResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ModifyMeetingParticipantNickNameResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyMeetingParticipantNickNameResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ModifyMeetingParticipantNickNameRespMultiError, or nil if none found.
func (m *ModifyMeetingParticipantNickNameResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyMeetingParticipantNickNameResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ModifyMeetingParticipantNickNameRespMultiError(errors)
	}

	return nil
}

// ModifyMeetingParticipantNickNameRespMultiError is an error wrapping multiple
// validation errors returned by
// ModifyMeetingParticipantNickNameResp.ValidateAll() if the designated
// constraints aren't met.
type ModifyMeetingParticipantNickNameRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyMeetingParticipantNickNameRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyMeetingParticipantNickNameRespMultiError) AllErrors() []error { return m }

// ModifyMeetingParticipantNickNameRespValidationError is the validation error
// returned by ModifyMeetingParticipantNickNameResp.Validate if the designated
// constraints aren't met.
type ModifyMeetingParticipantNickNameRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyMeetingParticipantNickNameRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyMeetingParticipantNickNameRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyMeetingParticipantNickNameRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyMeetingParticipantNickNameRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyMeetingParticipantNickNameRespValidationError) ErrorName() string {
	return "ModifyMeetingParticipantNickNameRespValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyMeetingParticipantNickNameRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyMeetingParticipantNickNameResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyMeetingParticipantNickNameRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyMeetingParticipantNickNameRespValidationError{}

// Validate checks the field values on UpdateMeetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMeetingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMeetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMeetingRequestMultiError, or nil if none found.
func (m *UpdateMeetingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMeetingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UpdatingUserID

	if all {
		switch v := interface{}(m.GetTitle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "Title",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "Title",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTitle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "Title",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduledTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "ScheduledTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeetingDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "MeetingDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "MeetingDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeetingDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "MeetingDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "Password",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeZone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "TimeZone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "TimeZone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeZone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "TimeZone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepeatInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "RepeatInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "RepeatInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "RepeatInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCanParticipantsEnableCamera()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "CanParticipantsEnableCamera",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "CanParticipantsEnableCamera",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCanParticipantsEnableCamera()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "CanParticipantsEnableCamera",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCanParticipantsUnmuteMicrophone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "CanParticipantsUnmuteMicrophone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "CanParticipantsUnmuteMicrophone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCanParticipantsUnmuteMicrophone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "CanParticipantsUnmuteMicrophone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCanParticipantsShareScreen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "CanParticipantsShareScreen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "CanParticipantsShareScreen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCanParticipantsShareScreen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "CanParticipantsShareScreen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDisableCameraOnJoin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "DisableCameraOnJoin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "DisableCameraOnJoin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisableCameraOnJoin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "DisableCameraOnJoin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDisableMicrophoneOnJoin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "DisableMicrophoneOnJoin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "DisableMicrophoneOnJoin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisableMicrophoneOnJoin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "DisableMicrophoneOnJoin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCanParticipantJoinMeetingEarly()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "CanParticipantJoinMeetingEarly",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "CanParticipantJoinMeetingEarly",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCanParticipantJoinMeetingEarly()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "CanParticipantJoinMeetingEarly",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLockMeeting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "LockMeeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "LockMeeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLockMeeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "LockMeeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAudioEncouragement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "AudioEncouragement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "AudioEncouragement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAudioEncouragement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "AudioEncouragement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideoMirroring()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "VideoMirroring",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeetingRequestValidationError{
					field:  "VideoMirroring",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideoMirroring()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestValidationError{
				field:  "VideoMirroring",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMeetingRequestMultiError(errors)
	}

	return nil
}

// UpdateMeetingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMeetingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMeetingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMeetingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMeetingRequestMultiError) AllErrors() []error { return m }

// UpdateMeetingRequestValidationError is the validation error returned by
// UpdateMeetingRequest.Validate if the designated constraints aren't met.
type UpdateMeetingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeetingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeetingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeetingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeetingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeetingRequestValidationError) ErrorName() string {
	return "UpdateMeetingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMeetingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeetingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeetingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeetingRequestValidationError{}

// Validate checks the field values on UpdateMeetingResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMeetingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMeetingRespMultiError, or nil if none found.
func (m *UpdateMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMeetingRespMultiError(errors)
	}

	return nil
}

// UpdateMeetingRespMultiError is an error wrapping multiple validation errors
// returned by UpdateMeetingResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMeetingRespMultiError) AllErrors() []error { return m }

// UpdateMeetingRespValidationError is the validation error returned by
// UpdateMeetingResp.Validate if the designated constraints aren't met.
type UpdateMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeetingRespValidationError) ErrorName() string {
	return "UpdateMeetingRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeetingRespValidationError{}

// Validate checks the field values on PersonalMeetingSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersonalMeetingSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersonalMeetingSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PersonalMeetingSettingMultiError, or nil if none found.
func (m *PersonalMeetingSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *PersonalMeetingSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CameraOnEntry

	// no validation rules for MicrophoneOnEntry

	if len(errors) > 0 {
		return PersonalMeetingSettingMultiError(errors)
	}

	return nil
}

// PersonalMeetingSettingMultiError is an error wrapping multiple validation
// errors returned by PersonalMeetingSetting.ValidateAll() if the designated
// constraints aren't met.
type PersonalMeetingSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonalMeetingSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonalMeetingSettingMultiError) AllErrors() []error { return m }

// PersonalMeetingSettingValidationError is the validation error returned by
// PersonalMeetingSetting.Validate if the designated constraints aren't met.
type PersonalMeetingSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonalMeetingSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonalMeetingSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonalMeetingSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonalMeetingSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonalMeetingSettingValidationError) ErrorName() string {
	return "PersonalMeetingSettingValidationError"
}

// Error satisfies the builtin error interface
func (e PersonalMeetingSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersonalMeetingSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonalMeetingSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonalMeetingSettingValidationError{}

// Validate checks the field values on GetPersonalMeetingSettingsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPersonalMeetingSettingsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPersonalMeetingSettingsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPersonalMeetingSettingsReqMultiError, or nil if none found.
func (m *GetPersonalMeetingSettingsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPersonalMeetingSettingsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetPersonalMeetingSettingsReqMultiError(errors)
	}

	return nil
}

// GetPersonalMeetingSettingsReqMultiError is an error wrapping multiple
// validation errors returned by GetPersonalMeetingSettingsReq.ValidateAll()
// if the designated constraints aren't met.
type GetPersonalMeetingSettingsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPersonalMeetingSettingsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPersonalMeetingSettingsReqMultiError) AllErrors() []error { return m }

// GetPersonalMeetingSettingsReqValidationError is the validation error
// returned by GetPersonalMeetingSettingsReq.Validate if the designated
// constraints aren't met.
type GetPersonalMeetingSettingsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalMeetingSettingsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalMeetingSettingsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalMeetingSettingsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalMeetingSettingsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalMeetingSettingsReqValidationError) ErrorName() string {
	return "GetPersonalMeetingSettingsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalMeetingSettingsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalMeetingSettingsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalMeetingSettingsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalMeetingSettingsReqValidationError{}

// Validate checks the field values on GetPersonalMeetingSettingsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPersonalMeetingSettingsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPersonalMeetingSettingsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPersonalMeetingSettingsRespMultiError, or nil if none found.
func (m *GetPersonalMeetingSettingsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPersonalMeetingSettingsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPersonalMeetingSettingsRespValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPersonalMeetingSettingsRespValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPersonalMeetingSettingsRespValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPersonalMeetingSettingsRespMultiError(errors)
	}

	return nil
}

// GetPersonalMeetingSettingsRespMultiError is an error wrapping multiple
// validation errors returned by GetPersonalMeetingSettingsResp.ValidateAll()
// if the designated constraints aren't met.
type GetPersonalMeetingSettingsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPersonalMeetingSettingsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPersonalMeetingSettingsRespMultiError) AllErrors() []error { return m }

// GetPersonalMeetingSettingsRespValidationError is the validation error
// returned by GetPersonalMeetingSettingsResp.Validate if the designated
// constraints aren't met.
type GetPersonalMeetingSettingsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalMeetingSettingsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalMeetingSettingsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalMeetingSettingsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalMeetingSettingsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalMeetingSettingsRespValidationError) ErrorName() string {
	return "GetPersonalMeetingSettingsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalMeetingSettingsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalMeetingSettingsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalMeetingSettingsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalMeetingSettingsRespValidationError{}

// Validate checks the field values on SetPersonalMeetingSettingsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPersonalMeetingSettingsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPersonalMeetingSettingsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetPersonalMeetingSettingsReqMultiError, or nil if none found.
func (m *SetPersonalMeetingSettingsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPersonalMeetingSettingsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetCameraOnEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetPersonalMeetingSettingsReqValidationError{
					field:  "CameraOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetPersonalMeetingSettingsReqValidationError{
					field:  "CameraOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCameraOnEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetPersonalMeetingSettingsReqValidationError{
				field:  "CameraOnEntry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMicrophoneOnEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetPersonalMeetingSettingsReqValidationError{
					field:  "MicrophoneOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetPersonalMeetingSettingsReqValidationError{
					field:  "MicrophoneOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMicrophoneOnEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetPersonalMeetingSettingsReqValidationError{
				field:  "MicrophoneOnEntry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetPersonalMeetingSettingsReqMultiError(errors)
	}

	return nil
}

// SetPersonalMeetingSettingsReqMultiError is an error wrapping multiple
// validation errors returned by SetPersonalMeetingSettingsReq.ValidateAll()
// if the designated constraints aren't met.
type SetPersonalMeetingSettingsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPersonalMeetingSettingsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPersonalMeetingSettingsReqMultiError) AllErrors() []error { return m }

// SetPersonalMeetingSettingsReqValidationError is the validation error
// returned by SetPersonalMeetingSettingsReq.Validate if the designated
// constraints aren't met.
type SetPersonalMeetingSettingsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPersonalMeetingSettingsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPersonalMeetingSettingsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPersonalMeetingSettingsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPersonalMeetingSettingsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPersonalMeetingSettingsReqValidationError) ErrorName() string {
	return "SetPersonalMeetingSettingsReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetPersonalMeetingSettingsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPersonalMeetingSettingsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPersonalMeetingSettingsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPersonalMeetingSettingsReqValidationError{}

// Validate checks the field values on SetPersonalMeetingSettingsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPersonalMeetingSettingsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPersonalMeetingSettingsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetPersonalMeetingSettingsRespMultiError, or nil if none found.
func (m *SetPersonalMeetingSettingsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPersonalMeetingSettingsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetPersonalMeetingSettingsRespMultiError(errors)
	}

	return nil
}

// SetPersonalMeetingSettingsRespMultiError is an error wrapping multiple
// validation errors returned by SetPersonalMeetingSettingsResp.ValidateAll()
// if the designated constraints aren't met.
type SetPersonalMeetingSettingsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPersonalMeetingSettingsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPersonalMeetingSettingsRespMultiError) AllErrors() []error { return m }

// SetPersonalMeetingSettingsRespValidationError is the validation error
// returned by SetPersonalMeetingSettingsResp.Validate if the designated
// constraints aren't met.
type SetPersonalMeetingSettingsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPersonalMeetingSettingsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPersonalMeetingSettingsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPersonalMeetingSettingsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPersonalMeetingSettingsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPersonalMeetingSettingsRespValidationError) ErrorName() string {
	return "SetPersonalMeetingSettingsRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetPersonalMeetingSettingsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPersonalMeetingSettingsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPersonalMeetingSettingsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPersonalMeetingSettingsRespValidationError{}

// Validate checks the field values on PersonalData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PersonalData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersonalData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PersonalDataMultiError, or
// nil if none found.
func (m *PersonalData) ValidateAll() error {
	return m.validate(true)
}

func (m *PersonalData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetPersonalSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersonalDataValidationError{
					field:  "PersonalSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersonalDataValidationError{
					field:  "PersonalSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPersonalSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonalDataValidationError{
				field:  "PersonalSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLimitSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersonalDataValidationError{
					field:  "LimitSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersonalDataValidationError{
					field:  "LimitSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLimitSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonalDataValidationError{
				field:  "LimitSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PersonalDataMultiError(errors)
	}

	return nil
}

// PersonalDataMultiError is an error wrapping multiple validation errors
// returned by PersonalData.ValidateAll() if the designated constraints aren't met.
type PersonalDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonalDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonalDataMultiError) AllErrors() []error { return m }

// PersonalDataValidationError is the validation error returned by
// PersonalData.Validate if the designated constraints aren't met.
type PersonalDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonalDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonalDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonalDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonalDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonalDataValidationError) ErrorName() string { return "PersonalDataValidationError" }

// Error satisfies the builtin error interface
func (e PersonalDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersonalData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonalDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonalDataValidationError{}

// Validate checks the field values on MeetingMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MeetingMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeetingMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeetingMetadataMultiError, or nil if none found.
func (m *MeetingMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *MeetingMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeetingMetadataValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeetingMetadataValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingMetadataValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPersonalData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MeetingMetadataValidationError{
						field:  fmt.Sprintf("PersonalData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MeetingMetadataValidationError{
						field:  fmt.Sprintf("PersonalData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeetingMetadataValidationError{
					field:  fmt.Sprintf("PersonalData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MeetingMetadataMultiError(errors)
	}

	return nil
}

// MeetingMetadataMultiError is an error wrapping multiple validation errors
// returned by MeetingMetadata.ValidateAll() if the designated constraints
// aren't met.
type MeetingMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeetingMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeetingMetadataMultiError) AllErrors() []error { return m }

// MeetingMetadataValidationError is the validation error returned by
// MeetingMetadata.Validate if the designated constraints aren't met.
type MeetingMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingMetadataValidationError) ErrorName() string { return "MeetingMetadataValidationError" }

// Error satisfies the builtin error interface
func (e MeetingMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingMetadataValidationError{}

// Validate checks the field values on OperateRoomAllStreamReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperateRoomAllStreamReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperateRoomAllStreamReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperateRoomAllStreamReqMultiError, or nil if none found.
func (m *OperateRoomAllStreamReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OperateRoomAllStreamReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for OperatorUserID

	if all {
		switch v := interface{}(m.GetCameraOnEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperateRoomAllStreamReqValidationError{
					field:  "CameraOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperateRoomAllStreamReqValidationError{
					field:  "CameraOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCameraOnEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperateRoomAllStreamReqValidationError{
				field:  "CameraOnEntry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMicrophoneOnEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperateRoomAllStreamReqValidationError{
					field:  "MicrophoneOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperateRoomAllStreamReqValidationError{
					field:  "MicrophoneOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMicrophoneOnEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperateRoomAllStreamReqValidationError{
				field:  "MicrophoneOnEntry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperateRoomAllStreamReqMultiError(errors)
	}

	return nil
}

// OperateRoomAllStreamReqMultiError is an error wrapping multiple validation
// errors returned by OperateRoomAllStreamReq.ValidateAll() if the designated
// constraints aren't met.
type OperateRoomAllStreamReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperateRoomAllStreamReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperateRoomAllStreamReqMultiError) AllErrors() []error { return m }

// OperateRoomAllStreamReqValidationError is the validation error returned by
// OperateRoomAllStreamReq.Validate if the designated constraints aren't met.
type OperateRoomAllStreamReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperateRoomAllStreamReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperateRoomAllStreamReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperateRoomAllStreamReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperateRoomAllStreamReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperateRoomAllStreamReqValidationError) ErrorName() string {
	return "OperateRoomAllStreamReqValidationError"
}

// Error satisfies the builtin error interface
func (e OperateRoomAllStreamReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperateRoomAllStreamReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperateRoomAllStreamReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperateRoomAllStreamReqValidationError{}

// Validate checks the field values on OperateRoomAllStreamResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperateRoomAllStreamResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperateRoomAllStreamResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperateRoomAllStreamRespMultiError, or nil if none found.
func (m *OperateRoomAllStreamResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OperateRoomAllStreamResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OperateRoomAllStreamRespMultiError(errors)
	}

	return nil
}

// OperateRoomAllStreamRespMultiError is an error wrapping multiple validation
// errors returned by OperateRoomAllStreamResp.ValidateAll() if the designated
// constraints aren't met.
type OperateRoomAllStreamRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperateRoomAllStreamRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperateRoomAllStreamRespMultiError) AllErrors() []error { return m }

// OperateRoomAllStreamRespValidationError is the validation error returned by
// OperateRoomAllStreamResp.Validate if the designated constraints aren't met.
type OperateRoomAllStreamRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperateRoomAllStreamRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperateRoomAllStreamRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperateRoomAllStreamRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperateRoomAllStreamRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperateRoomAllStreamRespValidationError) ErrorName() string {
	return "OperateRoomAllStreamRespValidationError"
}

// Error satisfies the builtin error interface
func (e OperateRoomAllStreamRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperateRoomAllStreamResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperateRoomAllStreamRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperateRoomAllStreamRespValidationError{}

// Validate checks the field values on RemoveMeetingParticipantsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMeetingParticipantsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMeetingParticipantsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMeetingParticipantsReqMultiError, or nil if none found.
func (m *RemoveMeetingParticipantsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMeetingParticipantsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	if len(errors) > 0 {
		return RemoveMeetingParticipantsReqMultiError(errors)
	}

	return nil
}

// RemoveMeetingParticipantsReqMultiError is an error wrapping multiple
// validation errors returned by RemoveMeetingParticipantsReq.ValidateAll() if
// the designated constraints aren't met.
type RemoveMeetingParticipantsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMeetingParticipantsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMeetingParticipantsReqMultiError) AllErrors() []error { return m }

// RemoveMeetingParticipantsReqValidationError is the validation error returned
// by RemoveMeetingParticipantsReq.Validate if the designated constraints
// aren't met.
type RemoveMeetingParticipantsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMeetingParticipantsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMeetingParticipantsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMeetingParticipantsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMeetingParticipantsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMeetingParticipantsReqValidationError) ErrorName() string {
	return "RemoveMeetingParticipantsReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMeetingParticipantsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMeetingParticipantsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMeetingParticipantsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMeetingParticipantsReqValidationError{}

// Validate checks the field values on RemoveMeetingParticipantsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMeetingParticipantsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMeetingParticipantsResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveMeetingParticipantsRespMultiError, or nil if none found.
func (m *RemoveMeetingParticipantsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMeetingParticipantsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveMeetingParticipantsRespMultiError(errors)
	}

	return nil
}

// RemoveMeetingParticipantsRespMultiError is an error wrapping multiple
// validation errors returned by RemoveMeetingParticipantsResp.ValidateAll()
// if the designated constraints aren't met.
type RemoveMeetingParticipantsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMeetingParticipantsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMeetingParticipantsRespMultiError) AllErrors() []error { return m }

// RemoveMeetingParticipantsRespValidationError is the validation error
// returned by RemoveMeetingParticipantsResp.Validate if the designated
// constraints aren't met.
type RemoveMeetingParticipantsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMeetingParticipantsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMeetingParticipantsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMeetingParticipantsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMeetingParticipantsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMeetingParticipantsRespValidationError) ErrorName() string {
	return "RemoveMeetingParticipantsRespValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMeetingParticipantsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMeetingParticipantsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMeetingParticipantsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMeetingParticipantsRespValidationError{}

// Validate checks the field values on SetMeetingHostInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMeetingHostInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMeetingHostInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMeetingHostInfoReqMultiError, or nil if none found.
func (m *SetMeetingHostInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMeetingHostInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetHostUserID()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetMeetingHostInfoReqValidationError{
					field:  "HostUserID",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetMeetingHostInfoReqValidationError{
					field:  "HostUserID",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHostUserID()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMeetingHostInfoReqValidationError{
				field:  "HostUserID",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetMeetingHostInfoReqMultiError(errors)
	}

	return nil
}

// SetMeetingHostInfoReqMultiError is an error wrapping multiple validation
// errors returned by SetMeetingHostInfoReq.ValidateAll() if the designated
// constraints aren't met.
type SetMeetingHostInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMeetingHostInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMeetingHostInfoReqMultiError) AllErrors() []error { return m }

// SetMeetingHostInfoReqValidationError is the validation error returned by
// SetMeetingHostInfoReq.Validate if the designated constraints aren't met.
type SetMeetingHostInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMeetingHostInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMeetingHostInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMeetingHostInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMeetingHostInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMeetingHostInfoReqValidationError) ErrorName() string {
	return "SetMeetingHostInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetMeetingHostInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMeetingHostInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMeetingHostInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMeetingHostInfoReqValidationError{}

// Validate checks the field values on SetMeetingHostInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMeetingHostInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMeetingHostInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMeetingHostInfoRespMultiError, or nil if none found.
func (m *SetMeetingHostInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMeetingHostInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetMeetingHostInfoRespMultiError(errors)
	}

	return nil
}

// SetMeetingHostInfoRespMultiError is an error wrapping multiple validation
// errors returned by SetMeetingHostInfoResp.ValidateAll() if the designated
// constraints aren't met.
type SetMeetingHostInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMeetingHostInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMeetingHostInfoRespMultiError) AllErrors() []error { return m }

// SetMeetingHostInfoRespValidationError is the validation error returned by
// SetMeetingHostInfoResp.Validate if the designated constraints aren't met.
type SetMeetingHostInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMeetingHostInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMeetingHostInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMeetingHostInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMeetingHostInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMeetingHostInfoRespValidationError) ErrorName() string {
	return "SetMeetingHostInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetMeetingHostInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMeetingHostInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMeetingHostInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMeetingHostInfoRespValidationError{}

// Validate checks the field values on NotifyMeetingData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NotifyMeetingData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyMeetingData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyMeetingDataMultiError, or nil if none found.
func (m *NotifyMeetingData) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyMeetingData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorUserID

	switch v := m.MessageType.(type) {
	case *NotifyMeetingData_StreamOperateData:
		if v == nil {
			err := NotifyMeetingDataValidationError{
				field:  "MessageType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStreamOperateData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyMeetingDataValidationError{
						field:  "StreamOperateData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyMeetingDataValidationError{
						field:  "StreamOperateData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStreamOperateData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyMeetingDataValidationError{
					field:  "StreamOperateData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyMeetingData_MeetingHostData:
		if v == nil {
			err := NotifyMeetingDataValidationError{
				field:  "MessageType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMeetingHostData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyMeetingDataValidationError{
						field:  "MeetingHostData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyMeetingDataValidationError{
						field:  "MeetingHostData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMeetingHostData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyMeetingDataValidationError{
					field:  "MeetingHostData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyMeetingData_KickOffMeetingData:
		if v == nil {
			err := NotifyMeetingDataValidationError{
				field:  "MessageType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKickOffMeetingData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyMeetingDataValidationError{
						field:  "KickOffMeetingData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyMeetingDataValidationError{
						field:  "KickOffMeetingData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKickOffMeetingData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyMeetingDataValidationError{
					field:  "KickOffMeetingData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return NotifyMeetingDataMultiError(errors)
	}

	return nil
}

// NotifyMeetingDataMultiError is an error wrapping multiple validation errors
// returned by NotifyMeetingData.ValidateAll() if the designated constraints
// aren't met.
type NotifyMeetingDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyMeetingDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyMeetingDataMultiError) AllErrors() []error { return m }

// NotifyMeetingDataValidationError is the validation error returned by
// NotifyMeetingData.Validate if the designated constraints aren't met.
type NotifyMeetingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyMeetingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyMeetingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyMeetingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyMeetingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyMeetingDataValidationError) ErrorName() string {
	return "NotifyMeetingDataValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyMeetingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyMeetingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyMeetingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyMeetingDataValidationError{}

// Validate checks the field values on KickOffMeetingData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickOffMeetingData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickOffMeetingData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickOffMeetingDataMultiError, or nil if none found.
func (m *KickOffMeetingData) ValidateAll() error {
	return m.validate(true)
}

func (m *KickOffMeetingData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Nickname

	// no validation rules for ReasonCode

	// no validation rules for Reason

	if len(errors) > 0 {
		return KickOffMeetingDataMultiError(errors)
	}

	return nil
}

// KickOffMeetingDataMultiError is an error wrapping multiple validation errors
// returned by KickOffMeetingData.ValidateAll() if the designated constraints
// aren't met.
type KickOffMeetingDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickOffMeetingDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickOffMeetingDataMultiError) AllErrors() []error { return m }

// KickOffMeetingDataValidationError is the validation error returned by
// KickOffMeetingData.Validate if the designated constraints aren't met.
type KickOffMeetingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickOffMeetingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickOffMeetingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickOffMeetingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickOffMeetingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickOffMeetingDataValidationError) ErrorName() string {
	return "KickOffMeetingDataValidationError"
}

// Error satisfies the builtin error interface
func (e KickOffMeetingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickOffMeetingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickOffMeetingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickOffMeetingDataValidationError{}

// Validate checks the field values on StreamOperateData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StreamOperateData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamOperateData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamOperateDataMultiError, or nil if none found.
func (m *StreamOperateData) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamOperateData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperation() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamOperateDataValidationError{
						field:  fmt.Sprintf("Operation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamOperateDataValidationError{
						field:  fmt.Sprintf("Operation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamOperateDataValidationError{
					field:  fmt.Sprintf("Operation[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamOperateDataMultiError(errors)
	}

	return nil
}

// StreamOperateDataMultiError is an error wrapping multiple validation errors
// returned by StreamOperateData.ValidateAll() if the designated constraints
// aren't met.
type StreamOperateDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamOperateDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamOperateDataMultiError) AllErrors() []error { return m }

// StreamOperateDataValidationError is the validation error returned by
// StreamOperateData.Validate if the designated constraints aren't met.
type StreamOperateDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamOperateDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamOperateDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamOperateDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamOperateDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamOperateDataValidationError) ErrorName() string {
	return "StreamOperateDataValidationError"
}

// Error satisfies the builtin error interface
func (e StreamOperateDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamOperateData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamOperateDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamOperateDataValidationError{}

// Validate checks the field values on UserOperationData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserOperationData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserOperationData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserOperationDataMultiError, or nil if none found.
func (m *UserOperationData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserOperationData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetCameraOnEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserOperationDataValidationError{
					field:  "CameraOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserOperationDataValidationError{
					field:  "CameraOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCameraOnEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserOperationDataValidationError{
				field:  "CameraOnEntry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMicrophoneOnEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserOperationDataValidationError{
					field:  "MicrophoneOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserOperationDataValidationError{
					field:  "MicrophoneOnEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMicrophoneOnEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserOperationDataValidationError{
				field:  "MicrophoneOnEntry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserOperationDataMultiError(errors)
	}

	return nil
}

// UserOperationDataMultiError is an error wrapping multiple validation errors
// returned by UserOperationData.ValidateAll() if the designated constraints
// aren't met.
type UserOperationDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserOperationDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserOperationDataMultiError) AllErrors() []error { return m }

// UserOperationDataValidationError is the validation error returned by
// UserOperationData.Validate if the designated constraints aren't met.
type UserOperationDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserOperationDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserOperationDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserOperationDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserOperationDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserOperationDataValidationError) ErrorName() string {
	return "UserOperationDataValidationError"
}

// Error satisfies the builtin error interface
func (e UserOperationDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserOperationData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserOperationDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserOperationDataValidationError{}

// Validate checks the field values on MeetingHostData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MeetingHostData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeetingHostData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeetingHostDataMultiError, or nil if none found.
func (m *MeetingHostData) ValidateAll() error {
	return m.validate(true)
}

func (m *MeetingHostData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorNickname

	// no validation rules for UserID

	// no validation rules for HostType

	if len(errors) > 0 {
		return MeetingHostDataMultiError(errors)
	}

	return nil
}

// MeetingHostDataMultiError is an error wrapping multiple validation errors
// returned by MeetingHostData.ValidateAll() if the designated constraints
// aren't met.
type MeetingHostDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeetingHostDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeetingHostDataMultiError) AllErrors() []error { return m }

// MeetingHostDataValidationError is the validation error returned by
// MeetingHostData.Validate if the designated constraints aren't met.
type MeetingHostDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingHostDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingHostDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingHostDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingHostDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingHostDataValidationError) ErrorName() string { return "MeetingHostDataValidationError" }

// Error satisfies the builtin error interface
func (e MeetingHostDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingHostData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingHostDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingHostDataValidationError{}

// Validate checks the field values on CleanPreviousMeetingsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CleanPreviousMeetingsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CleanPreviousMeetingsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CleanPreviousMeetingsReqMultiError, or nil if none found.
func (m *CleanPreviousMeetingsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CleanPreviousMeetingsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for ReasonCode

	// no validation rules for Reason

	if len(errors) > 0 {
		return CleanPreviousMeetingsReqMultiError(errors)
	}

	return nil
}

// CleanPreviousMeetingsReqMultiError is an error wrapping multiple validation
// errors returned by CleanPreviousMeetingsReq.ValidateAll() if the designated
// constraints aren't met.
type CleanPreviousMeetingsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CleanPreviousMeetingsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CleanPreviousMeetingsReqMultiError) AllErrors() []error { return m }

// CleanPreviousMeetingsReqValidationError is the validation error returned by
// CleanPreviousMeetingsReq.Validate if the designated constraints aren't met.
type CleanPreviousMeetingsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CleanPreviousMeetingsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CleanPreviousMeetingsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CleanPreviousMeetingsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CleanPreviousMeetingsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CleanPreviousMeetingsReqValidationError) ErrorName() string {
	return "CleanPreviousMeetingsReqValidationError"
}

// Error satisfies the builtin error interface
func (e CleanPreviousMeetingsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCleanPreviousMeetingsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CleanPreviousMeetingsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CleanPreviousMeetingsReqValidationError{}

// Validate checks the field values on CleanPreviousMeetingsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CleanPreviousMeetingsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CleanPreviousMeetingsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CleanPreviousMeetingsRespMultiError, or nil if none found.
func (m *CleanPreviousMeetingsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CleanPreviousMeetingsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CleanPreviousMeetingsRespMultiError(errors)
	}

	return nil
}

// CleanPreviousMeetingsRespMultiError is an error wrapping multiple validation
// errors returned by CleanPreviousMeetingsResp.ValidateAll() if the
// designated constraints aren't met.
type CleanPreviousMeetingsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CleanPreviousMeetingsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CleanPreviousMeetingsRespMultiError) AllErrors() []error { return m }

// CleanPreviousMeetingsRespValidationError is the validation error returned by
// CleanPreviousMeetingsResp.Validate if the designated constraints aren't met.
type CleanPreviousMeetingsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CleanPreviousMeetingsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CleanPreviousMeetingsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CleanPreviousMeetingsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CleanPreviousMeetingsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CleanPreviousMeetingsRespValidationError) ErrorName() string {
	return "CleanPreviousMeetingsRespValidationError"
}

// Error satisfies the builtin error interface
func (e CleanPreviousMeetingsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCleanPreviousMeetingsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CleanPreviousMeetingsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CleanPreviousMeetingsRespValidationError{}

// Validate checks the field values on ToggleRecordMeetingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleRecordMeetingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleRecordMeetingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleRecordMeetingReqMultiError, or nil if none found.
func (m *ToggleRecordMeetingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleRecordMeetingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MeetingID

	// no validation rules for UserID

	// no validation rules for EnableRecord

	if len(errors) > 0 {
		return ToggleRecordMeetingReqMultiError(errors)
	}

	return nil
}

// ToggleRecordMeetingReqMultiError is an error wrapping multiple validation
// errors returned by ToggleRecordMeetingReq.ValidateAll() if the designated
// constraints aren't met.
type ToggleRecordMeetingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleRecordMeetingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleRecordMeetingReqMultiError) AllErrors() []error { return m }

// ToggleRecordMeetingReqValidationError is the validation error returned by
// ToggleRecordMeetingReq.Validate if the designated constraints aren't met.
type ToggleRecordMeetingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleRecordMeetingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleRecordMeetingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleRecordMeetingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleRecordMeetingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleRecordMeetingReqValidationError) ErrorName() string {
	return "ToggleRecordMeetingReqValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleRecordMeetingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleRecordMeetingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleRecordMeetingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleRecordMeetingReqValidationError{}

// Validate checks the field values on ToggleRecordMeetingResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleRecordMeetingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleRecordMeetingResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleRecordMeetingRespMultiError, or nil if none found.
func (m *ToggleRecordMeetingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleRecordMeetingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ToggleRecordMeetingRespMultiError(errors)
	}

	return nil
}

// ToggleRecordMeetingRespMultiError is an error wrapping multiple validation
// errors returned by ToggleRecordMeetingResp.ValidateAll() if the designated
// constraints aren't met.
type ToggleRecordMeetingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleRecordMeetingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleRecordMeetingRespMultiError) AllErrors() []error { return m }

// ToggleRecordMeetingRespValidationError is the validation error returned by
// ToggleRecordMeetingResp.Validate if the designated constraints aren't met.
type ToggleRecordMeetingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleRecordMeetingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleRecordMeetingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleRecordMeetingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleRecordMeetingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleRecordMeetingRespValidationError) ErrorName() string {
	return "ToggleRecordMeetingRespValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleRecordMeetingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleRecordMeetingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleRecordMeetingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleRecordMeetingRespValidationError{}
