// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openmeeting/user/user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDesignateUsersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignateUsersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignateUsersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignateUsersReqMultiError, or nil if none found.
func (m *GetDesignateUsersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignateUsersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDesignateUsersReqMultiError(errors)
	}

	return nil
}

// GetDesignateUsersReqMultiError is an error wrapping multiple validation
// errors returned by GetDesignateUsersReq.ValidateAll() if the designated
// constraints aren't met.
type GetDesignateUsersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignateUsersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignateUsersReqMultiError) AllErrors() []error { return m }

// GetDesignateUsersReqValidationError is the validation error returned by
// GetDesignateUsersReq.Validate if the designated constraints aren't met.
type GetDesignateUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignateUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignateUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignateUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignateUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignateUsersReqValidationError) ErrorName() string {
	return "GetDesignateUsersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignateUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignateUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignateUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignateUsersReqValidationError{}

// Validate checks the field values on GetDesignateUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignateUsersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignateUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignateUsersRespMultiError, or nil if none found.
func (m *GetDesignateUsersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignateUsersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsersInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDesignateUsersRespValidationError{
						field:  fmt.Sprintf("UsersInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDesignateUsersRespValidationError{
						field:  fmt.Sprintf("UsersInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDesignateUsersRespValidationError{
					field:  fmt.Sprintf("UsersInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDesignateUsersRespMultiError(errors)
	}

	return nil
}

// GetDesignateUsersRespMultiError is an error wrapping multiple validation
// errors returned by GetDesignateUsersResp.ValidateAll() if the designated
// constraints aren't met.
type GetDesignateUsersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignateUsersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignateUsersRespMultiError) AllErrors() []error { return m }

// GetDesignateUsersRespValidationError is the validation error returned by
// GetDesignateUsersResp.Validate if the designated constraints aren't met.
type GetDesignateUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignateUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignateUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignateUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignateUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignateUsersRespValidationError) ErrorName() string {
	return "GetDesignateUsersRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignateUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignateUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignateUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignateUsersRespValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Nickname

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserRegisterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReqMultiError, or nil if none found.
func (m *UserRegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserRegisterReqValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserRegisterReqValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserRegisterReqValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserRegisterReqMultiError(errors)
	}

	return nil
}

// UserRegisterReqMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReq.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReqMultiError) AllErrors() []error { return m }

// UserRegisterReqValidationError is the validation error returned by
// UserRegisterReq.Validate if the designated constraints aren't met.
type UserRegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReqValidationError) ErrorName() string { return "UserRegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReqValidationError{}

// Validate checks the field values on UserRegisterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRespMultiError, or nil if none found.
func (m *UserRegisterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserRegisterRespMultiError(errors)
	}

	return nil
}

// UserRegisterRespMultiError is an error wrapping multiple validation errors
// returned by UserRegisterResp.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRespMultiError) AllErrors() []error { return m }

// UserRegisterRespValidationError is the validation error returned by
// UserRegisterResp.Validate if the designated constraints aren't met.
type UserRegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRespValidationError) ErrorName() string { return "UserRegisterRespValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRespValidationError{}

// Validate checks the field values on UserLoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLoginReqMultiError, or
// nil if none found.
func (m *UserLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AreaCode

	// no validation rules for PhoneNumber

	// no validation rules for VerifyCode

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Platform

	// no validation rules for DeviceID

	// no validation rules for Email

	if len(errors) > 0 {
		return UserLoginReqMultiError(errors)
	}

	return nil
}

// UserLoginReqMultiError is an error wrapping multiple validation errors
// returned by UserLoginReq.ValidateAll() if the designated constraints aren't met.
type UserLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginReqMultiError) AllErrors() []error { return m }

// UserLoginReqValidationError is the validation error returned by
// UserLoginReq.Validate if the designated constraints aren't met.
type UserLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginReqValidationError) ErrorName() string { return "UserLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginReqValidationError{}

// Validate checks the field values on UserLoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLoginRespMultiError, or
// nil if none found.
func (m *UserLoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Nickname

	// no validation rules for UserID

	if len(errors) > 0 {
		return UserLoginRespMultiError(errors)
	}

	return nil
}

// UserLoginRespMultiError is an error wrapping multiple validation errors
// returned by UserLoginResp.ValidateAll() if the designated constraints
// aren't met.
type UserLoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginRespMultiError) AllErrors() []error { return m }

// UserLoginRespValidationError is the validation error returned by
// UserLoginResp.Validate if the designated constraints aren't met.
type UserLoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginRespValidationError) ErrorName() string { return "UserLoginRespValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginRespValidationError{}

// Validate checks the field values on GetUserTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenReqMultiError, or nil if none found.
func (m *GetUserTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserTokenReqMultiError(errors)
	}

	return nil
}

// GetUserTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetUserTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenReqMultiError) AllErrors() []error { return m }

// GetUserTokenReqValidationError is the validation error returned by
// GetUserTokenReq.Validate if the designated constraints aren't met.
type GetUserTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenReqValidationError) ErrorName() string { return "GetUserTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenReqValidationError{}

// Validate checks the field values on GetUserTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenRespMultiError, or nil if none found.
func (m *GetUserTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetUserTokenRespMultiError(errors)
	}

	return nil
}

// GetUserTokenRespMultiError is an error wrapping multiple validation errors
// returned by GetUserTokenResp.ValidateAll() if the designated constraints
// aren't met.
type GetUserTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenRespMultiError) AllErrors() []error { return m }

// GetUserTokenRespValidationError is the validation error returned by
// GetUserTokenResp.Validate if the designated constraints aren't met.
type GetUserTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenRespValidationError) ErrorName() string { return "GetUserTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenRespValidationError{}

// Validate checks the field values on GetUserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserInfoReqMultiError,
// or nil if none found.
func (m *GetUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserInfoReqMultiError(errors)
	}

	return nil
}

// GetUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReqMultiError) AllErrors() []error { return m }

// GetUserInfoReqValidationError is the validation error returned by
// GetUserInfoReq.Validate if the designated constraints aren't met.
type GetUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReqValidationError) ErrorName() string { return "GetUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReqValidationError{}

// Validate checks the field values on GetUserInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoRespMultiError, or nil if none found.
func (m *GetUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Nickname

	// no validation rules for Account

	// no validation rules for FaceURL

	if len(errors) > 0 {
		return GetUserInfoRespMultiError(errors)
	}

	return nil
}

// GetUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoRespMultiError) AllErrors() []error { return m }

// GetUserInfoRespValidationError is the validation error returned by
// GetUserInfoResp.Validate if the designated constraints aren't met.
type GetUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoRespValidationError) ErrorName() string { return "GetUserInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoRespValidationError{}

// Validate checks the field values on UpdateUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPasswordReqMultiError, or nil if none found.
func (m *UpdateUserPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Password

	if len(errors) > 0 {
		return UpdateUserPasswordReqMultiError(errors)
	}

	return nil
}

// UpdateUserPasswordReqMultiError is an error wrapping multiple validation
// errors returned by UpdateUserPasswordReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswordReqMultiError) AllErrors() []error { return m }

// UpdateUserPasswordReqValidationError is the validation error returned by
// UpdateUserPasswordReq.Validate if the designated constraints aren't met.
type UpdateUserPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswordReqValidationError) ErrorName() string {
	return "UpdateUserPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswordReqValidationError{}

// Validate checks the field values on UpdateUserPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPasswordRespMultiError, or nil if none found.
func (m *UpdateUserPasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserPasswordRespMultiError(errors)
	}

	return nil
}

// UpdateUserPasswordRespMultiError is an error wrapping multiple validation
// errors returned by UpdateUserPasswordResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserPasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswordRespMultiError) AllErrors() []error { return m }

// UpdateUserPasswordRespValidationError is the validation error returned by
// UpdateUserPasswordResp.Validate if the designated constraints aren't met.
type UpdateUserPasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswordRespValidationError) ErrorName() string {
	return "UpdateUserPasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswordRespValidationError{}

// Validate checks the field values on ClearUserTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClearUserTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearUserTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClearUserTokenReqMultiError, or nil if none found.
func (m *ClearUserTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearUserTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return ClearUserTokenReqMultiError(errors)
	}

	return nil
}

// ClearUserTokenReqMultiError is an error wrapping multiple validation errors
// returned by ClearUserTokenReq.ValidateAll() if the designated constraints
// aren't met.
type ClearUserTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearUserTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearUserTokenReqMultiError) AllErrors() []error { return m }

// ClearUserTokenReqValidationError is the validation error returned by
// ClearUserTokenReq.Validate if the designated constraints aren't met.
type ClearUserTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearUserTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearUserTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearUserTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearUserTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearUserTokenReqValidationError) ErrorName() string {
	return "ClearUserTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e ClearUserTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearUserTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearUserTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearUserTokenReqValidationError{}

// Validate checks the field values on ClearUserTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClearUserTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearUserTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClearUserTokenRespMultiError, or nil if none found.
func (m *ClearUserTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearUserTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClearUserTokenRespMultiError(errors)
	}

	return nil
}

// ClearUserTokenRespMultiError is an error wrapping multiple validation errors
// returned by ClearUserTokenResp.ValidateAll() if the designated constraints
// aren't met.
type ClearUserTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearUserTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearUserTokenRespMultiError) AllErrors() []error { return m }

// ClearUserTokenRespValidationError is the validation error returned by
// ClearUserTokenResp.Validate if the designated constraints aren't met.
type ClearUserTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearUserTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearUserTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearUserTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearUserTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearUserTokenRespValidationError) ErrorName() string {
	return "ClearUserTokenRespValidationError"
}

// Error satisfies the builtin error interface
func (e ClearUserTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearUserTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearUserTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearUserTokenRespValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRespMultiError, or
// nil if none found.
func (m *LogoutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRespMultiError(errors)
	}

	return nil
}

// LogoutRespMultiError is an error wrapping multiple validation errors
// returned by LogoutResp.ValidateAll() if the designated constraints aren't met.
type LogoutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRespMultiError) AllErrors() []error { return m }

// LogoutRespValidationError is the validation error returned by
// LogoutResp.Validate if the designated constraints aren't met.
type LogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRespValidationError) ErrorName() string { return "LogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRespValidationError{}

// Validate checks the field values on ParseTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseTokenReqMultiError, or
// nil if none found.
func (m *ParseTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ParseTokenReqMultiError(errors)
	}

	return nil
}

// ParseTokenReqMultiError is an error wrapping multiple validation errors
// returned by ParseTokenReq.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenReqMultiError) AllErrors() []error { return m }

// ParseTokenReqValidationError is the validation error returned by
// ParseTokenReq.Validate if the designated constraints aren't met.
type ParseTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenReqValidationError) ErrorName() string { return "ParseTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenReqValidationError{}

// Validate checks the field values on ParseTokenResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseTokenRespMultiError,
// or nil if none found.
func (m *ParseTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for ExpireTimeSeconds

	if len(errors) > 0 {
		return ParseTokenRespMultiError(errors)
	}

	return nil
}

// ParseTokenRespMultiError is an error wrapping multiple validation errors
// returned by ParseTokenResp.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenRespMultiError) AllErrors() []error { return m }

// ParseTokenRespValidationError is the validation error returned by
// ParseTokenResp.Validate if the designated constraints aren't met.
type ParseTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenRespValidationError) ErrorName() string { return "ParseTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenRespValidationError{}
