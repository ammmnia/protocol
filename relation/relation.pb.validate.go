// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: relation/relation.proto

package relation

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetPaginationFriendsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaginationFriendsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationFriendsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaginationFriendsReqMultiError, or nil if none found.
func (m *GetPaginationFriendsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationFriendsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaginationFriendsReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaginationFriendsReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaginationFriendsReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetPaginationFriendsReqMultiError(errors)
	}

	return nil
}

// GetPaginationFriendsReqMultiError is an error wrapping multiple validation
// errors returned by GetPaginationFriendsReq.ValidateAll() if the designated
// constraints aren't met.
type GetPaginationFriendsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationFriendsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationFriendsReqMultiError) AllErrors() []error { return m }

// GetPaginationFriendsReqValidationError is the validation error returned by
// GetPaginationFriendsReq.Validate if the designated constraints aren't met.
type GetPaginationFriendsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationFriendsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationFriendsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationFriendsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationFriendsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationFriendsReqValidationError) ErrorName() string {
	return "GetPaginationFriendsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationFriendsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationFriendsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationFriendsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationFriendsReqValidationError{}

// Validate checks the field values on GetPaginationFriendsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaginationFriendsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationFriendsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaginationFriendsRespMultiError, or nil if none found.
func (m *GetPaginationFriendsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationFriendsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendsInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaginationFriendsRespValidationError{
						field:  fmt.Sprintf("FriendsInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaginationFriendsRespValidationError{
						field:  fmt.Sprintf("FriendsInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaginationFriendsRespValidationError{
					field:  fmt.Sprintf("FriendsInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPaginationFriendsRespMultiError(errors)
	}

	return nil
}

// GetPaginationFriendsRespMultiError is an error wrapping multiple validation
// errors returned by GetPaginationFriendsResp.ValidateAll() if the designated
// constraints aren't met.
type GetPaginationFriendsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationFriendsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationFriendsRespMultiError) AllErrors() []error { return m }

// GetPaginationFriendsRespValidationError is the validation error returned by
// GetPaginationFriendsResp.Validate if the designated constraints aren't met.
type GetPaginationFriendsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationFriendsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationFriendsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationFriendsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationFriendsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationFriendsRespValidationError) ErrorName() string {
	return "GetPaginationFriendsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationFriendsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationFriendsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationFriendsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationFriendsRespValidationError{}

// Validate checks the field values on ApplyToAddFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyToAddFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyToAddFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyToAddFriendReqMultiError, or nil if none found.
func (m *ApplyToAddFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyToAddFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserID

	// no validation rules for ToUserID

	// no validation rules for ReqMsg

	// no validation rules for Ex

	if len(errors) > 0 {
		return ApplyToAddFriendReqMultiError(errors)
	}

	return nil
}

// ApplyToAddFriendReqMultiError is an error wrapping multiple validation
// errors returned by ApplyToAddFriendReq.ValidateAll() if the designated
// constraints aren't met.
type ApplyToAddFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyToAddFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyToAddFriendReqMultiError) AllErrors() []error { return m }

// ApplyToAddFriendReqValidationError is the validation error returned by
// ApplyToAddFriendReq.Validate if the designated constraints aren't met.
type ApplyToAddFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyToAddFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyToAddFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyToAddFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyToAddFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyToAddFriendReqValidationError) ErrorName() string {
	return "ApplyToAddFriendReqValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyToAddFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyToAddFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyToAddFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyToAddFriendReqValidationError{}

// Validate checks the field values on ApplyToAddFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyToAddFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyToAddFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyToAddFriendRespMultiError, or nil if none found.
func (m *ApplyToAddFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyToAddFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApplyToAddFriendRespMultiError(errors)
	}

	return nil
}

// ApplyToAddFriendRespMultiError is an error wrapping multiple validation
// errors returned by ApplyToAddFriendResp.ValidateAll() if the designated
// constraints aren't met.
type ApplyToAddFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyToAddFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyToAddFriendRespMultiError) AllErrors() []error { return m }

// ApplyToAddFriendRespValidationError is the validation error returned by
// ApplyToAddFriendResp.Validate if the designated constraints aren't met.
type ApplyToAddFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyToAddFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyToAddFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyToAddFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyToAddFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyToAddFriendRespValidationError) ErrorName() string {
	return "ApplyToAddFriendRespValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyToAddFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyToAddFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyToAddFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyToAddFriendRespValidationError{}

// Validate checks the field values on FriendInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendInfoMultiError, or
// nil if none found.
func (m *FriendInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for FriendUserID

	// no validation rules for FriendNickname

	// no validation rules for FriendFaceURL

	// no validation rules for Remark

	// no validation rules for CreateTime

	// no validation rules for AddSource

	// no validation rules for OperatorUserID

	// no validation rules for Ex

	// no validation rules for IsPinned

	if len(errors) > 0 {
		return FriendInfoMultiError(errors)
	}

	return nil
}

// FriendInfoMultiError is an error wrapping multiple validation errors
// returned by FriendInfo.ValidateAll() if the designated constraints aren't met.
type FriendInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendInfoMultiError) AllErrors() []error { return m }

// FriendInfoValidationError is the validation error returned by
// FriendInfo.Validate if the designated constraints aren't met.
type FriendInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendInfoValidationError) ErrorName() string { return "FriendInfoValidationError" }

// Error satisfies the builtin error interface
func (e FriendInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendInfoValidationError{}

// Validate checks the field values on ImportFriendReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportFriendReqMultiError, or nil if none found.
func (m *ImportFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return ImportFriendReqMultiError(errors)
	}

	return nil
}

// ImportFriendReqMultiError is an error wrapping multiple validation errors
// returned by ImportFriendReq.ValidateAll() if the designated constraints
// aren't met.
type ImportFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportFriendReqMultiError) AllErrors() []error { return m }

// ImportFriendReqValidationError is the validation error returned by
// ImportFriendReq.Validate if the designated constraints aren't met.
type ImportFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportFriendReqValidationError) ErrorName() string { return "ImportFriendReqValidationError" }

// Error satisfies the builtin error interface
func (e ImportFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportFriendReqValidationError{}

// Validate checks the field values on ImportFriendResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportFriendRespMultiError, or nil if none found.
func (m *ImportFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImportFriendRespMultiError(errors)
	}

	return nil
}

// ImportFriendRespMultiError is an error wrapping multiple validation errors
// returned by ImportFriendResp.ValidateAll() if the designated constraints
// aren't met.
type ImportFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportFriendRespMultiError) AllErrors() []error { return m }

// ImportFriendRespValidationError is the validation error returned by
// ImportFriendResp.Validate if the designated constraints aren't met.
type ImportFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportFriendRespValidationError) ErrorName() string { return "ImportFriendRespValidationError" }

// Error satisfies the builtin error interface
func (e ImportFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportFriendRespValidationError{}

// Validate checks the field values on GetPaginationFriendsApplyToReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaginationFriendsApplyToReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationFriendsApplyToReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPaginationFriendsApplyToReqMultiError, or nil if none found.
func (m *GetPaginationFriendsApplyToReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationFriendsApplyToReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaginationFriendsApplyToReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaginationFriendsApplyToReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaginationFriendsApplyToReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaginationFriendsApplyToReqMultiError(errors)
	}

	return nil
}

// GetPaginationFriendsApplyToReqMultiError is an error wrapping multiple
// validation errors returned by GetPaginationFriendsApplyToReq.ValidateAll()
// if the designated constraints aren't met.
type GetPaginationFriendsApplyToReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationFriendsApplyToReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationFriendsApplyToReqMultiError) AllErrors() []error { return m }

// GetPaginationFriendsApplyToReqValidationError is the validation error
// returned by GetPaginationFriendsApplyToReq.Validate if the designated
// constraints aren't met.
type GetPaginationFriendsApplyToReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationFriendsApplyToReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationFriendsApplyToReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationFriendsApplyToReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationFriendsApplyToReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationFriendsApplyToReqValidationError) ErrorName() string {
	return "GetPaginationFriendsApplyToReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationFriendsApplyToReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationFriendsApplyToReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationFriendsApplyToReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationFriendsApplyToReqValidationError{}

// Validate checks the field values on GetPaginationFriendsApplyToResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaginationFriendsApplyToResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationFriendsApplyToResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPaginationFriendsApplyToRespMultiError, or nil if none found.
func (m *GetPaginationFriendsApplyToResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationFriendsApplyToResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaginationFriendsApplyToRespValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaginationFriendsApplyToRespValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaginationFriendsApplyToRespValidationError{
					field:  fmt.Sprintf("FriendRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPaginationFriendsApplyToRespMultiError(errors)
	}

	return nil
}

// GetPaginationFriendsApplyToRespMultiError is an error wrapping multiple
// validation errors returned by GetPaginationFriendsApplyToResp.ValidateAll()
// if the designated constraints aren't met.
type GetPaginationFriendsApplyToRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationFriendsApplyToRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationFriendsApplyToRespMultiError) AllErrors() []error { return m }

// GetPaginationFriendsApplyToRespValidationError is the validation error
// returned by GetPaginationFriendsApplyToResp.Validate if the designated
// constraints aren't met.
type GetPaginationFriendsApplyToRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationFriendsApplyToRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationFriendsApplyToRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationFriendsApplyToRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationFriendsApplyToRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationFriendsApplyToRespValidationError) ErrorName() string {
	return "GetPaginationFriendsApplyToRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationFriendsApplyToRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationFriendsApplyToResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationFriendsApplyToRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationFriendsApplyToRespValidationError{}

// Validate checks the field values on GetDesignatedFriendsApplyReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignatedFriendsApplyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignatedFriendsApplyReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignatedFriendsApplyReqMultiError, or nil if none found.
func (m *GetDesignatedFriendsApplyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignatedFriendsApplyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserID

	// no validation rules for ToUserID

	if len(errors) > 0 {
		return GetDesignatedFriendsApplyReqMultiError(errors)
	}

	return nil
}

// GetDesignatedFriendsApplyReqMultiError is an error wrapping multiple
// validation errors returned by GetDesignatedFriendsApplyReq.ValidateAll() if
// the designated constraints aren't met.
type GetDesignatedFriendsApplyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignatedFriendsApplyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignatedFriendsApplyReqMultiError) AllErrors() []error { return m }

// GetDesignatedFriendsApplyReqValidationError is the validation error returned
// by GetDesignatedFriendsApplyReq.Validate if the designated constraints
// aren't met.
type GetDesignatedFriendsApplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignatedFriendsApplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignatedFriendsApplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignatedFriendsApplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignatedFriendsApplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignatedFriendsApplyReqValidationError) ErrorName() string {
	return "GetDesignatedFriendsApplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignatedFriendsApplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignatedFriendsApplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignatedFriendsApplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignatedFriendsApplyReqValidationError{}

// Validate checks the field values on GetDesignatedFriendsApplyResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignatedFriendsApplyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignatedFriendsApplyResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDesignatedFriendsApplyRespMultiError, or nil if none found.
func (m *GetDesignatedFriendsApplyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignatedFriendsApplyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDesignatedFriendsApplyRespValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDesignatedFriendsApplyRespValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDesignatedFriendsApplyRespValidationError{
					field:  fmt.Sprintf("FriendRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDesignatedFriendsApplyRespMultiError(errors)
	}

	return nil
}

// GetDesignatedFriendsApplyRespMultiError is an error wrapping multiple
// validation errors returned by GetDesignatedFriendsApplyResp.ValidateAll()
// if the designated constraints aren't met.
type GetDesignatedFriendsApplyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignatedFriendsApplyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignatedFriendsApplyRespMultiError) AllErrors() []error { return m }

// GetDesignatedFriendsApplyRespValidationError is the validation error
// returned by GetDesignatedFriendsApplyResp.Validate if the designated
// constraints aren't met.
type GetDesignatedFriendsApplyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignatedFriendsApplyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignatedFriendsApplyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignatedFriendsApplyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignatedFriendsApplyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignatedFriendsApplyRespValidationError) ErrorName() string {
	return "GetDesignatedFriendsApplyRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignatedFriendsApplyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignatedFriendsApplyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignatedFriendsApplyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignatedFriendsApplyRespValidationError{}

// Validate checks the field values on GetIncrementalFriendsApplyToReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalFriendsApplyToReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalFriendsApplyToReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIncrementalFriendsApplyToReqMultiError, or nil if none found.
func (m *GetIncrementalFriendsApplyToReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalFriendsApplyToReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for VersionID

	// no validation rules for Version

	if len(errors) > 0 {
		return GetIncrementalFriendsApplyToReqMultiError(errors)
	}

	return nil
}

// GetIncrementalFriendsApplyToReqMultiError is an error wrapping multiple
// validation errors returned by GetIncrementalFriendsApplyToReq.ValidateAll()
// if the designated constraints aren't met.
type GetIncrementalFriendsApplyToReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalFriendsApplyToReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalFriendsApplyToReqMultiError) AllErrors() []error { return m }

// GetIncrementalFriendsApplyToReqValidationError is the validation error
// returned by GetIncrementalFriendsApplyToReq.Validate if the designated
// constraints aren't met.
type GetIncrementalFriendsApplyToReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalFriendsApplyToReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalFriendsApplyToReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalFriendsApplyToReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalFriendsApplyToReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalFriendsApplyToReqValidationError) ErrorName() string {
	return "GetIncrementalFriendsApplyToReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalFriendsApplyToReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalFriendsApplyToReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalFriendsApplyToReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalFriendsApplyToReqValidationError{}

// Validate checks the field values on GetIncrementalFriendsApplyToResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetIncrementalFriendsApplyToResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalFriendsApplyToResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIncrementalFriendsApplyToRespMultiError, or nil if none found.
func (m *GetIncrementalFriendsApplyToResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalFriendsApplyToResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Full

	for idx, item := range m.GetChanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalFriendsApplyToRespValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalFriendsApplyToRespValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalFriendsApplyToRespValidationError{
					field:  fmt.Sprintf("Changes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIncrementalFriendsApplyToRespMultiError(errors)
	}

	return nil
}

// GetIncrementalFriendsApplyToRespMultiError is an error wrapping multiple
// validation errors returned by
// GetIncrementalFriendsApplyToResp.ValidateAll() if the designated
// constraints aren't met.
type GetIncrementalFriendsApplyToRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalFriendsApplyToRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalFriendsApplyToRespMultiError) AllErrors() []error { return m }

// GetIncrementalFriendsApplyToRespValidationError is the validation error
// returned by GetIncrementalFriendsApplyToResp.Validate if the designated
// constraints aren't met.
type GetIncrementalFriendsApplyToRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalFriendsApplyToRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalFriendsApplyToRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalFriendsApplyToRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalFriendsApplyToRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalFriendsApplyToRespValidationError) ErrorName() string {
	return "GetIncrementalFriendsApplyToRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalFriendsApplyToRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalFriendsApplyToResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalFriendsApplyToRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalFriendsApplyToRespValidationError{}

// Validate checks the field values on GetIncrementalFriendsApplyFromReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetIncrementalFriendsApplyFromReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalFriendsApplyFromReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetIncrementalFriendsApplyFromReqMultiError, or nil if none found.
func (m *GetIncrementalFriendsApplyFromReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalFriendsApplyFromReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for VersionID

	// no validation rules for Version

	if len(errors) > 0 {
		return GetIncrementalFriendsApplyFromReqMultiError(errors)
	}

	return nil
}

// GetIncrementalFriendsApplyFromReqMultiError is an error wrapping multiple
// validation errors returned by
// GetIncrementalFriendsApplyFromReq.ValidateAll() if the designated
// constraints aren't met.
type GetIncrementalFriendsApplyFromReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalFriendsApplyFromReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalFriendsApplyFromReqMultiError) AllErrors() []error { return m }

// GetIncrementalFriendsApplyFromReqValidationError is the validation error
// returned by GetIncrementalFriendsApplyFromReq.Validate if the designated
// constraints aren't met.
type GetIncrementalFriendsApplyFromReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalFriendsApplyFromReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalFriendsApplyFromReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalFriendsApplyFromReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalFriendsApplyFromReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalFriendsApplyFromReqValidationError) ErrorName() string {
	return "GetIncrementalFriendsApplyFromReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalFriendsApplyFromReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalFriendsApplyFromReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalFriendsApplyFromReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalFriendsApplyFromReqValidationError{}

// Validate checks the field values on GetIncrementalFriendsApplyFromResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetIncrementalFriendsApplyFromResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalFriendsApplyFromResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetIncrementalFriendsApplyFromRespMultiError, or nil if none found.
func (m *GetIncrementalFriendsApplyFromResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalFriendsApplyFromResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Full

	for idx, item := range m.GetChanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalFriendsApplyFromRespValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalFriendsApplyFromRespValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalFriendsApplyFromRespValidationError{
					field:  fmt.Sprintf("Changes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIncrementalFriendsApplyFromRespMultiError(errors)
	}

	return nil
}

// GetIncrementalFriendsApplyFromRespMultiError is an error wrapping multiple
// validation errors returned by
// GetIncrementalFriendsApplyFromResp.ValidateAll() if the designated
// constraints aren't met.
type GetIncrementalFriendsApplyFromRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalFriendsApplyFromRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalFriendsApplyFromRespMultiError) AllErrors() []error { return m }

// GetIncrementalFriendsApplyFromRespValidationError is the validation error
// returned by GetIncrementalFriendsApplyFromResp.Validate if the designated
// constraints aren't met.
type GetIncrementalFriendsApplyFromRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalFriendsApplyFromRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalFriendsApplyFromRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalFriendsApplyFromRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalFriendsApplyFromRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalFriendsApplyFromRespValidationError) ErrorName() string {
	return "GetIncrementalFriendsApplyFromRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalFriendsApplyFromRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalFriendsApplyFromResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalFriendsApplyFromRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalFriendsApplyFromRespValidationError{}

// Validate checks the field values on GetDesignatedFriendsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignatedFriendsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignatedFriendsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignatedFriendsReqMultiError, or nil if none found.
func (m *GetDesignatedFriendsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignatedFriendsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetDesignatedFriendsReqMultiError(errors)
	}

	return nil
}

// GetDesignatedFriendsReqMultiError is an error wrapping multiple validation
// errors returned by GetDesignatedFriendsReq.ValidateAll() if the designated
// constraints aren't met.
type GetDesignatedFriendsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignatedFriendsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignatedFriendsReqMultiError) AllErrors() []error { return m }

// GetDesignatedFriendsReqValidationError is the validation error returned by
// GetDesignatedFriendsReq.Validate if the designated constraints aren't met.
type GetDesignatedFriendsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignatedFriendsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignatedFriendsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignatedFriendsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignatedFriendsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignatedFriendsReqValidationError) ErrorName() string {
	return "GetDesignatedFriendsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignatedFriendsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignatedFriendsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignatedFriendsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignatedFriendsReqValidationError{}

// Validate checks the field values on GetDesignatedFriendsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignatedFriendsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignatedFriendsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignatedFriendsRespMultiError, or nil if none found.
func (m *GetDesignatedFriendsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignatedFriendsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendsInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDesignatedFriendsRespValidationError{
						field:  fmt.Sprintf("FriendsInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDesignatedFriendsRespValidationError{
						field:  fmt.Sprintf("FriendsInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDesignatedFriendsRespValidationError{
					field:  fmt.Sprintf("FriendsInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDesignatedFriendsRespMultiError(errors)
	}

	return nil
}

// GetDesignatedFriendsRespMultiError is an error wrapping multiple validation
// errors returned by GetDesignatedFriendsResp.ValidateAll() if the designated
// constraints aren't met.
type GetDesignatedFriendsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignatedFriendsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignatedFriendsRespMultiError) AllErrors() []error { return m }

// GetDesignatedFriendsRespValidationError is the validation error returned by
// GetDesignatedFriendsResp.Validate if the designated constraints aren't met.
type GetDesignatedFriendsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignatedFriendsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignatedFriendsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignatedFriendsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignatedFriendsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignatedFriendsRespValidationError) ErrorName() string {
	return "GetDesignatedFriendsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignatedFriendsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignatedFriendsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignatedFriendsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignatedFriendsRespValidationError{}

// Validate checks the field values on AddBlackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBlackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBlackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBlackReqMultiError, or
// nil if none found.
func (m *AddBlackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBlackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for BlackUserID

	// no validation rules for Ex

	if len(errors) > 0 {
		return AddBlackReqMultiError(errors)
	}

	return nil
}

// AddBlackReqMultiError is an error wrapping multiple validation errors
// returned by AddBlackReq.ValidateAll() if the designated constraints aren't met.
type AddBlackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBlackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBlackReqMultiError) AllErrors() []error { return m }

// AddBlackReqValidationError is the validation error returned by
// AddBlackReq.Validate if the designated constraints aren't met.
type AddBlackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBlackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBlackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBlackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBlackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBlackReqValidationError) ErrorName() string { return "AddBlackReqValidationError" }

// Error satisfies the builtin error interface
func (e AddBlackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBlackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBlackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBlackReqValidationError{}

// Validate checks the field values on AddBlackResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBlackResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBlackResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBlackRespMultiError, or
// nil if none found.
func (m *AddBlackResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBlackResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddBlackRespMultiError(errors)
	}

	return nil
}

// AddBlackRespMultiError is an error wrapping multiple validation errors
// returned by AddBlackResp.ValidateAll() if the designated constraints aren't met.
type AddBlackRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBlackRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBlackRespMultiError) AllErrors() []error { return m }

// AddBlackRespValidationError is the validation error returned by
// AddBlackResp.Validate if the designated constraints aren't met.
type AddBlackRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBlackRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBlackRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBlackRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBlackRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBlackRespValidationError) ErrorName() string { return "AddBlackRespValidationError" }

// Error satisfies the builtin error interface
func (e AddBlackRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBlackResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBlackRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBlackRespValidationError{}

// Validate checks the field values on RemoveBlackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveBlackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBlackReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoveBlackReqMultiError,
// or nil if none found.
func (m *RemoveBlackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBlackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for BlackUserID

	if len(errors) > 0 {
		return RemoveBlackReqMultiError(errors)
	}

	return nil
}

// RemoveBlackReqMultiError is an error wrapping multiple validation errors
// returned by RemoveBlackReq.ValidateAll() if the designated constraints
// aren't met.
type RemoveBlackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBlackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBlackReqMultiError) AllErrors() []error { return m }

// RemoveBlackReqValidationError is the validation error returned by
// RemoveBlackReq.Validate if the designated constraints aren't met.
type RemoveBlackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBlackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBlackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBlackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBlackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBlackReqValidationError) ErrorName() string { return "RemoveBlackReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveBlackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBlackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBlackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBlackReqValidationError{}

// Validate checks the field values on RemoveBlackResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveBlackResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveBlackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveBlackRespMultiError, or nil if none found.
func (m *RemoveBlackResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveBlackResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveBlackRespMultiError(errors)
	}

	return nil
}

// RemoveBlackRespMultiError is an error wrapping multiple validation errors
// returned by RemoveBlackResp.ValidateAll() if the designated constraints
// aren't met.
type RemoveBlackRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveBlackRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveBlackRespMultiError) AllErrors() []error { return m }

// RemoveBlackRespValidationError is the validation error returned by
// RemoveBlackResp.Validate if the designated constraints aren't met.
type RemoveBlackRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveBlackRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveBlackRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveBlackRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveBlackRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveBlackRespValidationError) ErrorName() string { return "RemoveBlackRespValidationError" }

// Error satisfies the builtin error interface
func (e RemoveBlackRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveBlackResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveBlackRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveBlackRespValidationError{}

// Validate checks the field values on GetPaginationBlacksReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaginationBlacksReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationBlacksReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaginationBlacksReqMultiError, or nil if none found.
func (m *GetPaginationBlacksReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationBlacksReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaginationBlacksReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaginationBlacksReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaginationBlacksReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaginationBlacksReqMultiError(errors)
	}

	return nil
}

// GetPaginationBlacksReqMultiError is an error wrapping multiple validation
// errors returned by GetPaginationBlacksReq.ValidateAll() if the designated
// constraints aren't met.
type GetPaginationBlacksReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationBlacksReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationBlacksReqMultiError) AllErrors() []error { return m }

// GetPaginationBlacksReqValidationError is the validation error returned by
// GetPaginationBlacksReq.Validate if the designated constraints aren't met.
type GetPaginationBlacksReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationBlacksReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationBlacksReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationBlacksReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationBlacksReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationBlacksReqValidationError) ErrorName() string {
	return "GetPaginationBlacksReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationBlacksReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationBlacksReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationBlacksReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationBlacksReqValidationError{}

// Validate checks the field values on GetPaginationBlacksResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaginationBlacksResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationBlacksResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaginationBlacksRespMultiError, or nil if none found.
func (m *GetPaginationBlacksResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationBlacksResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlacks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaginationBlacksRespValidationError{
						field:  fmt.Sprintf("Blacks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaginationBlacksRespValidationError{
						field:  fmt.Sprintf("Blacks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaginationBlacksRespValidationError{
					field:  fmt.Sprintf("Blacks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPaginationBlacksRespMultiError(errors)
	}

	return nil
}

// GetPaginationBlacksRespMultiError is an error wrapping multiple validation
// errors returned by GetPaginationBlacksResp.ValidateAll() if the designated
// constraints aren't met.
type GetPaginationBlacksRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationBlacksRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationBlacksRespMultiError) AllErrors() []error { return m }

// GetPaginationBlacksRespValidationError is the validation error returned by
// GetPaginationBlacksResp.Validate if the designated constraints aren't met.
type GetPaginationBlacksRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationBlacksRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationBlacksRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationBlacksRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationBlacksRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationBlacksRespValidationError) ErrorName() string {
	return "GetPaginationBlacksRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationBlacksRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationBlacksResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationBlacksRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationBlacksRespValidationError{}

// Validate checks the field values on IsFriendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFriendReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsFriendReqMultiError, or
// nil if none found.
func (m *IsFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID1

	// no validation rules for UserID2

	if len(errors) > 0 {
		return IsFriendReqMultiError(errors)
	}

	return nil
}

// IsFriendReqMultiError is an error wrapping multiple validation errors
// returned by IsFriendReq.ValidateAll() if the designated constraints aren't met.
type IsFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFriendReqMultiError) AllErrors() []error { return m }

// IsFriendReqValidationError is the validation error returned by
// IsFriendReq.Validate if the designated constraints aren't met.
type IsFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFriendReqValidationError) ErrorName() string { return "IsFriendReqValidationError" }

// Error satisfies the builtin error interface
func (e IsFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFriendReqValidationError{}

// Validate checks the field values on IsFriendResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFriendResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsFriendRespMultiError, or
// nil if none found.
func (m *IsFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InUser1Friends

	// no validation rules for InUser2Friends

	if len(errors) > 0 {
		return IsFriendRespMultiError(errors)
	}

	return nil
}

// IsFriendRespMultiError is an error wrapping multiple validation errors
// returned by IsFriendResp.ValidateAll() if the designated constraints aren't met.
type IsFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFriendRespMultiError) AllErrors() []error { return m }

// IsFriendRespValidationError is the validation error returned by
// IsFriendResp.Validate if the designated constraints aren't met.
type IsFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFriendRespValidationError) ErrorName() string { return "IsFriendRespValidationError" }

// Error satisfies the builtin error interface
func (e IsFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFriendRespValidationError{}

// Validate checks the field values on IsBlackReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsBlackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsBlackReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsBlackReqMultiError, or
// nil if none found.
func (m *IsBlackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsBlackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID1

	// no validation rules for UserID2

	if len(errors) > 0 {
		return IsBlackReqMultiError(errors)
	}

	return nil
}

// IsBlackReqMultiError is an error wrapping multiple validation errors
// returned by IsBlackReq.ValidateAll() if the designated constraints aren't met.
type IsBlackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsBlackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsBlackReqMultiError) AllErrors() []error { return m }

// IsBlackReqValidationError is the validation error returned by
// IsBlackReq.Validate if the designated constraints aren't met.
type IsBlackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsBlackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsBlackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsBlackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsBlackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsBlackReqValidationError) ErrorName() string { return "IsBlackReqValidationError" }

// Error satisfies the builtin error interface
func (e IsBlackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsBlackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsBlackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsBlackReqValidationError{}

// Validate checks the field values on IsBlackResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsBlackResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsBlackResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsBlackRespMultiError, or
// nil if none found.
func (m *IsBlackResp) ValidateAll() error {
	return m.validate(true)
}

func (m *IsBlackResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InUser1Blacks

	// no validation rules for InUser2Blacks

	if len(errors) > 0 {
		return IsBlackRespMultiError(errors)
	}

	return nil
}

// IsBlackRespMultiError is an error wrapping multiple validation errors
// returned by IsBlackResp.ValidateAll() if the designated constraints aren't met.
type IsBlackRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsBlackRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsBlackRespMultiError) AllErrors() []error { return m }

// IsBlackRespValidationError is the validation error returned by
// IsBlackResp.Validate if the designated constraints aren't met.
type IsBlackRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsBlackRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsBlackRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsBlackRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsBlackRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsBlackRespValidationError) ErrorName() string { return "IsBlackRespValidationError" }

// Error satisfies the builtin error interface
func (e IsBlackRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsBlackResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsBlackRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsBlackRespValidationError{}

// Validate checks the field values on DeleteFriendReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendReqMultiError, or nil if none found.
func (m *DeleteFriendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for FriendUserID

	if len(errors) > 0 {
		return DeleteFriendReqMultiError(errors)
	}

	return nil
}

// DeleteFriendReqMultiError is an error wrapping multiple validation errors
// returned by DeleteFriendReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteFriendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendReqMultiError) AllErrors() []error { return m }

// DeleteFriendReqValidationError is the validation error returned by
// DeleteFriendReq.Validate if the designated constraints aren't met.
type DeleteFriendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendReqValidationError) ErrorName() string { return "DeleteFriendReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFriendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendReqValidationError{}

// Validate checks the field values on DeleteFriendResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendRespMultiError, or nil if none found.
func (m *DeleteFriendResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFriendRespMultiError(errors)
	}

	return nil
}

// DeleteFriendRespMultiError is an error wrapping multiple validation errors
// returned by DeleteFriendResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteFriendRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendRespMultiError) AllErrors() []error { return m }

// DeleteFriendRespValidationError is the validation error returned by
// DeleteFriendResp.Validate if the designated constraints aren't met.
type DeleteFriendRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendRespValidationError) ErrorName() string { return "DeleteFriendRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteFriendRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendRespValidationError{}

// Validate checks the field values on RespondFriendApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RespondFriendApplyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondFriendApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RespondFriendApplyReqMultiError, or nil if none found.
func (m *RespondFriendApplyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondFriendApplyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromUserID

	// no validation rules for ToUserID

	// no validation rules for HandleResult

	// no validation rules for HandleMsg

	if len(errors) > 0 {
		return RespondFriendApplyReqMultiError(errors)
	}

	return nil
}

// RespondFriendApplyReqMultiError is an error wrapping multiple validation
// errors returned by RespondFriendApplyReq.ValidateAll() if the designated
// constraints aren't met.
type RespondFriendApplyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondFriendApplyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondFriendApplyReqMultiError) AllErrors() []error { return m }

// RespondFriendApplyReqValidationError is the validation error returned by
// RespondFriendApplyReq.Validate if the designated constraints aren't met.
type RespondFriendApplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondFriendApplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondFriendApplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondFriendApplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondFriendApplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondFriendApplyReqValidationError) ErrorName() string {
	return "RespondFriendApplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e RespondFriendApplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondFriendApplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondFriendApplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondFriendApplyReqValidationError{}

// Validate checks the field values on RespondFriendApplyResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RespondFriendApplyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondFriendApplyResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RespondFriendApplyRespMultiError, or nil if none found.
func (m *RespondFriendApplyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondFriendApplyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RespondFriendApplyRespMultiError(errors)
	}

	return nil
}

// RespondFriendApplyRespMultiError is an error wrapping multiple validation
// errors returned by RespondFriendApplyResp.ValidateAll() if the designated
// constraints aren't met.
type RespondFriendApplyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondFriendApplyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondFriendApplyRespMultiError) AllErrors() []error { return m }

// RespondFriendApplyRespValidationError is the validation error returned by
// RespondFriendApplyResp.Validate if the designated constraints aren't met.
type RespondFriendApplyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondFriendApplyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondFriendApplyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondFriendApplyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondFriendApplyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondFriendApplyRespValidationError) ErrorName() string {
	return "RespondFriendApplyRespValidationError"
}

// Error satisfies the builtin error interface
func (e RespondFriendApplyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondFriendApplyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondFriendApplyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondFriendApplyRespValidationError{}

// Validate checks the field values on UpdateFriendsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendsReqMultiError, or nil if none found.
func (m *UpdateFriendsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if all {
		switch v := interface{}(m.GetIsPinned()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFriendsReqValidationError{
					field:  "IsPinned",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFriendsReqValidationError{
					field:  "IsPinned",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsPinned()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFriendsReqValidationError{
				field:  "IsPinned",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRemark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFriendsReqValidationError{
					field:  "Remark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFriendsReqValidationError{
					field:  "Remark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFriendsReqValidationError{
				field:  "Remark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFriendsReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFriendsReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFriendsReqValidationError{
				field:  "Ex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFriendsReqMultiError(errors)
	}

	return nil
}

// UpdateFriendsReqMultiError is an error wrapping multiple validation errors
// returned by UpdateFriendsReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateFriendsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendsReqMultiError) AllErrors() []error { return m }

// UpdateFriendsReqValidationError is the validation error returned by
// UpdateFriendsReq.Validate if the designated constraints aren't met.
type UpdateFriendsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendsReqValidationError) ErrorName() string { return "UpdateFriendsReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateFriendsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendsReqValidationError{}

// Validate checks the field values on UpdateFriendsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFriendsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFriendsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFriendsRespMultiError, or nil if none found.
func (m *UpdateFriendsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFriendsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFriendsRespMultiError(errors)
	}

	return nil
}

// UpdateFriendsRespMultiError is an error wrapping multiple validation errors
// returned by UpdateFriendsResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateFriendsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFriendsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFriendsRespMultiError) AllErrors() []error { return m }

// UpdateFriendsRespValidationError is the validation error returned by
// UpdateFriendsResp.Validate if the designated constraints aren't met.
type UpdateFriendsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFriendsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFriendsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFriendsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFriendsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFriendsRespValidationError) ErrorName() string {
	return "UpdateFriendsRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFriendsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFriendsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFriendsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFriendsRespValidationError{}

// Validate checks the field values on SetFriendRemarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetFriendRemarkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFriendRemarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetFriendRemarkReqMultiError, or nil if none found.
func (m *SetFriendRemarkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFriendRemarkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for FriendUserID

	// no validation rules for Remark

	if len(errors) > 0 {
		return SetFriendRemarkReqMultiError(errors)
	}

	return nil
}

// SetFriendRemarkReqMultiError is an error wrapping multiple validation errors
// returned by SetFriendRemarkReq.ValidateAll() if the designated constraints
// aren't met.
type SetFriendRemarkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFriendRemarkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFriendRemarkReqMultiError) AllErrors() []error { return m }

// SetFriendRemarkReqValidationError is the validation error returned by
// SetFriendRemarkReq.Validate if the designated constraints aren't met.
type SetFriendRemarkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFriendRemarkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFriendRemarkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFriendRemarkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFriendRemarkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFriendRemarkReqValidationError) ErrorName() string {
	return "SetFriendRemarkReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetFriendRemarkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFriendRemarkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFriendRemarkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFriendRemarkReqValidationError{}

// Validate checks the field values on SetFriendRemarkResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetFriendRemarkResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFriendRemarkResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetFriendRemarkRespMultiError, or nil if none found.
func (m *SetFriendRemarkResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFriendRemarkResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetFriendRemarkRespMultiError(errors)
	}

	return nil
}

// SetFriendRemarkRespMultiError is an error wrapping multiple validation
// errors returned by SetFriendRemarkResp.ValidateAll() if the designated
// constraints aren't met.
type SetFriendRemarkRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFriendRemarkRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFriendRemarkRespMultiError) AllErrors() []error { return m }

// SetFriendRemarkRespValidationError is the validation error returned by
// SetFriendRemarkResp.Validate if the designated constraints aren't met.
type SetFriendRemarkRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFriendRemarkRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFriendRemarkRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFriendRemarkRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFriendRemarkRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFriendRemarkRespValidationError) ErrorName() string {
	return "SetFriendRemarkRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetFriendRemarkRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFriendRemarkResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFriendRemarkRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFriendRemarkRespValidationError{}

// Validate checks the field values on GetPaginationFriendsApplyFromReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPaginationFriendsApplyFromReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationFriendsApplyFromReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPaginationFriendsApplyFromReqMultiError, or nil if none found.
func (m *GetPaginationFriendsApplyFromReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationFriendsApplyFromReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaginationFriendsApplyFromReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaginationFriendsApplyFromReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaginationFriendsApplyFromReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaginationFriendsApplyFromReqMultiError(errors)
	}

	return nil
}

// GetPaginationFriendsApplyFromReqMultiError is an error wrapping multiple
// validation errors returned by
// GetPaginationFriendsApplyFromReq.ValidateAll() if the designated
// constraints aren't met.
type GetPaginationFriendsApplyFromReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationFriendsApplyFromReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationFriendsApplyFromReqMultiError) AllErrors() []error { return m }

// GetPaginationFriendsApplyFromReqValidationError is the validation error
// returned by GetPaginationFriendsApplyFromReq.Validate if the designated
// constraints aren't met.
type GetPaginationFriendsApplyFromReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationFriendsApplyFromReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationFriendsApplyFromReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationFriendsApplyFromReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationFriendsApplyFromReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationFriendsApplyFromReqValidationError) ErrorName() string {
	return "GetPaginationFriendsApplyFromReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationFriendsApplyFromReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationFriendsApplyFromReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationFriendsApplyFromReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationFriendsApplyFromReqValidationError{}

// Validate checks the field values on GetPaginationFriendsApplyFromResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPaginationFriendsApplyFromResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationFriendsApplyFromResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPaginationFriendsApplyFromRespMultiError, or nil if none found.
func (m *GetPaginationFriendsApplyFromResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationFriendsApplyFromResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaginationFriendsApplyFromRespValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaginationFriendsApplyFromRespValidationError{
						field:  fmt.Sprintf("FriendRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaginationFriendsApplyFromRespValidationError{
					field:  fmt.Sprintf("FriendRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPaginationFriendsApplyFromRespMultiError(errors)
	}

	return nil
}

// GetPaginationFriendsApplyFromRespMultiError is an error wrapping multiple
// validation errors returned by
// GetPaginationFriendsApplyFromResp.ValidateAll() if the designated
// constraints aren't met.
type GetPaginationFriendsApplyFromRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationFriendsApplyFromRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationFriendsApplyFromRespMultiError) AllErrors() []error { return m }

// GetPaginationFriendsApplyFromRespValidationError is the validation error
// returned by GetPaginationFriendsApplyFromResp.Validate if the designated
// constraints aren't met.
type GetPaginationFriendsApplyFromRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationFriendsApplyFromRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationFriendsApplyFromRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationFriendsApplyFromRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationFriendsApplyFromRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationFriendsApplyFromRespValidationError) ErrorName() string {
	return "GetPaginationFriendsApplyFromRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationFriendsApplyFromRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationFriendsApplyFromResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationFriendsApplyFromRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationFriendsApplyFromRespValidationError{}

// Validate checks the field values on GetFriendIDsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendIDsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendIDsReqMultiError, or nil if none found.
func (m *GetFriendIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetFriendIDsReqMultiError(errors)
	}

	return nil
}

// GetFriendIDsReqMultiError is an error wrapping multiple validation errors
// returned by GetFriendIDsReq.ValidateAll() if the designated constraints
// aren't met.
type GetFriendIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendIDsReqMultiError) AllErrors() []error { return m }

// GetFriendIDsReqValidationError is the validation error returned by
// GetFriendIDsReq.Validate if the designated constraints aren't met.
type GetFriendIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendIDsReqValidationError) ErrorName() string { return "GetFriendIDsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFriendIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendIDsReqValidationError{}

// Validate checks the field values on GetFriendIDsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendIDsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendIDsRespMultiError, or nil if none found.
func (m *GetFriendIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFriendIDsRespMultiError(errors)
	}

	return nil
}

// GetFriendIDsRespMultiError is an error wrapping multiple validation errors
// returned by GetFriendIDsResp.ValidateAll() if the designated constraints
// aren't met.
type GetFriendIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendIDsRespMultiError) AllErrors() []error { return m }

// GetFriendIDsRespValidationError is the validation error returned by
// GetFriendIDsResp.Validate if the designated constraints aren't met.
type GetFriendIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendIDsRespValidationError) ErrorName() string { return "GetFriendIDsRespValidationError" }

// Error satisfies the builtin error interface
func (e GetFriendIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendIDsRespValidationError{}

// Validate checks the field values on GetSpecifiedFriendsInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecifiedFriendsInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecifiedFriendsInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecifiedFriendsInfoReqMultiError, or nil if none found.
func (m *GetSpecifiedFriendsInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecifiedFriendsInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetSpecifiedFriendsInfoReqMultiError(errors)
	}

	return nil
}

// GetSpecifiedFriendsInfoReqMultiError is an error wrapping multiple
// validation errors returned by GetSpecifiedFriendsInfoReq.ValidateAll() if
// the designated constraints aren't met.
type GetSpecifiedFriendsInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecifiedFriendsInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecifiedFriendsInfoReqMultiError) AllErrors() []error { return m }

// GetSpecifiedFriendsInfoReqValidationError is the validation error returned
// by GetSpecifiedFriendsInfoReq.Validate if the designated constraints aren't met.
type GetSpecifiedFriendsInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecifiedFriendsInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecifiedFriendsInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecifiedFriendsInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecifiedFriendsInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecifiedFriendsInfoReqValidationError) ErrorName() string {
	return "GetSpecifiedFriendsInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecifiedFriendsInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecifiedFriendsInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecifiedFriendsInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecifiedFriendsInfoReqValidationError{}

// Validate checks the field values on GetSpecifiedFriendsInfoInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecifiedFriendsInfoInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecifiedFriendsInfoInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecifiedFriendsInfoInfoMultiError, or nil if none found.
func (m *GetSpecifiedFriendsInfoInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecifiedFriendsInfoInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecifiedFriendsInfoInfoValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecifiedFriendsInfoInfoValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecifiedFriendsInfoInfoValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFriendInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecifiedFriendsInfoInfoValidationError{
					field:  "FriendInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecifiedFriendsInfoInfoValidationError{
					field:  "FriendInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriendInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecifiedFriendsInfoInfoValidationError{
				field:  "FriendInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBlackInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpecifiedFriendsInfoInfoValidationError{
					field:  "BlackInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpecifiedFriendsInfoInfoValidationError{
					field:  "BlackInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlackInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpecifiedFriendsInfoInfoValidationError{
				field:  "BlackInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSpecifiedFriendsInfoInfoMultiError(errors)
	}

	return nil
}

// GetSpecifiedFriendsInfoInfoMultiError is an error wrapping multiple
// validation errors returned by GetSpecifiedFriendsInfoInfo.ValidateAll() if
// the designated constraints aren't met.
type GetSpecifiedFriendsInfoInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecifiedFriendsInfoInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecifiedFriendsInfoInfoMultiError) AllErrors() []error { return m }

// GetSpecifiedFriendsInfoInfoValidationError is the validation error returned
// by GetSpecifiedFriendsInfoInfo.Validate if the designated constraints
// aren't met.
type GetSpecifiedFriendsInfoInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecifiedFriendsInfoInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecifiedFriendsInfoInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecifiedFriendsInfoInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecifiedFriendsInfoInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecifiedFriendsInfoInfoValidationError) ErrorName() string {
	return "GetSpecifiedFriendsInfoInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecifiedFriendsInfoInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecifiedFriendsInfoInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecifiedFriendsInfoInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecifiedFriendsInfoInfoValidationError{}

// Validate checks the field values on GetSpecifiedFriendsInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecifiedFriendsInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecifiedFriendsInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecifiedFriendsInfoRespMultiError, or nil if none found.
func (m *GetSpecifiedFriendsInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecifiedFriendsInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSpecifiedFriendsInfoRespValidationError{
						field:  fmt.Sprintf("Infos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSpecifiedFriendsInfoRespValidationError{
						field:  fmt.Sprintf("Infos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSpecifiedFriendsInfoRespValidationError{
					field:  fmt.Sprintf("Infos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSpecifiedFriendsInfoRespMultiError(errors)
	}

	return nil
}

// GetSpecifiedFriendsInfoRespMultiError is an error wrapping multiple
// validation errors returned by GetSpecifiedFriendsInfoResp.ValidateAll() if
// the designated constraints aren't met.
type GetSpecifiedFriendsInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecifiedFriendsInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecifiedFriendsInfoRespMultiError) AllErrors() []error { return m }

// GetSpecifiedFriendsInfoRespValidationError is the validation error returned
// by GetSpecifiedFriendsInfoResp.Validate if the designated constraints
// aren't met.
type GetSpecifiedFriendsInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecifiedFriendsInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecifiedFriendsInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecifiedFriendsInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecifiedFriendsInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecifiedFriendsInfoRespValidationError) ErrorName() string {
	return "GetSpecifiedFriendsInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecifiedFriendsInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecifiedFriendsInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecifiedFriendsInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecifiedFriendsInfoRespValidationError{}

// Validate checks the field values on GetIncrementalFriendsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalFriendsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalFriendsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncrementalFriendsReqMultiError, or nil if none found.
func (m *GetIncrementalFriendsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalFriendsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for VersionID

	// no validation rules for Version

	if len(errors) > 0 {
		return GetIncrementalFriendsReqMultiError(errors)
	}

	return nil
}

// GetIncrementalFriendsReqMultiError is an error wrapping multiple validation
// errors returned by GetIncrementalFriendsReq.ValidateAll() if the designated
// constraints aren't met.
type GetIncrementalFriendsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalFriendsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalFriendsReqMultiError) AllErrors() []error { return m }

// GetIncrementalFriendsReqValidationError is the validation error returned by
// GetIncrementalFriendsReq.Validate if the designated constraints aren't met.
type GetIncrementalFriendsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalFriendsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalFriendsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalFriendsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalFriendsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalFriendsReqValidationError) ErrorName() string {
	return "GetIncrementalFriendsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalFriendsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalFriendsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalFriendsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalFriendsReqValidationError{}

// Validate checks the field values on GetIncrementalFriendsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalFriendsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalFriendsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncrementalFriendsRespMultiError, or nil if none found.
func (m *GetIncrementalFriendsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalFriendsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Full

	for idx, item := range m.GetInsert() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalFriendsRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalFriendsRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalFriendsRespValidationError{
					field:  fmt.Sprintf("Insert[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalFriendsRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalFriendsRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalFriendsRespValidationError{
					field:  fmt.Sprintf("Update[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SortVersion

	if len(errors) > 0 {
		return GetIncrementalFriendsRespMultiError(errors)
	}

	return nil
}

// GetIncrementalFriendsRespMultiError is an error wrapping multiple validation
// errors returned by GetIncrementalFriendsResp.ValidateAll() if the
// designated constraints aren't met.
type GetIncrementalFriendsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalFriendsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalFriendsRespMultiError) AllErrors() []error { return m }

// GetIncrementalFriendsRespValidationError is the validation error returned by
// GetIncrementalFriendsResp.Validate if the designated constraints aren't met.
type GetIncrementalFriendsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalFriendsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalFriendsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalFriendsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalFriendsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalFriendsRespValidationError) ErrorName() string {
	return "GetIncrementalFriendsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalFriendsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalFriendsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalFriendsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalFriendsRespValidationError{}

// Validate checks the field values on GetIncrementalBlacksReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalBlacksReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalBlacksReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncrementalBlacksReqMultiError, or nil if none found.
func (m *GetIncrementalBlacksReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalBlacksReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for VersionID

	// no validation rules for Version

	if len(errors) > 0 {
		return GetIncrementalBlacksReqMultiError(errors)
	}

	return nil
}

// GetIncrementalBlacksReqMultiError is an error wrapping multiple validation
// errors returned by GetIncrementalBlacksReq.ValidateAll() if the designated
// constraints aren't met.
type GetIncrementalBlacksReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalBlacksReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalBlacksReqMultiError) AllErrors() []error { return m }

// GetIncrementalBlacksReqValidationError is the validation error returned by
// GetIncrementalBlacksReq.Validate if the designated constraints aren't met.
type GetIncrementalBlacksReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalBlacksReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalBlacksReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalBlacksReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalBlacksReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalBlacksReqValidationError) ErrorName() string {
	return "GetIncrementalBlacksReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalBlacksReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalBlacksReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalBlacksReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalBlacksReqValidationError{}

// Validate checks the field values on GetIncrementalBlacksResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncrementalBlacksResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncrementalBlacksResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncrementalBlacksRespMultiError, or nil if none found.
func (m *GetIncrementalBlacksResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncrementalBlacksResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Full

	for idx, item := range m.GetInsert() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalBlacksRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalBlacksRespValidationError{
						field:  fmt.Sprintf("Insert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalBlacksRespValidationError{
					field:  fmt.Sprintf("Insert[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncrementalBlacksRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncrementalBlacksRespValidationError{
						field:  fmt.Sprintf("Update[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncrementalBlacksRespValidationError{
					field:  fmt.Sprintf("Update[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIncrementalBlacksRespMultiError(errors)
	}

	return nil
}

// GetIncrementalBlacksRespMultiError is an error wrapping multiple validation
// errors returned by GetIncrementalBlacksResp.ValidateAll() if the designated
// constraints aren't met.
type GetIncrementalBlacksRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncrementalBlacksRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncrementalBlacksRespMultiError) AllErrors() []error { return m }

// GetIncrementalBlacksRespValidationError is the validation error returned by
// GetIncrementalBlacksResp.Validate if the designated constraints aren't met.
type GetIncrementalBlacksRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncrementalBlacksRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncrementalBlacksRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncrementalBlacksRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncrementalBlacksRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncrementalBlacksRespValidationError) ErrorName() string {
	return "GetIncrementalBlacksRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncrementalBlacksRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncrementalBlacksResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncrementalBlacksRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncrementalBlacksRespValidationError{}

// Validate checks the field values on GetSpecifiedBlacksReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecifiedBlacksReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecifiedBlacksReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecifiedBlacksReqMultiError, or nil if none found.
func (m *GetSpecifiedBlacksReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecifiedBlacksReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetSpecifiedBlacksReqMultiError(errors)
	}

	return nil
}

// GetSpecifiedBlacksReqMultiError is an error wrapping multiple validation
// errors returned by GetSpecifiedBlacksReq.ValidateAll() if the designated
// constraints aren't met.
type GetSpecifiedBlacksReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecifiedBlacksReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecifiedBlacksReqMultiError) AllErrors() []error { return m }

// GetSpecifiedBlacksReqValidationError is the validation error returned by
// GetSpecifiedBlacksReq.Validate if the designated constraints aren't met.
type GetSpecifiedBlacksReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecifiedBlacksReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecifiedBlacksReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecifiedBlacksReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecifiedBlacksReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecifiedBlacksReqValidationError) ErrorName() string {
	return "GetSpecifiedBlacksReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecifiedBlacksReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecifiedBlacksReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecifiedBlacksReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecifiedBlacksReqValidationError{}

// Validate checks the field values on GetSpecifiedBlacksResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecifiedBlacksResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecifiedBlacksResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecifiedBlacksRespMultiError, or nil if none found.
func (m *GetSpecifiedBlacksResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecifiedBlacksResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlacks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSpecifiedBlacksRespValidationError{
						field:  fmt.Sprintf("Blacks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSpecifiedBlacksRespValidationError{
						field:  fmt.Sprintf("Blacks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSpecifiedBlacksRespValidationError{
					field:  fmt.Sprintf("Blacks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetSpecifiedBlacksRespMultiError(errors)
	}

	return nil
}

// GetSpecifiedBlacksRespMultiError is an error wrapping multiple validation
// errors returned by GetSpecifiedBlacksResp.ValidateAll() if the designated
// constraints aren't met.
type GetSpecifiedBlacksRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecifiedBlacksRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecifiedBlacksRespMultiError) AllErrors() []error { return m }

// GetSpecifiedBlacksRespValidationError is the validation error returned by
// GetSpecifiedBlacksResp.Validate if the designated constraints aren't met.
type GetSpecifiedBlacksRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecifiedBlacksRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecifiedBlacksRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecifiedBlacksRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecifiedBlacksRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecifiedBlacksRespValidationError) ErrorName() string {
	return "GetSpecifiedBlacksRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecifiedBlacksRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecifiedBlacksResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecifiedBlacksRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecifiedBlacksRespValidationError{}

// Validate checks the field values on GetFullFriendUserIDsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullFriendUserIDsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullFriendUserIDsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFullFriendUserIDsReqMultiError, or nil if none found.
func (m *GetFullFriendUserIDsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullFriendUserIDsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdHash

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetFullFriendUserIDsReqMultiError(errors)
	}

	return nil
}

// GetFullFriendUserIDsReqMultiError is an error wrapping multiple validation
// errors returned by GetFullFriendUserIDsReq.ValidateAll() if the designated
// constraints aren't met.
type GetFullFriendUserIDsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullFriendUserIDsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullFriendUserIDsReqMultiError) AllErrors() []error { return m }

// GetFullFriendUserIDsReqValidationError is the validation error returned by
// GetFullFriendUserIDsReq.Validate if the designated constraints aren't met.
type GetFullFriendUserIDsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullFriendUserIDsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullFriendUserIDsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullFriendUserIDsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullFriendUserIDsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullFriendUserIDsReqValidationError) ErrorName() string {
	return "GetFullFriendUserIDsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullFriendUserIDsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullFriendUserIDsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullFriendUserIDsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullFriendUserIDsReqValidationError{}

// Validate checks the field values on GetFullFriendUserIDsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFullFriendUserIDsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFullFriendUserIDsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFullFriendUserIDsRespMultiError, or nil if none found.
func (m *GetFullFriendUserIDsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFullFriendUserIDsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VersionID

	// no validation rules for Equal

	if len(errors) > 0 {
		return GetFullFriendUserIDsRespMultiError(errors)
	}

	return nil
}

// GetFullFriendUserIDsRespMultiError is an error wrapping multiple validation
// errors returned by GetFullFriendUserIDsResp.ValidateAll() if the designated
// constraints aren't met.
type GetFullFriendUserIDsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFullFriendUserIDsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFullFriendUserIDsRespMultiError) AllErrors() []error { return m }

// GetFullFriendUserIDsRespValidationError is the validation error returned by
// GetFullFriendUserIDsResp.Validate if the designated constraints aren't met.
type GetFullFriendUserIDsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFullFriendUserIDsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFullFriendUserIDsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFullFriendUserIDsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFullFriendUserIDsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFullFriendUserIDsRespValidationError) ErrorName() string {
	return "GetFullFriendUserIDsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetFullFriendUserIDsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFullFriendUserIDsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFullFriendUserIDsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFullFriendUserIDsRespValidationError{}

// Validate checks the field values on NotificationUserInfoUpdateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationUserInfoUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationUserInfoUpdateReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NotificationUserInfoUpdateReqMultiError, or nil if none found.
func (m *NotificationUserInfoUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationUserInfoUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetOldUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationUserInfoUpdateReqValidationError{
					field:  "OldUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationUserInfoUpdateReqValidationError{
					field:  "OldUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOldUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationUserInfoUpdateReqValidationError{
				field:  "OldUserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNewUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationUserInfoUpdateReqValidationError{
					field:  "NewUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationUserInfoUpdateReqValidationError{
					field:  "NewUserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationUserInfoUpdateReqValidationError{
				field:  "NewUserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationUserInfoUpdateReqMultiError(errors)
	}

	return nil
}

// NotificationUserInfoUpdateReqMultiError is an error wrapping multiple
// validation errors returned by NotificationUserInfoUpdateReq.ValidateAll()
// if the designated constraints aren't met.
type NotificationUserInfoUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationUserInfoUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationUserInfoUpdateReqMultiError) AllErrors() []error { return m }

// NotificationUserInfoUpdateReqValidationError is the validation error
// returned by NotificationUserInfoUpdateReq.Validate if the designated
// constraints aren't met.
type NotificationUserInfoUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationUserInfoUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationUserInfoUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationUserInfoUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationUserInfoUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationUserInfoUpdateReqValidationError) ErrorName() string {
	return "NotificationUserInfoUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationUserInfoUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationUserInfoUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationUserInfoUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationUserInfoUpdateReqValidationError{}

// Validate checks the field values on NotificationUserInfoUpdateResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationUserInfoUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationUserInfoUpdateResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NotificationUserInfoUpdateRespMultiError, or nil if none found.
func (m *NotificationUserInfoUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationUserInfoUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotificationUserInfoUpdateRespMultiError(errors)
	}

	return nil
}

// NotificationUserInfoUpdateRespMultiError is an error wrapping multiple
// validation errors returned by NotificationUserInfoUpdateResp.ValidateAll()
// if the designated constraints aren't met.
type NotificationUserInfoUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationUserInfoUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationUserInfoUpdateRespMultiError) AllErrors() []error { return m }

// NotificationUserInfoUpdateRespValidationError is the validation error
// returned by NotificationUserInfoUpdateResp.Validate if the designated
// constraints aren't met.
type NotificationUserInfoUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationUserInfoUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationUserInfoUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationUserInfoUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationUserInfoUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationUserInfoUpdateRespValidationError) ErrorName() string {
	return "NotificationUserInfoUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationUserInfoUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationUserInfoUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationUserInfoUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationUserInfoUpdateRespValidationError{}

// Validate checks the field values on FriendInfoOnly with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FriendInfoOnly) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FriendInfoOnly with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FriendInfoOnlyMultiError,
// or nil if none found.
func (m *FriendInfoOnly) ValidateAll() error {
	return m.validate(true)
}

func (m *FriendInfoOnly) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for FriendUserID

	// no validation rules for Remark

	// no validation rules for CreateTime

	// no validation rules for AddSource

	// no validation rules for OperatorUserID

	// no validation rules for Ex

	// no validation rules for IsPinned

	if len(errors) > 0 {
		return FriendInfoOnlyMultiError(errors)
	}

	return nil
}

// FriendInfoOnlyMultiError is an error wrapping multiple validation errors
// returned by FriendInfoOnly.ValidateAll() if the designated constraints
// aren't met.
type FriendInfoOnlyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FriendInfoOnlyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FriendInfoOnlyMultiError) AllErrors() []error { return m }

// FriendInfoOnlyValidationError is the validation error returned by
// FriendInfoOnly.Validate if the designated constraints aren't met.
type FriendInfoOnlyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FriendInfoOnlyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FriendInfoOnlyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FriendInfoOnlyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FriendInfoOnlyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FriendInfoOnlyValidationError) ErrorName() string { return "FriendInfoOnlyValidationError" }

// Error satisfies the builtin error interface
func (e FriendInfoOnlyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFriendInfoOnly.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FriendInfoOnlyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FriendInfoOnlyValidationError{}

// Validate checks the field values on GetFriendInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendInfoReqMultiError, or nil if none found.
func (m *GetFriendInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	if len(errors) > 0 {
		return GetFriendInfoReqMultiError(errors)
	}

	return nil
}

// GetFriendInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetFriendInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetFriendInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendInfoReqMultiError) AllErrors() []error { return m }

// GetFriendInfoReqValidationError is the validation error returned by
// GetFriendInfoReq.Validate if the designated constraints aren't met.
type GetFriendInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendInfoReqValidationError) ErrorName() string { return "GetFriendInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetFriendInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendInfoReqValidationError{}

// Validate checks the field values on GetFriendInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendInfoRespMultiError, or nil if none found.
func (m *GetFriendInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriendInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendInfoRespValidationError{
						field:  fmt.Sprintf("FriendInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendInfoRespValidationError{
						field:  fmt.Sprintf("FriendInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendInfoRespValidationError{
					field:  fmt.Sprintf("FriendInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendInfoRespMultiError(errors)
	}

	return nil
}

// GetFriendInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetFriendInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetFriendInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendInfoRespMultiError) AllErrors() []error { return m }

// GetFriendInfoRespValidationError is the validation error returned by
// GetFriendInfoResp.Validate if the designated constraints aren't met.
type GetFriendInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendInfoRespValidationError) ErrorName() string {
	return "GetFriendInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendInfoRespValidationError{}
