// Copyright © 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openim.third;

import "sdkws/sdkws.proto";
import "wrapperspb/wrapperspb.proto";

option go_package = "github.com/ammmnia/protocol/third";

message KeyValues {
  string key = 1;
  repeated string values = 2;
}

message SignPart {
  int32 partNumber = 1;
  string url = 2;
  repeated KeyValues query = 3;
  repeated KeyValues header = 4;
}

message AuthSignParts {
  string url = 1;
  repeated KeyValues query = 2;
  repeated KeyValues header = 3;
  repeated SignPart parts = 4;
}

message PartLimitReq {}

message PartLimitResp {
  int64 minPartSize = 1;
  int64 maxPartSize = 2;
  int32 maxNumSize = 3;
}

message PartSizeReq {
  int64 size = 1;
}

message PartSizeResp {
  int64 size = 2;
}

message InitiateMultipartUploadReq {
  string hash = 1;
  int64 size = 2;
  int64 partSize = 3;
  int32 maxParts = 4;
  string cause = 5;
  string name = 6;
  string contentType = 7;
  string urlPrefix = 8;
}

message UploadInfo {
  string uploadID = 1;
  int64 partSize = 2;
  AuthSignParts sign = 3;
  int64 expireTime = 4;
}

message InitiateMultipartUploadResp {
  string url = 1;
  UploadInfo upload = 2;
}

message AuthSignReq {
  string uploadID = 1;
  repeated int32 partNumbers = 2;
}

message AuthSignResp {
  string url = 1;
  repeated KeyValues query = 2;
  repeated KeyValues header = 3;
  repeated SignPart parts = 4;
}

message CompleteMultipartUploadReq {
  string uploadID = 1;
  repeated string parts = 2;
  string name = 3;
  string contentType = 4;
  string cause = 5;
  string urlPrefix = 6;
}

message CompleteMultipartUploadResp {
  string url = 1;
}

message AccessURLReq {
  string name = 1;
  map<string, string> query = 2;
}

message AccessURLResp {
  string url = 1;
  int64 expireTime = 2;
}

message InitiateFormDataReq {
  string name = 1;
  int64 size = 2;
  string contentType = 3;
  string group = 4;
  int64 millisecond = 5;
  bool absolute = 6;
}

message InitiateFormDataResp {
  string id = 1;
  string url = 2;
  string file = 3;
  repeated KeyValues header = 4;
  map<string, string> formData = 5;
  int64 expires = 6;
  repeated int32 successCodes = 7;
}

message CompleteFormDataReq {
  string id = 1;
  string urlPrefix = 2;
}

message CompleteFormDataResp {
  string url = 1;
}

message DeleteOutdatedDataReq {
  int64 expireTime = 1;
}

message DeleteOutdatedDataResp {}

message FcmUpdateTokenReq {
  int32 platformID = 1;
  string fcmToken = 2;
  string account = 3;
  int64 expireTime = 4;
}

message FcmUpdateTokenResp {}

message SetAppBadgeReq {
  string userID = 1;
  int32 appUnreadCount = 2;
}

message SetAppBadgeResp {}

message fileURL {
  string filename = 1;
  string URL = 2;
}

message UploadLogsReq {
  int32 platform = 1;
  repeated fileURL fileURLs = 2;
  string systemType = 3;
  string version = 5;
  string ex = 4;
}

message UploadLogsResp {}

message DeleteLogsReq {
  repeated string logIDs = 1;
}

message DeleteLogsResp {}

message SearchLogsReq {
  string keyword = 1;
  int64 startTime = 2;
  int64 endTime = 3;
  sdkws.RequestPagination pagination = 4;
}

message LogInfo {
  string userID = 1;
  string platform = 2;
  string url = 3;
  int64 createTime = 4;
  string nickname = 5;
  string logID = 6;
  string filename = 7;
  string systemType = 8;
  string ex = 9;
  string version = 10;
}

message SearchLogsResp {
  repeated LogInfo logsInfos = 1;
  uint32 total = 2;
}

message ApplicationVersion {
  string id = 1;
  string platform = 2;
  string version = 3;
  string url = 4;
  string text = 5;
  bool force = 6;
  bool latest = 7;
  int64 createTime = 8;
}

message LatestApplicationVersionReq {
  string platform = 2;
  string version = 3;
}

message LatestApplicationVersionResp {
  ApplicationVersion version = 1;
}

message AddApplicationVersionReq {
  string platform = 1;
  string version = 2;
  string url = 3;
  string text = 4;
  bool force = 5;
  bool latest = 6;
}

message AddApplicationVersionResp {

}

message UpdateApplicationVersionReq {
  string id = 1;
  openim.protobuf.StringValue platform = 2;
  openim.protobuf.StringValue version = 3;
  openim.protobuf.StringValue url = 4;
  openim.protobuf.StringValue text = 5;
  openim.protobuf.BoolValue force = 6;
  openim.protobuf.BoolValue latest = 7;
}

message UpdateApplicationVersionResp {

}

message DeleteApplicationVersionReq {
  repeated string id = 1;
}

message DeleteApplicationVersionResp {

}

message PageApplicationVersionReq {
  repeated string platform = 1;
  openim.sdkws.RequestPagination pagination = 2;
}

message PageApplicationVersionResp {
  int64 total = 1;
  repeated ApplicationVersion versions = 2;
}

service third {
  rpc PartLimit(PartLimitReq) returns (PartLimitResp);
  rpc PartSize(PartSizeReq) returns (PartSizeResp);
  rpc InitiateMultipartUpload(InitiateMultipartUploadReq) returns (InitiateMultipartUploadResp);
  rpc AuthSign(AuthSignReq) returns (AuthSignResp);
  rpc CompleteMultipartUpload(CompleteMultipartUploadReq) returns (CompleteMultipartUploadResp);
  rpc AccessURL(AccessURLReq) returns (AccessURLResp);
  rpc InitiateFormData(InitiateFormDataReq) returns (InitiateFormDataResp);
  rpc CompleteFormData(CompleteFormDataReq) returns (CompleteFormDataResp);
  rpc DeleteOutdatedData(DeleteOutdatedDataReq) returns (DeleteOutdatedDataResp);

  rpc FcmUpdateToken(FcmUpdateTokenReq) returns (FcmUpdateTokenResp);
  rpc SetAppBadge(SetAppBadgeReq) returns (SetAppBadgeResp);
  //日志
  rpc UploadLogs(UploadLogsReq) returns (UploadLogsResp);
  rpc DeleteLogs(DeleteLogsReq) returns (DeleteLogsResp);
  rpc SearchLogs(SearchLogsReq) returns (SearchLogsResp);

  rpc LatestApplicationVersion(LatestApplicationVersionReq) returns (LatestApplicationVersionResp);
  rpc AddApplicationVersion(AddApplicationVersionReq) returns (AddApplicationVersionResp);
  rpc UpdateApplicationVersion(UpdateApplicationVersionReq) returns (UpdateApplicationVersionResp);
  rpc DeleteApplicationVersion(DeleteApplicationVersionReq) returns (DeleteApplicationVersionResp);
  rpc PageApplicationVersion(PageApplicationVersionReq) returns (PageApplicationVersionResp);
}
