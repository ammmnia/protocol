// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/user.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllUserIDReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserIDReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserIDReqMultiError, or nil if none found.
func (m *GetAllUserIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllUserIDReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllUserIDReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllUserIDReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAllUserIDReqMultiError(errors)
	}

	return nil
}

// GetAllUserIDReqMultiError is an error wrapping multiple validation errors
// returned by GetAllUserIDReq.ValidateAll() if the designated constraints
// aren't met.
type GetAllUserIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserIDReqMultiError) AllErrors() []error { return m }

// GetAllUserIDReqValidationError is the validation error returned by
// GetAllUserIDReq.Validate if the designated constraints aren't met.
type GetAllUserIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserIDReqValidationError) ErrorName() string { return "GetAllUserIDReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAllUserIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserIDReqValidationError{}

// Validate checks the field values on GetAllUserIDResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserIDResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserIDResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserIDRespMultiError, or nil if none found.
func (m *GetAllUserIDResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserIDResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return GetAllUserIDRespMultiError(errors)
	}

	return nil
}

// GetAllUserIDRespMultiError is an error wrapping multiple validation errors
// returned by GetAllUserIDResp.ValidateAll() if the designated constraints
// aren't met.
type GetAllUserIDRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserIDRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserIDRespMultiError) AllErrors() []error { return m }

// GetAllUserIDRespValidationError is the validation error returned by
// GetAllUserIDResp.Validate if the designated constraints aren't met.
type GetAllUserIDRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserIDRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserIDRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserIDRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserIDRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserIDRespValidationError) ErrorName() string { return "GetAllUserIDRespValidationError" }

// Error satisfies the builtin error interface
func (e GetAllUserIDRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserIDResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserIDRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserIDRespValidationError{}

// Validate checks the field values on AccountCheckReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccountCheckReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountCheckReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountCheckReqMultiError, or nil if none found.
func (m *AccountCheckReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountCheckReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountCheckReqMultiError(errors)
	}

	return nil
}

// AccountCheckReqMultiError is an error wrapping multiple validation errors
// returned by AccountCheckReq.ValidateAll() if the designated constraints
// aren't met.
type AccountCheckReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountCheckReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountCheckReqMultiError) AllErrors() []error { return m }

// AccountCheckReqValidationError is the validation error returned by
// AccountCheckReq.Validate if the designated constraints aren't met.
type AccountCheckReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCheckReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCheckReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCheckReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCheckReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCheckReqValidationError) ErrorName() string { return "AccountCheckReqValidationError" }

// Error satisfies the builtin error interface
func (e AccountCheckReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCheckReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCheckReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCheckReqValidationError{}

// Validate checks the field values on AccountCheckResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccountCheckResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountCheckResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountCheckRespMultiError, or nil if none found.
func (m *AccountCheckResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountCheckResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountCheckRespValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountCheckRespValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountCheckRespValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountCheckRespMultiError(errors)
	}

	return nil
}

// AccountCheckRespMultiError is an error wrapping multiple validation errors
// returned by AccountCheckResp.ValidateAll() if the designated constraints
// aren't met.
type AccountCheckRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountCheckRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountCheckRespMultiError) AllErrors() []error { return m }

// AccountCheckRespValidationError is the validation error returned by
// AccountCheckResp.Validate if the designated constraints aren't met.
type AccountCheckRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCheckRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCheckRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCheckRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCheckRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCheckRespValidationError) ErrorName() string { return "AccountCheckRespValidationError" }

// Error satisfies the builtin error interface
func (e AccountCheckRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCheckResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCheckRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCheckRespValidationError{}

// Validate checks the field values on GetDesignateUsersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignateUsersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignateUsersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignateUsersReqMultiError, or nil if none found.
func (m *GetDesignateUsersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignateUsersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDesignateUsersReqMultiError(errors)
	}

	return nil
}

// GetDesignateUsersReqMultiError is an error wrapping multiple validation
// errors returned by GetDesignateUsersReq.ValidateAll() if the designated
// constraints aren't met.
type GetDesignateUsersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignateUsersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignateUsersReqMultiError) AllErrors() []error { return m }

// GetDesignateUsersReqValidationError is the validation error returned by
// GetDesignateUsersReq.Validate if the designated constraints aren't met.
type GetDesignateUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignateUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignateUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignateUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignateUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignateUsersReqValidationError) ErrorName() string {
	return "GetDesignateUsersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignateUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignateUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignateUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignateUsersReqValidationError{}

// Validate checks the field values on GetDesignateUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesignateUsersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesignateUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesignateUsersRespMultiError, or nil if none found.
func (m *GetDesignateUsersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesignateUsersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsersInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDesignateUsersRespValidationError{
						field:  fmt.Sprintf("UsersInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDesignateUsersRespValidationError{
						field:  fmt.Sprintf("UsersInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDesignateUsersRespValidationError{
					field:  fmt.Sprintf("UsersInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDesignateUsersRespMultiError(errors)
	}

	return nil
}

// GetDesignateUsersRespMultiError is an error wrapping multiple validation
// errors returned by GetDesignateUsersResp.ValidateAll() if the designated
// constraints aren't met.
type GetDesignateUsersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesignateUsersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesignateUsersRespMultiError) AllErrors() []error { return m }

// GetDesignateUsersRespValidationError is the validation error returned by
// GetDesignateUsersResp.Validate if the designated constraints aren't met.
type GetDesignateUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesignateUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesignateUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesignateUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesignateUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesignateUsersRespValidationError) ErrorName() string {
	return "GetDesignateUsersRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesignateUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesignateUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesignateUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesignateUsersRespValidationError{}

// Validate checks the field values on UpdateUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoReqMultiError, or nil if none found.
func (m *UpdateUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoReqValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserInfoReqMultiError(errors)
	}

	return nil
}

// UpdateUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by UpdateUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoReqMultiError) AllErrors() []error { return m }

// UpdateUserInfoReqValidationError is the validation error returned by
// UpdateUserInfoReq.Validate if the designated constraints aren't met.
type UpdateUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoReqValidationError) ErrorName() string {
	return "UpdateUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoReqValidationError{}

// Validate checks the field values on UpdateUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoRespMultiError, or nil if none found.
func (m *UpdateUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserInfoRespMultiError(errors)
	}

	return nil
}

// UpdateUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by UpdateUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoRespMultiError) AllErrors() []error { return m }

// UpdateUserInfoRespValidationError is the validation error returned by
// UpdateUserInfoResp.Validate if the designated constraints aren't met.
type UpdateUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoRespValidationError) ErrorName() string {
	return "UpdateUserInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoRespValidationError{}

// Validate checks the field values on UpdateUserInfoExReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoExReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoExReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoExReqMultiError, or nil if none found.
func (m *UpdateUserInfoExReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoExReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserInfoExReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserInfoExReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserInfoExReqValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserInfoExReqMultiError(errors)
	}

	return nil
}

// UpdateUserInfoExReqMultiError is an error wrapping multiple validation
// errors returned by UpdateUserInfoExReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserInfoExReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoExReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoExReqMultiError) AllErrors() []error { return m }

// UpdateUserInfoExReqValidationError is the validation error returned by
// UpdateUserInfoExReq.Validate if the designated constraints aren't met.
type UpdateUserInfoExReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoExReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoExReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoExReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoExReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoExReqValidationError) ErrorName() string {
	return "UpdateUserInfoExReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoExReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoExReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoExReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoExReqValidationError{}

// Validate checks the field values on UpdateUserInfoExResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoExResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoExResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoExRespMultiError, or nil if none found.
func (m *UpdateUserInfoExResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoExResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserInfoExRespMultiError(errors)
	}

	return nil
}

// UpdateUserInfoExRespMultiError is an error wrapping multiple validation
// errors returned by UpdateUserInfoExResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserInfoExRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoExRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoExRespMultiError) AllErrors() []error { return m }

// UpdateUserInfoExRespValidationError is the validation error returned by
// UpdateUserInfoExResp.Validate if the designated constraints aren't met.
type UpdateUserInfoExRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoExRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoExRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoExRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoExRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoExRespValidationError) ErrorName() string {
	return "UpdateUserInfoExRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoExRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoExResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoExRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoExRespValidationError{}

// Validate checks the field values on SetGlobalRecvMessageOptReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGlobalRecvMessageOptReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGlobalRecvMessageOptReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGlobalRecvMessageOptReqMultiError, or nil if none found.
func (m *SetGlobalRecvMessageOptReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGlobalRecvMessageOptReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for GlobalRecvMsgOpt

	if len(errors) > 0 {
		return SetGlobalRecvMessageOptReqMultiError(errors)
	}

	return nil
}

// SetGlobalRecvMessageOptReqMultiError is an error wrapping multiple
// validation errors returned by SetGlobalRecvMessageOptReq.ValidateAll() if
// the designated constraints aren't met.
type SetGlobalRecvMessageOptReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGlobalRecvMessageOptReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGlobalRecvMessageOptReqMultiError) AllErrors() []error { return m }

// SetGlobalRecvMessageOptReqValidationError is the validation error returned
// by SetGlobalRecvMessageOptReq.Validate if the designated constraints aren't met.
type SetGlobalRecvMessageOptReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGlobalRecvMessageOptReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGlobalRecvMessageOptReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGlobalRecvMessageOptReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGlobalRecvMessageOptReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGlobalRecvMessageOptReqValidationError) ErrorName() string {
	return "SetGlobalRecvMessageOptReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetGlobalRecvMessageOptReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGlobalRecvMessageOptReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGlobalRecvMessageOptReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGlobalRecvMessageOptReqValidationError{}

// Validate checks the field values on SetGlobalRecvMessageOptResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetGlobalRecvMessageOptResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetGlobalRecvMessageOptResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetGlobalRecvMessageOptRespMultiError, or nil if none found.
func (m *SetGlobalRecvMessageOptResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetGlobalRecvMessageOptResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetGlobalRecvMessageOptRespMultiError(errors)
	}

	return nil
}

// SetGlobalRecvMessageOptRespMultiError is an error wrapping multiple
// validation errors returned by SetGlobalRecvMessageOptResp.ValidateAll() if
// the designated constraints aren't met.
type SetGlobalRecvMessageOptRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetGlobalRecvMessageOptRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetGlobalRecvMessageOptRespMultiError) AllErrors() []error { return m }

// SetGlobalRecvMessageOptRespValidationError is the validation error returned
// by SetGlobalRecvMessageOptResp.Validate if the designated constraints
// aren't met.
type SetGlobalRecvMessageOptRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetGlobalRecvMessageOptRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetGlobalRecvMessageOptRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetGlobalRecvMessageOptRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetGlobalRecvMessageOptRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetGlobalRecvMessageOptRespValidationError) ErrorName() string {
	return "SetGlobalRecvMessageOptRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetGlobalRecvMessageOptRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetGlobalRecvMessageOptResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetGlobalRecvMessageOptRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetGlobalRecvMessageOptRespValidationError{}

// Validate checks the field values on SetConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationReqMultiError, or nil if none found.
func (m *SetConversationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetConversationReqValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetConversationReqValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetConversationReqValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NotificationType

	// no validation rules for OperationID

	if len(errors) > 0 {
		return SetConversationReqMultiError(errors)
	}

	return nil
}

// SetConversationReqMultiError is an error wrapping multiple validation errors
// returned by SetConversationReq.ValidateAll() if the designated constraints
// aren't met.
type SetConversationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationReqMultiError) AllErrors() []error { return m }

// SetConversationReqValidationError is the validation error returned by
// SetConversationReq.Validate if the designated constraints aren't met.
type SetConversationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationReqValidationError) ErrorName() string {
	return "SetConversationReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationReqValidationError{}

// Validate checks the field values on SetConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetConversationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetConversationRespMultiError, or nil if none found.
func (m *SetConversationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetConversationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetConversationRespMultiError(errors)
	}

	return nil
}

// SetConversationRespMultiError is an error wrapping multiple validation
// errors returned by SetConversationResp.ValidateAll() if the designated
// constraints aren't met.
type SetConversationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetConversationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetConversationRespMultiError) AllErrors() []error { return m }

// SetConversationRespValidationError is the validation error returned by
// SetConversationResp.Validate if the designated constraints aren't met.
type SetConversationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetConversationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetConversationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetConversationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetConversationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetConversationRespValidationError) ErrorName() string {
	return "SetConversationRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetConversationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetConversationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetConversationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetConversationRespValidationError{}

// Validate checks the field values on SetRecvMsgOptReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetRecvMsgOptReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRecvMsgOptReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRecvMsgOptReqMultiError, or nil if none found.
func (m *SetRecvMsgOptReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRecvMsgOptReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for ConversationID

	// no validation rules for RecvMsgOpt

	// no validation rules for NotificationType

	// no validation rules for OperationID

	if len(errors) > 0 {
		return SetRecvMsgOptReqMultiError(errors)
	}

	return nil
}

// SetRecvMsgOptReqMultiError is an error wrapping multiple validation errors
// returned by SetRecvMsgOptReq.ValidateAll() if the designated constraints
// aren't met.
type SetRecvMsgOptReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRecvMsgOptReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRecvMsgOptReqMultiError) AllErrors() []error { return m }

// SetRecvMsgOptReqValidationError is the validation error returned by
// SetRecvMsgOptReq.Validate if the designated constraints aren't met.
type SetRecvMsgOptReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRecvMsgOptReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRecvMsgOptReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRecvMsgOptReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRecvMsgOptReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRecvMsgOptReqValidationError) ErrorName() string { return "SetRecvMsgOptReqValidationError" }

// Error satisfies the builtin error interface
func (e SetRecvMsgOptReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRecvMsgOptReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRecvMsgOptReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRecvMsgOptReqValidationError{}

// Validate checks the field values on SetRecvMsgOptResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetRecvMsgOptResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRecvMsgOptResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRecvMsgOptRespMultiError, or nil if none found.
func (m *SetRecvMsgOptResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRecvMsgOptResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetRecvMsgOptRespMultiError(errors)
	}

	return nil
}

// SetRecvMsgOptRespMultiError is an error wrapping multiple validation errors
// returned by SetRecvMsgOptResp.ValidateAll() if the designated constraints
// aren't met.
type SetRecvMsgOptRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRecvMsgOptRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRecvMsgOptRespMultiError) AllErrors() []error { return m }

// SetRecvMsgOptRespValidationError is the validation error returned by
// SetRecvMsgOptResp.Validate if the designated constraints aren't met.
type SetRecvMsgOptRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRecvMsgOptRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRecvMsgOptRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRecvMsgOptRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRecvMsgOptRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRecvMsgOptRespValidationError) ErrorName() string {
	return "SetRecvMsgOptRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetRecvMsgOptRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRecvMsgOptResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRecvMsgOptRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRecvMsgOptRespValidationError{}

// Validate checks the field values on GetConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationReqMultiError, or nil if none found.
func (m *GetConversationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConversationID

	// no validation rules for OwnerUserID

	// no validation rules for OperationID

	if len(errors) > 0 {
		return GetConversationReqMultiError(errors)
	}

	return nil
}

// GetConversationReqMultiError is an error wrapping multiple validation errors
// returned by GetConversationReq.ValidateAll() if the designated constraints
// aren't met.
type GetConversationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationReqMultiError) AllErrors() []error { return m }

// GetConversationReqValidationError is the validation error returned by
// GetConversationReq.Validate if the designated constraints aren't met.
type GetConversationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationReqValidationError) ErrorName() string {
	return "GetConversationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationReqValidationError{}

// Validate checks the field values on GetConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationRespMultiError, or nil if none found.
func (m *GetConversationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConversationRespValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConversationRespValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConversationRespValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConversationRespMultiError(errors)
	}

	return nil
}

// GetConversationRespMultiError is an error wrapping multiple validation
// errors returned by GetConversationResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationRespMultiError) AllErrors() []error { return m }

// GetConversationRespValidationError is the validation error returned by
// GetConversationResp.Validate if the designated constraints aren't met.
type GetConversationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationRespValidationError) ErrorName() string {
	return "GetConversationRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationRespValidationError{}

// Validate checks the field values on GetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationsReqMultiError, or nil if none found.
func (m *GetConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for OperationID

	if len(errors) > 0 {
		return GetConversationsReqMultiError(errors)
	}

	return nil
}

// GetConversationsReqMultiError is an error wrapping multiple validation
// errors returned by GetConversationsReq.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsReqMultiError) AllErrors() []error { return m }

// GetConversationsReqValidationError is the validation error returned by
// GetConversationsReq.Validate if the designated constraints aren't met.
type GetConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsReqValidationError) ErrorName() string {
	return "GetConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsReqValidationError{}

// Validate checks the field values on GetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationsRespMultiError, or nil if none found.
func (m *GetConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConversationsRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConversationsRespMultiError(errors)
	}

	return nil
}

// GetConversationsRespMultiError is an error wrapping multiple validation
// errors returned by GetConversationsResp.ValidateAll() if the designated
// constraints aren't met.
type GetConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationsRespMultiError) AllErrors() []error { return m }

// GetConversationsRespValidationError is the validation error returned by
// GetConversationsResp.Validate if the designated constraints aren't met.
type GetConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationsRespValidationError) ErrorName() string {
	return "GetConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationsRespValidationError{}

// Validate checks the field values on GetAllConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllConversationsReqMultiError, or nil if none found.
func (m *GetAllConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerUserID

	// no validation rules for OperationID

	if len(errors) > 0 {
		return GetAllConversationsReqMultiError(errors)
	}

	return nil
}

// GetAllConversationsReqMultiError is an error wrapping multiple validation
// errors returned by GetAllConversationsReq.ValidateAll() if the designated
// constraints aren't met.
type GetAllConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllConversationsReqMultiError) AllErrors() []error { return m }

// GetAllConversationsReqValidationError is the validation error returned by
// GetAllConversationsReq.Validate if the designated constraints aren't met.
type GetAllConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllConversationsReqValidationError) ErrorName() string {
	return "GetAllConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllConversationsReqValidationError{}

// Validate checks the field values on GetAllConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllConversationsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllConversationsRespMultiError, or nil if none found.
func (m *GetAllConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllConversationsRespValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllConversationsRespValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllConversationsRespMultiError(errors)
	}

	return nil
}

// GetAllConversationsRespMultiError is an error wrapping multiple validation
// errors returned by GetAllConversationsResp.ValidateAll() if the designated
// constraints aren't met.
type GetAllConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllConversationsRespMultiError) AllErrors() []error { return m }

// GetAllConversationsRespValidationError is the validation error returned by
// GetAllConversationsResp.Validate if the designated constraints aren't met.
type GetAllConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllConversationsRespValidationError) ErrorName() string {
	return "GetAllConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllConversationsRespValidationError{}

// Validate checks the field values on BatchSetConversationsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchSetConversationsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSetConversationsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchSetConversationsReqMultiError, or nil if none found.
func (m *BatchSetConversationsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSetConversationsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchSetConversationsReqValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchSetConversationsReqValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchSetConversationsReqValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OwnerUserID

	// no validation rules for NotificationType

	// no validation rules for OperationID

	if len(errors) > 0 {
		return BatchSetConversationsReqMultiError(errors)
	}

	return nil
}

// BatchSetConversationsReqMultiError is an error wrapping multiple validation
// errors returned by BatchSetConversationsReq.ValidateAll() if the designated
// constraints aren't met.
type BatchSetConversationsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSetConversationsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSetConversationsReqMultiError) AllErrors() []error { return m }

// BatchSetConversationsReqValidationError is the validation error returned by
// BatchSetConversationsReq.Validate if the designated constraints aren't met.
type BatchSetConversationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSetConversationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSetConversationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSetConversationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSetConversationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSetConversationsReqValidationError) ErrorName() string {
	return "BatchSetConversationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSetConversationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSetConversationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSetConversationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSetConversationsReqValidationError{}

// Validate checks the field values on BatchSetConversationsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchSetConversationsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchSetConversationsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchSetConversationsRespMultiError, or nil if none found.
func (m *BatchSetConversationsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchSetConversationsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchSetConversationsRespMultiError(errors)
	}

	return nil
}

// BatchSetConversationsRespMultiError is an error wrapping multiple validation
// errors returned by BatchSetConversationsResp.ValidateAll() if the
// designated constraints aren't met.
type BatchSetConversationsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchSetConversationsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchSetConversationsRespMultiError) AllErrors() []error { return m }

// BatchSetConversationsRespValidationError is the validation error returned by
// BatchSetConversationsResp.Validate if the designated constraints aren't met.
type BatchSetConversationsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchSetConversationsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchSetConversationsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchSetConversationsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchSetConversationsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchSetConversationsRespValidationError) ErrorName() string {
	return "BatchSetConversationsRespValidationError"
}

// Error satisfies the builtin error interface
func (e BatchSetConversationsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchSetConversationsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchSetConversationsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchSetConversationsRespValidationError{}

// Validate checks the field values on GetPaginationUsersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaginationUsersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationUsersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaginationUsersReqMultiError, or nil if none found.
func (m *GetPaginationUsersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationUsersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaginationUsersReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaginationUsersReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaginationUsersReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserID

	// no validation rules for NickName

	if len(errors) > 0 {
		return GetPaginationUsersReqMultiError(errors)
	}

	return nil
}

// GetPaginationUsersReqMultiError is an error wrapping multiple validation
// errors returned by GetPaginationUsersReq.ValidateAll() if the designated
// constraints aren't met.
type GetPaginationUsersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationUsersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationUsersReqMultiError) AllErrors() []error { return m }

// GetPaginationUsersReqValidationError is the validation error returned by
// GetPaginationUsersReq.Validate if the designated constraints aren't met.
type GetPaginationUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationUsersReqValidationError) ErrorName() string {
	return "GetPaginationUsersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationUsersReqValidationError{}

// Validate checks the field values on GetPaginationUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaginationUsersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaginationUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaginationUsersRespMultiError, or nil if none found.
func (m *GetPaginationUsersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaginationUsersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaginationUsersRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaginationUsersRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaginationUsersRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPaginationUsersRespMultiError(errors)
	}

	return nil
}

// GetPaginationUsersRespMultiError is an error wrapping multiple validation
// errors returned by GetPaginationUsersResp.ValidateAll() if the designated
// constraints aren't met.
type GetPaginationUsersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaginationUsersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaginationUsersRespMultiError) AllErrors() []error { return m }

// GetPaginationUsersRespValidationError is the validation error returned by
// GetPaginationUsersResp.Validate if the designated constraints aren't met.
type GetPaginationUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaginationUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaginationUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaginationUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaginationUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaginationUsersRespValidationError) ErrorName() string {
	return "GetPaginationUsersRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaginationUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaginationUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaginationUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaginationUsersRespValidationError{}

// Validate checks the field values on UserRegisterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReqMultiError, or nil if none found.
func (m *UserRegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserRegisterReqValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserRegisterReqValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserRegisterReqValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserRegisterReqMultiError(errors)
	}

	return nil
}

// UserRegisterReqMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReq.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReqMultiError) AllErrors() []error { return m }

// UserRegisterReqValidationError is the validation error returned by
// UserRegisterReq.Validate if the designated constraints aren't met.
type UserRegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReqValidationError) ErrorName() string { return "UserRegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReqValidationError{}

// Validate checks the field values on UserRegisterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRespMultiError, or nil if none found.
func (m *UserRegisterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserRegisterRespMultiError(errors)
	}

	return nil
}

// UserRegisterRespMultiError is an error wrapping multiple validation errors
// returned by UserRegisterResp.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRespMultiError) AllErrors() []error { return m }

// UserRegisterRespValidationError is the validation error returned by
// UserRegisterResp.Validate if the designated constraints aren't met.
type UserRegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRespValidationError) ErrorName() string { return "UserRegisterRespValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRespValidationError{}

// Validate checks the field values on GetGlobalRecvMessageOptReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGlobalRecvMessageOptReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGlobalRecvMessageOptReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGlobalRecvMessageOptReqMultiError, or nil if none found.
func (m *GetGlobalRecvMessageOptReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGlobalRecvMessageOptReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetGlobalRecvMessageOptReqMultiError(errors)
	}

	return nil
}

// GetGlobalRecvMessageOptReqMultiError is an error wrapping multiple
// validation errors returned by GetGlobalRecvMessageOptReq.ValidateAll() if
// the designated constraints aren't met.
type GetGlobalRecvMessageOptReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGlobalRecvMessageOptReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGlobalRecvMessageOptReqMultiError) AllErrors() []error { return m }

// GetGlobalRecvMessageOptReqValidationError is the validation error returned
// by GetGlobalRecvMessageOptReq.Validate if the designated constraints aren't met.
type GetGlobalRecvMessageOptReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGlobalRecvMessageOptReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGlobalRecvMessageOptReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGlobalRecvMessageOptReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGlobalRecvMessageOptReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGlobalRecvMessageOptReqValidationError) ErrorName() string {
	return "GetGlobalRecvMessageOptReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetGlobalRecvMessageOptReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGlobalRecvMessageOptReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGlobalRecvMessageOptReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGlobalRecvMessageOptReqValidationError{}

// Validate checks the field values on GetGlobalRecvMessageOptResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGlobalRecvMessageOptResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGlobalRecvMessageOptResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGlobalRecvMessageOptRespMultiError, or nil if none found.
func (m *GetGlobalRecvMessageOptResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGlobalRecvMessageOptResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GlobalRecvMsgOpt

	if len(errors) > 0 {
		return GetGlobalRecvMessageOptRespMultiError(errors)
	}

	return nil
}

// GetGlobalRecvMessageOptRespMultiError is an error wrapping multiple
// validation errors returned by GetGlobalRecvMessageOptResp.ValidateAll() if
// the designated constraints aren't met.
type GetGlobalRecvMessageOptRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGlobalRecvMessageOptRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGlobalRecvMessageOptRespMultiError) AllErrors() []error { return m }

// GetGlobalRecvMessageOptRespValidationError is the validation error returned
// by GetGlobalRecvMessageOptResp.Validate if the designated constraints
// aren't met.
type GetGlobalRecvMessageOptRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGlobalRecvMessageOptRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGlobalRecvMessageOptRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGlobalRecvMessageOptRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGlobalRecvMessageOptRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGlobalRecvMessageOptRespValidationError) ErrorName() string {
	return "GetGlobalRecvMessageOptRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetGlobalRecvMessageOptRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGlobalRecvMessageOptResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGlobalRecvMessageOptRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGlobalRecvMessageOptRespValidationError{}

// Validate checks the field values on UserRegisterCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterCountReqMultiError, or nil if none found.
func (m *UserRegisterCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return UserRegisterCountReqMultiError(errors)
	}

	return nil
}

// UserRegisterCountReqMultiError is an error wrapping multiple validation
// errors returned by UserRegisterCountReq.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterCountReqMultiError) AllErrors() []error { return m }

// UserRegisterCountReqValidationError is the validation error returned by
// UserRegisterCountReq.Validate if the designated constraints aren't met.
type UserRegisterCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterCountReqValidationError) ErrorName() string {
	return "UserRegisterCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterCountReqValidationError{}

// Validate checks the field values on UserRegisterCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterCountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterCountResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterCountRespMultiError, or nil if none found.
func (m *UserRegisterCountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterCountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Before

	// no validation rules for Count

	if len(errors) > 0 {
		return UserRegisterCountRespMultiError(errors)
	}

	return nil
}

// UserRegisterCountRespMultiError is an error wrapping multiple validation
// errors returned by UserRegisterCountResp.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterCountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterCountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterCountRespMultiError) AllErrors() []error { return m }

// UserRegisterCountRespValidationError is the validation error returned by
// UserRegisterCountResp.Validate if the designated constraints aren't met.
type UserRegisterCountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterCountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterCountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterCountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterCountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterCountRespValidationError) ErrorName() string {
	return "UserRegisterCountRespValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterCountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterCountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterCountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterCountRespValidationError{}

// Validate checks the field values on SubscribeOrCancelUsersStatusReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeOrCancelUsersStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeOrCancelUsersStatusReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubscribeOrCancelUsersStatusReqMultiError, or nil if none found.
func (m *SubscribeOrCancelUsersStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeOrCancelUsersStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Genre

	if len(errors) > 0 {
		return SubscribeOrCancelUsersStatusReqMultiError(errors)
	}

	return nil
}

// SubscribeOrCancelUsersStatusReqMultiError is an error wrapping multiple
// validation errors returned by SubscribeOrCancelUsersStatusReq.ValidateAll()
// if the designated constraints aren't met.
type SubscribeOrCancelUsersStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeOrCancelUsersStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeOrCancelUsersStatusReqMultiError) AllErrors() []error { return m }

// SubscribeOrCancelUsersStatusReqValidationError is the validation error
// returned by SubscribeOrCancelUsersStatusReq.Validate if the designated
// constraints aren't met.
type SubscribeOrCancelUsersStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeOrCancelUsersStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeOrCancelUsersStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeOrCancelUsersStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeOrCancelUsersStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeOrCancelUsersStatusReqValidationError) ErrorName() string {
	return "SubscribeOrCancelUsersStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeOrCancelUsersStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeOrCancelUsersStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeOrCancelUsersStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeOrCancelUsersStatusReqValidationError{}

// Validate checks the field values on SubscribeOrCancelUsersStatusResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubscribeOrCancelUsersStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeOrCancelUsersStatusResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubscribeOrCancelUsersStatusRespMultiError, or nil if none found.
func (m *SubscribeOrCancelUsersStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeOrCancelUsersStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatusList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscribeOrCancelUsersStatusRespValidationError{
						field:  fmt.Sprintf("StatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscribeOrCancelUsersStatusRespValidationError{
						field:  fmt.Sprintf("StatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscribeOrCancelUsersStatusRespValidationError{
					field:  fmt.Sprintf("StatusList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubscribeOrCancelUsersStatusRespMultiError(errors)
	}

	return nil
}

// SubscribeOrCancelUsersStatusRespMultiError is an error wrapping multiple
// validation errors returned by
// SubscribeOrCancelUsersStatusResp.ValidateAll() if the designated
// constraints aren't met.
type SubscribeOrCancelUsersStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeOrCancelUsersStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeOrCancelUsersStatusRespMultiError) AllErrors() []error { return m }

// SubscribeOrCancelUsersStatusRespValidationError is the validation error
// returned by SubscribeOrCancelUsersStatusResp.Validate if the designated
// constraints aren't met.
type SubscribeOrCancelUsersStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeOrCancelUsersStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeOrCancelUsersStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeOrCancelUsersStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeOrCancelUsersStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeOrCancelUsersStatusRespValidationError) ErrorName() string {
	return "SubscribeOrCancelUsersStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeOrCancelUsersStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeOrCancelUsersStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeOrCancelUsersStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeOrCancelUsersStatusRespValidationError{}

// Validate checks the field values on GetSubscribeUsersStatusReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribeUsersStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribeUsersStatusReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscribeUsersStatusReqMultiError, or nil if none found.
func (m *GetSubscribeUsersStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribeUsersStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetSubscribeUsersStatusReqMultiError(errors)
	}

	return nil
}

// GetSubscribeUsersStatusReqMultiError is an error wrapping multiple
// validation errors returned by GetSubscribeUsersStatusReq.ValidateAll() if
// the designated constraints aren't met.
type GetSubscribeUsersStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribeUsersStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribeUsersStatusReqMultiError) AllErrors() []error { return m }

// GetSubscribeUsersStatusReqValidationError is the validation error returned
// by GetSubscribeUsersStatusReq.Validate if the designated constraints aren't met.
type GetSubscribeUsersStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribeUsersStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribeUsersStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribeUsersStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribeUsersStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribeUsersStatusReqValidationError) ErrorName() string {
	return "GetSubscribeUsersStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribeUsersStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribeUsersStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribeUsersStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribeUsersStatusReqValidationError{}

// Validate checks the field values on GetSubscribeUsersStatusResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribeUsersStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribeUsersStatusResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscribeUsersStatusRespMultiError, or nil if none found.
func (m *GetSubscribeUsersStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribeUsersStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatusList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubscribeUsersStatusRespValidationError{
						field:  fmt.Sprintf("StatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubscribeUsersStatusRespValidationError{
						field:  fmt.Sprintf("StatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubscribeUsersStatusRespValidationError{
					field:  fmt.Sprintf("StatusList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubscribeUsersStatusRespMultiError(errors)
	}

	return nil
}

// GetSubscribeUsersStatusRespMultiError is an error wrapping multiple
// validation errors returned by GetSubscribeUsersStatusResp.ValidateAll() if
// the designated constraints aren't met.
type GetSubscribeUsersStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribeUsersStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribeUsersStatusRespMultiError) AllErrors() []error { return m }

// GetSubscribeUsersStatusRespValidationError is the validation error returned
// by GetSubscribeUsersStatusResp.Validate if the designated constraints
// aren't met.
type GetSubscribeUsersStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribeUsersStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribeUsersStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribeUsersStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribeUsersStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribeUsersStatusRespValidationError) ErrorName() string {
	return "GetSubscribeUsersStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribeUsersStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribeUsersStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribeUsersStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribeUsersStatusRespValidationError{}

// Validate checks the field values on OnlineStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnlineStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnlineStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OnlineStatusMultiError, or
// nil if none found.
func (m *OnlineStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *OnlineStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Status

	if len(errors) > 0 {
		return OnlineStatusMultiError(errors)
	}

	return nil
}

// OnlineStatusMultiError is an error wrapping multiple validation errors
// returned by OnlineStatus.ValidateAll() if the designated constraints aren't met.
type OnlineStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnlineStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnlineStatusMultiError) AllErrors() []error { return m }

// OnlineStatusValidationError is the validation error returned by
// OnlineStatus.Validate if the designated constraints aren't met.
type OnlineStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnlineStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnlineStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnlineStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnlineStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnlineStatusValidationError) ErrorName() string { return "OnlineStatusValidationError" }

// Error satisfies the builtin error interface
func (e OnlineStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnlineStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnlineStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnlineStatusValidationError{}

// Validate checks the field values on GetUserStatusReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserStatusReqMultiError, or nil if none found.
func (m *GetUserStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserStatusReqMultiError(errors)
	}

	return nil
}

// GetUserStatusReqMultiError is an error wrapping multiple validation errors
// returned by GetUserStatusReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserStatusReqMultiError) AllErrors() []error { return m }

// GetUserStatusReqValidationError is the validation error returned by
// GetUserStatusReq.Validate if the designated constraints aren't met.
type GetUserStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserStatusReqValidationError) ErrorName() string { return "GetUserStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserStatusReqValidationError{}

// Validate checks the field values on GetUserStatusResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserStatusRespMultiError, or nil if none found.
func (m *GetUserStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatusList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserStatusRespValidationError{
						field:  fmt.Sprintf("StatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserStatusRespValidationError{
						field:  fmt.Sprintf("StatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserStatusRespValidationError{
					field:  fmt.Sprintf("StatusList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserStatusRespMultiError(errors)
	}

	return nil
}

// GetUserStatusRespMultiError is an error wrapping multiple validation errors
// returned by GetUserStatusResp.ValidateAll() if the designated constraints
// aren't met.
type GetUserStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserStatusRespMultiError) AllErrors() []error { return m }

// GetUserStatusRespValidationError is the validation error returned by
// GetUserStatusResp.Validate if the designated constraints aren't met.
type GetUserStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserStatusRespValidationError) ErrorName() string {
	return "GetUserStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserStatusRespValidationError{}

// Validate checks the field values on SetUserStatusReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserStatusReqMultiError, or nil if none found.
func (m *SetUserStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Status

	// no validation rules for PlatformID

	// no validation rules for ConnID

	// no validation rules for IsBackground

	if len(errors) > 0 {
		return SetUserStatusReqMultiError(errors)
	}

	return nil
}

// SetUserStatusReqMultiError is an error wrapping multiple validation errors
// returned by SetUserStatusReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserStatusReqMultiError) AllErrors() []error { return m }

// SetUserStatusReqValidationError is the validation error returned by
// SetUserStatusReq.Validate if the designated constraints aren't met.
type SetUserStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserStatusReqValidationError) ErrorName() string { return "SetUserStatusReqValidationError" }

// Error satisfies the builtin error interface
func (e SetUserStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserStatusReqValidationError{}

// Validate checks the field values on SetUserStatusResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserStatusRespMultiError, or nil if none found.
func (m *SetUserStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserStatusRespMultiError(errors)
	}

	return nil
}

// SetUserStatusRespMultiError is an error wrapping multiple validation errors
// returned by SetUserStatusResp.ValidateAll() if the designated constraints
// aren't met.
type SetUserStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserStatusRespMultiError) AllErrors() []error { return m }

// SetUserStatusRespValidationError is the validation error returned by
// SetUserStatusResp.Validate if the designated constraints aren't met.
type SetUserStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserStatusRespValidationError) ErrorName() string {
	return "SetUserStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserStatusRespValidationError{}

// Validate checks the field values on UserOnlineStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserOnlineStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserOnlineStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserOnlineStatusMultiError, or nil if none found.
func (m *UserOnlineStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UserOnlineStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for ConnID

	if len(errors) > 0 {
		return UserOnlineStatusMultiError(errors)
	}

	return nil
}

// UserOnlineStatusMultiError is an error wrapping multiple validation errors
// returned by UserOnlineStatus.ValidateAll() if the designated constraints
// aren't met.
type UserOnlineStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserOnlineStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserOnlineStatusMultiError) AllErrors() []error { return m }

// UserOnlineStatusValidationError is the validation error returned by
// UserOnlineStatus.Validate if the designated constraints aren't met.
type UserOnlineStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserOnlineStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserOnlineStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserOnlineStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserOnlineStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserOnlineStatusValidationError) ErrorName() string { return "UserOnlineStatusValidationError" }

// Error satisfies the builtin error interface
func (e UserOnlineStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserOnlineStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserOnlineStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserOnlineStatusValidationError{}

// Validate checks the field values on SetUserOnlineStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserOnlineStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserOnlineStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserOnlineStatusReqMultiError, or nil if none found.
func (m *SetUserOnlineStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserOnlineStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetUserOnlineStatusReqValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetUserOnlineStatusReqValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetUserOnlineStatusReqValidationError{
					field:  fmt.Sprintf("Status[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetUserOnlineStatusReqMultiError(errors)
	}

	return nil
}

// SetUserOnlineStatusReqMultiError is an error wrapping multiple validation
// errors returned by SetUserOnlineStatusReq.ValidateAll() if the designated
// constraints aren't met.
type SetUserOnlineStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserOnlineStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserOnlineStatusReqMultiError) AllErrors() []error { return m }

// SetUserOnlineStatusReqValidationError is the validation error returned by
// SetUserOnlineStatusReq.Validate if the designated constraints aren't met.
type SetUserOnlineStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserOnlineStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserOnlineStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserOnlineStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserOnlineStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserOnlineStatusReqValidationError) ErrorName() string {
	return "SetUserOnlineStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserOnlineStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserOnlineStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserOnlineStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserOnlineStatusReqValidationError{}

// Validate checks the field values on SetUserOnlineStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserOnlineStatusResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserOnlineStatusResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserOnlineStatusRespMultiError, or nil if none found.
func (m *SetUserOnlineStatusResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserOnlineStatusResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserOnlineStatusRespMultiError(errors)
	}

	return nil
}

// SetUserOnlineStatusRespMultiError is an error wrapping multiple validation
// errors returned by SetUserOnlineStatusResp.ValidateAll() if the designated
// constraints aren't met.
type SetUserOnlineStatusRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserOnlineStatusRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserOnlineStatusRespMultiError) AllErrors() []error { return m }

// SetUserOnlineStatusRespValidationError is the validation error returned by
// SetUserOnlineStatusResp.Validate if the designated constraints aren't met.
type SetUserOnlineStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserOnlineStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserOnlineStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserOnlineStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserOnlineStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserOnlineStatusRespValidationError) ErrorName() string {
	return "SetUserOnlineStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserOnlineStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserOnlineStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserOnlineStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserOnlineStatusRespValidationError{}

// Validate checks the field values on ProcessUserCommandAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandAddReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandAddReqMultiError, or nil if none found.
func (m *ProcessUserCommandAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Type

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessUserCommandAddReqValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessUserCommandAddReqValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessUserCommandAddReqValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessUserCommandAddReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessUserCommandAddReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessUserCommandAddReqValidationError{
				field:  "Ex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessUserCommandAddReqMultiError(errors)
	}

	return nil
}

// ProcessUserCommandAddReqMultiError is an error wrapping multiple validation
// errors returned by ProcessUserCommandAddReq.ValidateAll() if the designated
// constraints aren't met.
type ProcessUserCommandAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandAddReqMultiError) AllErrors() []error { return m }

// ProcessUserCommandAddReqValidationError is the validation error returned by
// ProcessUserCommandAddReq.Validate if the designated constraints aren't met.
type ProcessUserCommandAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandAddReqValidationError) ErrorName() string {
	return "ProcessUserCommandAddReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandAddReqValidationError{}

// Validate checks the field values on ProcessUserCommandAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandAddResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandAddRespMultiError, or nil if none found.
func (m *ProcessUserCommandAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProcessUserCommandAddRespMultiError(errors)
	}

	return nil
}

// ProcessUserCommandAddRespMultiError is an error wrapping multiple validation
// errors returned by ProcessUserCommandAddResp.ValidateAll() if the
// designated constraints aren't met.
type ProcessUserCommandAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandAddRespMultiError) AllErrors() []error { return m }

// ProcessUserCommandAddRespValidationError is the validation error returned by
// ProcessUserCommandAddResp.Validate if the designated constraints aren't met.
type ProcessUserCommandAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandAddRespValidationError) ErrorName() string {
	return "ProcessUserCommandAddRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandAddRespValidationError{}

// Validate checks the field values on ProcessUserCommandDeleteReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandDeleteReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandDeleteReqMultiError, or nil if none found.
func (m *ProcessUserCommandDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Type

	// no validation rules for Uuid

	if len(errors) > 0 {
		return ProcessUserCommandDeleteReqMultiError(errors)
	}

	return nil
}

// ProcessUserCommandDeleteReqMultiError is an error wrapping multiple
// validation errors returned by ProcessUserCommandDeleteReq.ValidateAll() if
// the designated constraints aren't met.
type ProcessUserCommandDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandDeleteReqMultiError) AllErrors() []error { return m }

// ProcessUserCommandDeleteReqValidationError is the validation error returned
// by ProcessUserCommandDeleteReq.Validate if the designated constraints
// aren't met.
type ProcessUserCommandDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandDeleteReqValidationError) ErrorName() string {
	return "ProcessUserCommandDeleteReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandDeleteReqValidationError{}

// Validate checks the field values on ProcessUserCommandDeleteResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandDeleteResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandDeleteResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandDeleteRespMultiError, or nil if none found.
func (m *ProcessUserCommandDeleteResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandDeleteResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProcessUserCommandDeleteRespMultiError(errors)
	}

	return nil
}

// ProcessUserCommandDeleteRespMultiError is an error wrapping multiple
// validation errors returned by ProcessUserCommandDeleteResp.ValidateAll() if
// the designated constraints aren't met.
type ProcessUserCommandDeleteRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandDeleteRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandDeleteRespMultiError) AllErrors() []error { return m }

// ProcessUserCommandDeleteRespValidationError is the validation error returned
// by ProcessUserCommandDeleteResp.Validate if the designated constraints
// aren't met.
type ProcessUserCommandDeleteRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandDeleteRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandDeleteRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandDeleteRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandDeleteRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandDeleteRespValidationError) ErrorName() string {
	return "ProcessUserCommandDeleteRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandDeleteRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandDeleteResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandDeleteRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandDeleteRespValidationError{}

// Validate checks the field values on ProcessUserCommandUpdateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandUpdateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandUpdateReqMultiError, or nil if none found.
func (m *ProcessUserCommandUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Type

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessUserCommandUpdateReqValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessUserCommandUpdateReqValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessUserCommandUpdateReqValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessUserCommandUpdateReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessUserCommandUpdateReqValidationError{
					field:  "Ex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessUserCommandUpdateReqValidationError{
				field:  "Ex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessUserCommandUpdateReqMultiError(errors)
	}

	return nil
}

// ProcessUserCommandUpdateReqMultiError is an error wrapping multiple
// validation errors returned by ProcessUserCommandUpdateReq.ValidateAll() if
// the designated constraints aren't met.
type ProcessUserCommandUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandUpdateReqMultiError) AllErrors() []error { return m }

// ProcessUserCommandUpdateReqValidationError is the validation error returned
// by ProcessUserCommandUpdateReq.Validate if the designated constraints
// aren't met.
type ProcessUserCommandUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandUpdateReqValidationError) ErrorName() string {
	return "ProcessUserCommandUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandUpdateReqValidationError{}

// Validate checks the field values on ProcessUserCommandUpdateResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandUpdateResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandUpdateRespMultiError, or nil if none found.
func (m *ProcessUserCommandUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProcessUserCommandUpdateRespMultiError(errors)
	}

	return nil
}

// ProcessUserCommandUpdateRespMultiError is an error wrapping multiple
// validation errors returned by ProcessUserCommandUpdateResp.ValidateAll() if
// the designated constraints aren't met.
type ProcessUserCommandUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandUpdateRespMultiError) AllErrors() []error { return m }

// ProcessUserCommandUpdateRespValidationError is the validation error returned
// by ProcessUserCommandUpdateResp.Validate if the designated constraints
// aren't met.
type ProcessUserCommandUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandUpdateRespValidationError) ErrorName() string {
	return "ProcessUserCommandUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandUpdateRespValidationError{}

// Validate checks the field values on ProcessUserCommandGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandGetReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandGetReqMultiError, or nil if none found.
func (m *ProcessUserCommandGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Type

	if len(errors) > 0 {
		return ProcessUserCommandGetReqMultiError(errors)
	}

	return nil
}

// ProcessUserCommandGetReqMultiError is an error wrapping multiple validation
// errors returned by ProcessUserCommandGetReq.ValidateAll() if the designated
// constraints aren't met.
type ProcessUserCommandGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandGetReqMultiError) AllErrors() []error { return m }

// ProcessUserCommandGetReqValidationError is the validation error returned by
// ProcessUserCommandGetReq.Validate if the designated constraints aren't met.
type ProcessUserCommandGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandGetReqValidationError) ErrorName() string {
	return "ProcessUserCommandGetReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandGetReqValidationError{}

// Validate checks the field values on CommandInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommandInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommandInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommandInfoRespMultiError, or nil if none found.
func (m *CommandInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CommandInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for CreateTime

	// no validation rules for Uuid

	// no validation rules for Value

	// no validation rules for Ex

	if len(errors) > 0 {
		return CommandInfoRespMultiError(errors)
	}

	return nil
}

// CommandInfoRespMultiError is an error wrapping multiple validation errors
// returned by CommandInfoResp.ValidateAll() if the designated constraints
// aren't met.
type CommandInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandInfoRespMultiError) AllErrors() []error { return m }

// CommandInfoRespValidationError is the validation error returned by
// CommandInfoResp.Validate if the designated constraints aren't met.
type CommandInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandInfoRespValidationError) ErrorName() string { return "CommandInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e CommandInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommandInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandInfoRespValidationError{}

// Validate checks the field values on ProcessUserCommandGetResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandGetResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandGetRespMultiError, or nil if none found.
func (m *ProcessUserCommandGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommandResp() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProcessUserCommandGetRespValidationError{
						field:  fmt.Sprintf("CommandResp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProcessUserCommandGetRespValidationError{
						field:  fmt.Sprintf("CommandResp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProcessUserCommandGetRespValidationError{
					field:  fmt.Sprintf("CommandResp[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProcessUserCommandGetRespMultiError(errors)
	}

	return nil
}

// ProcessUserCommandGetRespMultiError is an error wrapping multiple validation
// errors returned by ProcessUserCommandGetResp.ValidateAll() if the
// designated constraints aren't met.
type ProcessUserCommandGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandGetRespMultiError) AllErrors() []error { return m }

// ProcessUserCommandGetRespValidationError is the validation error returned by
// ProcessUserCommandGetResp.Validate if the designated constraints aren't met.
type ProcessUserCommandGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandGetRespValidationError) ErrorName() string {
	return "ProcessUserCommandGetRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandGetRespValidationError{}

// Validate checks the field values on ProcessUserCommandGetAllReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandGetAllReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandGetAllReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandGetAllReqMultiError, or nil if none found.
func (m *ProcessUserCommandGetAllReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandGetAllReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return ProcessUserCommandGetAllReqMultiError(errors)
	}

	return nil
}

// ProcessUserCommandGetAllReqMultiError is an error wrapping multiple
// validation errors returned by ProcessUserCommandGetAllReq.ValidateAll() if
// the designated constraints aren't met.
type ProcessUserCommandGetAllReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandGetAllReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandGetAllReqMultiError) AllErrors() []error { return m }

// ProcessUserCommandGetAllReqValidationError is the validation error returned
// by ProcessUserCommandGetAllReq.Validate if the designated constraints
// aren't met.
type ProcessUserCommandGetAllReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandGetAllReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandGetAllReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandGetAllReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandGetAllReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandGetAllReqValidationError) ErrorName() string {
	return "ProcessUserCommandGetAllReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandGetAllReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandGetAllReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandGetAllReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandGetAllReqValidationError{}

// Validate checks the field values on AllCommandInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllCommandInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllCommandInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllCommandInfoRespMultiError, or nil if none found.
func (m *AllCommandInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AllCommandInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for CreateTime

	// no validation rules for Uuid

	// no validation rules for Value

	// no validation rules for Ex

	if len(errors) > 0 {
		return AllCommandInfoRespMultiError(errors)
	}

	return nil
}

// AllCommandInfoRespMultiError is an error wrapping multiple validation errors
// returned by AllCommandInfoResp.ValidateAll() if the designated constraints
// aren't met.
type AllCommandInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllCommandInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllCommandInfoRespMultiError) AllErrors() []error { return m }

// AllCommandInfoRespValidationError is the validation error returned by
// AllCommandInfoResp.Validate if the designated constraints aren't met.
type AllCommandInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllCommandInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllCommandInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllCommandInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllCommandInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllCommandInfoRespValidationError) ErrorName() string {
	return "AllCommandInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e AllCommandInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllCommandInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllCommandInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllCommandInfoRespValidationError{}

// Validate checks the field values on ProcessUserCommandGetAllResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessUserCommandGetAllResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessUserCommandGetAllResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessUserCommandGetAllRespMultiError, or nil if none found.
func (m *ProcessUserCommandGetAllResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessUserCommandGetAllResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommandResp() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProcessUserCommandGetAllRespValidationError{
						field:  fmt.Sprintf("CommandResp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProcessUserCommandGetAllRespValidationError{
						field:  fmt.Sprintf("CommandResp[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProcessUserCommandGetAllRespValidationError{
					field:  fmt.Sprintf("CommandResp[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProcessUserCommandGetAllRespMultiError(errors)
	}

	return nil
}

// ProcessUserCommandGetAllRespMultiError is an error wrapping multiple
// validation errors returned by ProcessUserCommandGetAllResp.ValidateAll() if
// the designated constraints aren't met.
type ProcessUserCommandGetAllRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessUserCommandGetAllRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessUserCommandGetAllRespMultiError) AllErrors() []error { return m }

// ProcessUserCommandGetAllRespValidationError is the validation error returned
// by ProcessUserCommandGetAllResp.Validate if the designated constraints
// aren't met.
type ProcessUserCommandGetAllRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessUserCommandGetAllRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessUserCommandGetAllRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessUserCommandGetAllRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessUserCommandGetAllRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessUserCommandGetAllRespValidationError) ErrorName() string {
	return "ProcessUserCommandGetAllRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessUserCommandGetAllRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessUserCommandGetAllResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessUserCommandGetAllRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessUserCommandGetAllRespValidationError{}

// Validate checks the field values on AddNotificationAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNotificationAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNotificationAccountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNotificationAccountReqMultiError, or nil if none found.
func (m *AddNotificationAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNotificationAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for NickName

	// no validation rules for FaceURL

	if len(errors) > 0 {
		return AddNotificationAccountReqMultiError(errors)
	}

	return nil
}

// AddNotificationAccountReqMultiError is an error wrapping multiple validation
// errors returned by AddNotificationAccountReq.ValidateAll() if the
// designated constraints aren't met.
type AddNotificationAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNotificationAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNotificationAccountReqMultiError) AllErrors() []error { return m }

// AddNotificationAccountReqValidationError is the validation error returned by
// AddNotificationAccountReq.Validate if the designated constraints aren't met.
type AddNotificationAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNotificationAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNotificationAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNotificationAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNotificationAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNotificationAccountReqValidationError) ErrorName() string {
	return "AddNotificationAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddNotificationAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNotificationAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNotificationAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNotificationAccountReqValidationError{}

// Validate checks the field values on AddNotificationAccountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNotificationAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNotificationAccountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNotificationAccountRespMultiError, or nil if none found.
func (m *AddNotificationAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNotificationAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for FaceURL

	// no validation rules for NickName

	if len(errors) > 0 {
		return AddNotificationAccountRespMultiError(errors)
	}

	return nil
}

// AddNotificationAccountRespMultiError is an error wrapping multiple
// validation errors returned by AddNotificationAccountResp.ValidateAll() if
// the designated constraints aren't met.
type AddNotificationAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNotificationAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNotificationAccountRespMultiError) AllErrors() []error { return m }

// AddNotificationAccountRespValidationError is the validation error returned
// by AddNotificationAccountResp.Validate if the designated constraints aren't met.
type AddNotificationAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNotificationAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNotificationAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNotificationAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNotificationAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNotificationAccountRespValidationError) ErrorName() string {
	return "AddNotificationAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e AddNotificationAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNotificationAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNotificationAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNotificationAccountRespValidationError{}

// Validate checks the field values on UpdateNotificationAccountInfoReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateNotificationAccountInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationAccountInfoReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNotificationAccountInfoReqMultiError, or nil if none found.
func (m *UpdateNotificationAccountInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationAccountInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for FaceURL

	// no validation rules for NickName

	if len(errors) > 0 {
		return UpdateNotificationAccountInfoReqMultiError(errors)
	}

	return nil
}

// UpdateNotificationAccountInfoReqMultiError is an error wrapping multiple
// validation errors returned by
// UpdateNotificationAccountInfoReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotificationAccountInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationAccountInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationAccountInfoReqMultiError) AllErrors() []error { return m }

// UpdateNotificationAccountInfoReqValidationError is the validation error
// returned by UpdateNotificationAccountInfoReq.Validate if the designated
// constraints aren't met.
type UpdateNotificationAccountInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationAccountInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationAccountInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationAccountInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationAccountInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationAccountInfoReqValidationError) ErrorName() string {
	return "UpdateNotificationAccountInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationAccountInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationAccountInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationAccountInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationAccountInfoReqValidationError{}

// Validate checks the field values on UpdateNotificationAccountInfoResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateNotificationAccountInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationAccountInfoResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateNotificationAccountInfoRespMultiError, or nil if none found.
func (m *UpdateNotificationAccountInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationAccountInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNotificationAccountInfoRespMultiError(errors)
	}

	return nil
}

// UpdateNotificationAccountInfoRespMultiError is an error wrapping multiple
// validation errors returned by
// UpdateNotificationAccountInfoResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotificationAccountInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationAccountInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationAccountInfoRespMultiError) AllErrors() []error { return m }

// UpdateNotificationAccountInfoRespValidationError is the validation error
// returned by UpdateNotificationAccountInfoResp.Validate if the designated
// constraints aren't met.
type UpdateNotificationAccountInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationAccountInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationAccountInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationAccountInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationAccountInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationAccountInfoRespValidationError) ErrorName() string {
	return "UpdateNotificationAccountInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationAccountInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationAccountInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationAccountInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationAccountInfoRespValidationError{}

// Validate checks the field values on SearchNotificationAccountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchNotificationAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchNotificationAccountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchNotificationAccountReqMultiError, or nil if none found.
func (m *SearchNotificationAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchNotificationAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchNotificationAccountReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchNotificationAccountReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchNotificationAccountReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchNotificationAccountReqMultiError(errors)
	}

	return nil
}

// SearchNotificationAccountReqMultiError is an error wrapping multiple
// validation errors returned by SearchNotificationAccountReq.ValidateAll() if
// the designated constraints aren't met.
type SearchNotificationAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchNotificationAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchNotificationAccountReqMultiError) AllErrors() []error { return m }

// SearchNotificationAccountReqValidationError is the validation error returned
// by SearchNotificationAccountReq.Validate if the designated constraints
// aren't met.
type SearchNotificationAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchNotificationAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchNotificationAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchNotificationAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchNotificationAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchNotificationAccountReqValidationError) ErrorName() string {
	return "SearchNotificationAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchNotificationAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchNotificationAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchNotificationAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchNotificationAccountReqValidationError{}

// Validate checks the field values on NotificationAccountInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationAccountInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationAccountInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationAccountInfoMultiError, or nil if none found.
func (m *NotificationAccountInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationAccountInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for FaceURL

	// no validation rules for NickName

	if len(errors) > 0 {
		return NotificationAccountInfoMultiError(errors)
	}

	return nil
}

// NotificationAccountInfoMultiError is an error wrapping multiple validation
// errors returned by NotificationAccountInfo.ValidateAll() if the designated
// constraints aren't met.
type NotificationAccountInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationAccountInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationAccountInfoMultiError) AllErrors() []error { return m }

// NotificationAccountInfoValidationError is the validation error returned by
// NotificationAccountInfo.Validate if the designated constraints aren't met.
type NotificationAccountInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationAccountInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationAccountInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationAccountInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationAccountInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationAccountInfoValidationError) ErrorName() string {
	return "NotificationAccountInfoValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationAccountInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationAccountInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationAccountInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationAccountInfoValidationError{}

// Validate checks the field values on SearchNotificationAccountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchNotificationAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchNotificationAccountResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchNotificationAccountRespMultiError, or nil if none found.
func (m *SearchNotificationAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchNotificationAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetNotificationAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchNotificationAccountRespValidationError{
						field:  fmt.Sprintf("NotificationAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchNotificationAccountRespValidationError{
						field:  fmt.Sprintf("NotificationAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchNotificationAccountRespValidationError{
					field:  fmt.Sprintf("NotificationAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchNotificationAccountRespMultiError(errors)
	}

	return nil
}

// SearchNotificationAccountRespMultiError is an error wrapping multiple
// validation errors returned by SearchNotificationAccountResp.ValidateAll()
// if the designated constraints aren't met.
type SearchNotificationAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchNotificationAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchNotificationAccountRespMultiError) AllErrors() []error { return m }

// SearchNotificationAccountRespValidationError is the validation error
// returned by SearchNotificationAccountResp.Validate if the designated
// constraints aren't met.
type SearchNotificationAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchNotificationAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchNotificationAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchNotificationAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchNotificationAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchNotificationAccountRespValidationError) ErrorName() string {
	return "SearchNotificationAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e SearchNotificationAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchNotificationAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchNotificationAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchNotificationAccountRespValidationError{}

// Validate checks the field values on GetNotificationAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationAccountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationAccountReqMultiError, or nil if none found.
func (m *GetNotificationAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetNotificationAccountReqMultiError(errors)
	}

	return nil
}

// GetNotificationAccountReqMultiError is an error wrapping multiple validation
// errors returned by GetNotificationAccountReq.ValidateAll() if the
// designated constraints aren't met.
type GetNotificationAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationAccountReqMultiError) AllErrors() []error { return m }

// GetNotificationAccountReqValidationError is the validation error returned by
// GetNotificationAccountReq.Validate if the designated constraints aren't met.
type GetNotificationAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationAccountReqValidationError) ErrorName() string {
	return "GetNotificationAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationAccountReqValidationError{}

// Validate checks the field values on GetNotificationAccountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationAccountResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationAccountResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationAccountRespMultiError, or nil if none found.
func (m *GetNotificationAccountResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationAccountResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNotificationAccountRespMultiError(errors)
	}

	return nil
}

// GetNotificationAccountRespMultiError is an error wrapping multiple
// validation errors returned by GetNotificationAccountResp.ValidateAll() if
// the designated constraints aren't met.
type GetNotificationAccountRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationAccountRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationAccountRespMultiError) AllErrors() []error { return m }

// GetNotificationAccountRespValidationError is the validation error returned
// by GetNotificationAccountResp.Validate if the designated constraints aren't met.
type GetNotificationAccountRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationAccountRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationAccountRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationAccountRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationAccountRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationAccountRespValidationError) ErrorName() string {
	return "GetNotificationAccountRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationAccountRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationAccountResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationAccountRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationAccountRespValidationError{}

// Validate checks the field values on SortQueryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortQueryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortQueryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortQueryReqMultiError, or
// nil if none found.
func (m *SortQueryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SortQueryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Asc

	// no validation rules for UserIDName

	if len(errors) > 0 {
		return SortQueryReqMultiError(errors)
	}

	return nil
}

// SortQueryReqMultiError is an error wrapping multiple validation errors
// returned by SortQueryReq.ValidateAll() if the designated constraints aren't met.
type SortQueryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortQueryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortQueryReqMultiError) AllErrors() []error { return m }

// SortQueryReqValidationError is the validation error returned by
// SortQueryReq.Validate if the designated constraints aren't met.
type SortQueryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortQueryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortQueryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortQueryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortQueryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortQueryReqValidationError) ErrorName() string { return "SortQueryReqValidationError" }

// Error satisfies the builtin error interface
func (e SortQueryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortQueryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortQueryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortQueryReqValidationError{}

// Validate checks the field values on SortQueryResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortQueryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortQueryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortQueryRespMultiError, or
// nil if none found.
func (m *SortQueryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SortQueryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SortQueryRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SortQueryRespValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SortQueryRespValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SortQueryRespMultiError(errors)
	}

	return nil
}

// SortQueryRespMultiError is an error wrapping multiple validation errors
// returned by SortQueryResp.ValidateAll() if the designated constraints
// aren't met.
type SortQueryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortQueryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortQueryRespMultiError) AllErrors() []error { return m }

// SortQueryRespValidationError is the validation error returned by
// SortQueryResp.Validate if the designated constraints aren't met.
type SortQueryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortQueryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortQueryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortQueryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortQueryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortQueryRespValidationError) ErrorName() string { return "SortQueryRespValidationError" }

// Error satisfies the builtin error interface
func (e SortQueryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortQueryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortQueryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortQueryRespValidationError{}

// Validate checks the field values on GetAllOnlineUsersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllOnlineUsersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllOnlineUsersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllOnlineUsersReqMultiError, or nil if none found.
func (m *GetAllOnlineUsersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllOnlineUsersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cursor

	if len(errors) > 0 {
		return GetAllOnlineUsersReqMultiError(errors)
	}

	return nil
}

// GetAllOnlineUsersReqMultiError is an error wrapping multiple validation
// errors returned by GetAllOnlineUsersReq.ValidateAll() if the designated
// constraints aren't met.
type GetAllOnlineUsersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllOnlineUsersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllOnlineUsersReqMultiError) AllErrors() []error { return m }

// GetAllOnlineUsersReqValidationError is the validation error returned by
// GetAllOnlineUsersReq.Validate if the designated constraints aren't met.
type GetAllOnlineUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllOnlineUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllOnlineUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllOnlineUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllOnlineUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllOnlineUsersReqValidationError) ErrorName() string {
	return "GetAllOnlineUsersReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllOnlineUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllOnlineUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllOnlineUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllOnlineUsersReqValidationError{}

// Validate checks the field values on GetAllOnlineUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllOnlineUsersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllOnlineUsersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllOnlineUsersRespMultiError, or nil if none found.
func (m *GetAllOnlineUsersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllOnlineUsersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatusList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllOnlineUsersRespValidationError{
						field:  fmt.Sprintf("StatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllOnlineUsersRespValidationError{
						field:  fmt.Sprintf("StatusList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllOnlineUsersRespValidationError{
					field:  fmt.Sprintf("StatusList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return GetAllOnlineUsersRespMultiError(errors)
	}

	return nil
}

// GetAllOnlineUsersRespMultiError is an error wrapping multiple validation
// errors returned by GetAllOnlineUsersResp.ValidateAll() if the designated
// constraints aren't met.
type GetAllOnlineUsersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllOnlineUsersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllOnlineUsersRespMultiError) AllErrors() []error { return m }

// GetAllOnlineUsersRespValidationError is the validation error returned by
// GetAllOnlineUsersResp.Validate if the designated constraints aren't met.
type GetAllOnlineUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllOnlineUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllOnlineUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllOnlineUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllOnlineUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllOnlineUsersRespValidationError) ErrorName() string {
	return "GetAllOnlineUsersRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllOnlineUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllOnlineUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllOnlineUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllOnlineUsersRespValidationError{}

// Validate checks the field values on DelUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelUsersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelUsersReqMultiError, or
// nil if none found.
func (m *DelUsersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelUsersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelUsersReqMultiError(errors)
	}

	return nil
}

// DelUsersReqMultiError is an error wrapping multiple validation errors
// returned by DelUsersReq.ValidateAll() if the designated constraints aren't met.
type DelUsersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelUsersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelUsersReqMultiError) AllErrors() []error { return m }

// DelUsersReqValidationError is the validation error returned by
// DelUsersReq.Validate if the designated constraints aren't met.
type DelUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUsersReqValidationError) ErrorName() string { return "DelUsersReqValidationError" }

// Error satisfies the builtin error interface
func (e DelUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUsersReqValidationError{}

// Validate checks the field values on DelUsersResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelUsersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelUsersResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelUsersRespMultiError, or
// nil if none found.
func (m *DelUsersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelUsersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelUsersRespMultiError(errors)
	}

	return nil
}

// DelUsersRespMultiError is an error wrapping multiple validation errors
// returned by DelUsersResp.ValidateAll() if the designated constraints aren't met.
type DelUsersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelUsersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelUsersRespMultiError) AllErrors() []error { return m }

// DelUsersRespValidationError is the validation error returned by
// DelUsersResp.Validate if the designated constraints aren't met.
type DelUsersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUsersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUsersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUsersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUsersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUsersRespValidationError) ErrorName() string { return "DelUsersRespValidationError" }

// Error satisfies the builtin error interface
func (e DelUsersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUsersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUsersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUsersRespValidationError{}

// Validate checks the field values on AccountCheckRespSingleUserStatus with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AccountCheckRespSingleUserStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountCheckRespSingleUserStatus with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AccountCheckRespSingleUserStatusMultiError, or nil if none found.
func (m *AccountCheckRespSingleUserStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountCheckRespSingleUserStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for AccountStatus

	if len(errors) > 0 {
		return AccountCheckRespSingleUserStatusMultiError(errors)
	}

	return nil
}

// AccountCheckRespSingleUserStatusMultiError is an error wrapping multiple
// validation errors returned by
// AccountCheckRespSingleUserStatus.ValidateAll() if the designated
// constraints aren't met.
type AccountCheckRespSingleUserStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountCheckRespSingleUserStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountCheckRespSingleUserStatusMultiError) AllErrors() []error { return m }

// AccountCheckRespSingleUserStatusValidationError is the validation error
// returned by AccountCheckRespSingleUserStatus.Validate if the designated
// constraints aren't met.
type AccountCheckRespSingleUserStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCheckRespSingleUserStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCheckRespSingleUserStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCheckRespSingleUserStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCheckRespSingleUserStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCheckRespSingleUserStatusValidationError) ErrorName() string {
	return "AccountCheckRespSingleUserStatusValidationError"
}

// Error satisfies the builtin error interface
func (e AccountCheckRespSingleUserStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCheckRespSingleUserStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCheckRespSingleUserStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCheckRespSingleUserStatusValidationError{}
